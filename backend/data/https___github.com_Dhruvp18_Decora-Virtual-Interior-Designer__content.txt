=== REPOSITORY SUMMARY ===
Repository: dhruvp18/decora-virtual-interior-designer
Files analyzed: 61

Estimated tokens: 130.3k

=== REPOSITORY STRUCTURE ===
Directory structure:
└── dhruvp18-decora-virtual-interior-designer/
    ├── README.md
    ├── package.json
    ├── requirements.txt
    ├── public/
    │   ├── index.html
    │   ├── manifest.json
    │   ├── robots.txt
    │   ├── scene.bin
    │   └── scene.gltf
    └── src/
        ├── App.js
        ├── App.test.js
        ├── index.css
        ├── index.js
        ├── reportWebVitals.js
        ├── setupTests.js
        └── components/
            ├── ChatBot/
            │   ├── Chatbot.js
            │   └── server.js
            ├── Floorplan/
            │   ├── Cart.css
            │   ├── Cart.js
            │   ├── CartItems.js
            │   ├── Floorplan2d.css
            │   ├── Floorplan2d.js
            │   ├── Floorplan3d.css
            │   ├── Floorplan3d.js
            │   ├── FurnitureGrid.js
            │   ├── FurnitureItem.css
            │   ├── FurnitureItem.js
            │   ├── ModelGrid.css
            │   ├── ModelGrid.js
            │   ├── ModelItem.js
            │   ├── PaintGrid.css
            │   ├── PaintGrid.js
            │   ├── navbar.js
            │   └── scrapedData/
            │       ├── amazon_products.json
            │       ├── furnScraper.py
            │       └── requirements.txt
            ├── Furniture/
            │   ├── FurnitureColorPanel.js
            │   └── Sofa.js
            ├── Landing-Page/
            │   ├── Landing.css
            │   ├── LandingModel.js
            │   └── landing.js
            ├── Langchain/
            │   ├── 1app.py
            │   ├── .estimate_cache.db
            │   └── .langchain.db
            ├── Login-in/
            │   ├── Buttons.css
            │   ├── LoginButton.js
            │   └── LogoutButton.js
            ├── MainPage/
            │   ├── AddRoomModal.js
            │   ├── MainPage.css
            │   ├── MainPage.js
            │   ├── RoomCard.css
            │   └── RoomCard.js
            ├── NavBar/
            │   ├── Navbar.css
            │   └── Navbar.js
            ├── RenovationEstimator/
            │   ├── Renovation_Estimator.ipynb
            │   └── updated_house_renovation_data.csv
            └── RoomQuiz/
                ├── RoomQuiz.css
                ├── RoomQuiz.js
                ├── linear_regression_model.h5
                ├── linear_regression_model.joblib
                ├── requirements.txt
                └── server.py


=== REPOSITORY CONTENT ===
================================================
File: README.md
================================================
<h1 align="center">
  <a href="https://github.com/CommunityOfCoders/Inheritance-2024" style="display: inline-flex; align-items: center; text-decoration: none;">
    <img src="./COC.png" alt="CoC Inheritance 2024" width="30" height="30" style="vertical-align: middle;">
    <span style="margin-left: 10px; font-size: 24px; font-weight: bold;">CoC Inheritance 2024</span>
  </a>
  <br>
  Decora: Virtual Interior Designer
</h1>


<details>
<summary>Table of Contents</summary>

- [Description](#description)
- [Links](#links)
- [Tech Stack](#tech-stack)
- [Progress](#progress)
- [Future Scope](#future-scope)
- [Applications](#applications)
- [Project Setup](#project-setup)
- [Usage](#usage)
- [Team Members](#team-members)
- [Mentors](#mentors)
- [Screenshots](#screenshots)

</details>

## 📝Description
- The Virtual Interior Designer is an innovative and user-friendly platform designed to help users visualize and plan their dream interiors effortlessly. With a personal profile-based account system, users can save and manage their projects conveniently.



## 🔗Links

- [GitHub Repository](https://github.com/chaitra-samant/Decora)
- [Demo Video of Decora](https://drive.google.com/drive/folders/1-6YKqTX5RRUrAFTY-_hjR4_FCZ93Mawg?usp=drive_link)
- [Screenshots of Decora](https://drive.google.com/drive/folders/1-7m2Abz8JKoboT-Y_hvocWGRv1XRkkHf)



## 🤖Tech-Stack

#### Front-end
- JavaScript
- React
- Three.js
- Konva.js
- HTML
- CSS

#### Back-end
- Flask (ML)
- Python
  

## 📈Progress
-  2D to 3D Floor Plan Conversion
  Create your custom 2D floor plan, and the platform will seamlessly convert it into a 3D model, offering a realistic view of your space.
-  Personalized Interior Design
  Enjoy complete freedom to choose and place furniture and decor items as per your preferences.
  Customize layouts to match your vision and style.
-  Online Furniture Suggestions
  Get access to a variety of furniture options scraped from online sources.
  Compare styles, prices, and features before making a choice.
-  Budget Estimation
   Get an estimated budget for your house renovation or interior design based on your home and preferences.



## 🔮Future Scope
- AI-Powered Design Suggestions – Implement machine learning to provide intelligent furniture placement and interior design recommendations based on user preferences and trends.
- Expanded Furniture Database – Enhance the platform by scraping more furniture options from various online marketplaces.
- Collaboration Feature – Allow multiple users to collaborate on a single interior design project, making it ideal for teams and professional designers.

## 💸Applications
- Homeowners & Renters – Plan and visualize home interiors before making any purchase or renovation decisions.
- Interior Designers – A powerful tool for designers to create, showcase, and modify designs according to client requirements.
- Furniture Retailers & E-commerce Platforms – Enhance customer experience by allowing them to place and visualize products in their own space.
- Real Estate & Property Developers – Provide prospective buyers with a virtual interior setup for better property visualization.
- Construction & Renovation Services – Assist contractors in planning and estimating renovation costs efficiently.

## 🛠 Setting Up the Project Locally

### 1. Clone the GitHub Repository
Clone the repository to your local machine using the following command:
```bash
git clone https://github.com/chaitra-samant/Decora
```

### 2. Set Up API Keys
Before running the project, you need to set up your API keys. Navigate to the `.env` file in the directory and add the following environment variables:
```env
REACT_APP_AUTH0_DOMAIN=YOUR_AUTH0_DOMAIN
REACT_APP_AUTH0_CLIENT_ID=YOUR_AUTH0_CLIENT_ID
REACT_APP_SKETCHFAB_API_KEY=YOUR_SKETCHFAB_API
REACT_APP_SCRAPER_API_KEY=YOUR_SCRAPPER_API_KEY
```
Replace `YOUR_AUTH0_DOMAIN`, `YOUR_AUTH0_CLIENT_ID`, `YOUR_SKETCHFAB_API`, and `YOUR_SCRAPPER_API_KEY` with your actual API credentials.

### 3. Install Dependencies and Start the Application
Navigate to the client directory and install all required dependencies:
```bash
cd Virtual Interior Designer
npm install
npm start
```
This will start the development server, and you can access the application in your browser.


## 👨‍💻Team Members
- [Vidhi Rohira ](https://github.com/vidhirohira)
- [Dhruv Panchal ](https://github.com/Dhruvp18)
- [Viraj Vora ](https://github.com/viraj200524)
- [Chaitra Samant ](https://github.com/chaitra-samant)

## 👨‍🏫Mentors
- [Adi Awaskar ](https://github.com/adiawaskar)
- [Aarya Bodas ](https://github.com/aarya-16)





================================================
File: package.json
================================================
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@auth0/auth0-react": "^2.2.4",
    "@react-three/drei": "^9.120.5",
    "@react-three/fiber": "^8.17.10",
    "@types/three": "^0.172.0",
    "ajv": "^8.17.1",
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "cra-template": "1.2.0",
    "cross-env": "^7.0.3",
    "crypto-js": "^4.2.0",
    "css-loader": "^7.1.2",
    "konva": "^9.3.18",
    "lru-cache": "^11.0.2",
    "lucide-react": "^0.469.0",
    "minimatch": "^10.0.1",
    "my-app": "file:",
    "nodemon": "^3.1.9",
    "postcss": "^8.4.49",
    "postcss-loader": "^8.1.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-konva": "^18.2.10",
    "react-markdown": "^9.0.3",
    "react-reconciler": "^0.28.0",
    "react-router-dom": "^6.4.0",
    "react-scripts": "5.0.1",
    "react-spinners": "^0.15.0",
    "three": "^0.172.0",
    "three-stdlib": "^2.35.2",
    "web-vitals": "^4.2.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },

  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "concurrently": "^9.1.2"
  }
}



================================================
File: requirements.txt
================================================
flask
flask-cors
numpy
pandas
joblib
scikit-learn
requests
beautifulsoup4
fake-useragent
python-dotenv



================================================
File: public/index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Decora</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/examples/js/loaders/GLTFLoader.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://static.sketchfab.com/api/sketchfab-viewer-1.12.1.js"></script>

  </body>
</html>



================================================
File: public/manifest.json
================================================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



================================================
File: public/robots.txt
================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:



================================================
File: public/scene.bin
================================================
[Non-text file]


================================================
File: public/scene.gltf
================================================
{
  "accessors": [
    {
      "bufferView": 2,
      "componentType": 5126,
      "count": 7269,
      "max": [
        1.5240002870559692,
        1.9812004566192627,
        1.3716001510620117
      ],
      "min": [
        -1.9812004566192627,
        -1.5240002870559692,
        -1.7778260707855225
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 87228,
      "componentType": 5126,
      "count": 7269,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "componentType": 5126,
      "count": 7269,
      "max": [
        0.6250001192092896,
        0.5000001192092896
      ],
      "min": [
        0.3749999403953552,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "componentType": 5125,
      "count": 34560,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 174456,
      "componentType": 5126,
      "count": 1090,
      "max": [
        1.5240002870559692,
        1.5240002870559692,
        -1.3716000318527222
      ],
      "min": [
        -1.5240004062652588,
        -1.5240004062652588,
        -1.7830803394317627
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 187536,
      "componentType": 5126,
      "count": 1090,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 58152,
      "componentType": 5126,
      "count": 1090,
      "max": [
        0.3750000596046448,
        0.7500001192092896
      ],
      "min": [
        0.1249999925494194,
        0.4999999701976776
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 138240,
      "componentType": 5125,
      "count": 5184,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 200616,
      "componentType": 5126,
      "count": 863,
      "max": [
        0.8500001430511475,
        0.8500001430511475,
        0.03500000759959221
      ],
      "min": [
        -0.8500001430511475,
        -0.8500001430511475,
        -0.03500000759959221
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 210972,
      "componentType": 5126,
      "count": 863,
      "max": [
        0.9999492168426514,
        0.9999029636383057,
        1.0
      ],
      "min": [
        -0.9999492168426514,
        -0.9999029636383057,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 66872,
      "componentType": 5126,
      "count": 863,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 158976,
      "componentType": 5125,
      "count": 4032,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 221328,
      "componentType": 5126,
      "count": 23028,
      "max": [
        0.9500002264976501,
        0.4500000774860382,
        0.8574171662330627
      ],
      "min": [
        -0.9500001668930054,
        -0.4500000774860382,
        0.18023626506328583
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 497664,
      "componentType": 5126,
      "count": 23028,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 73776,
      "componentType": 5126,
      "count": 23028,
      "max": [
        1.000000238418579,
        1.000000238418579
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 175104,
      "componentType": 5125,
      "count": 34560,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 774000,
      "componentType": 5126,
      "count": 1388,
      "max": [
        0.8763736486434937,
        0.3554838299751282,
        0.10795776546001434
      ],
      "min": [
        -0.8763736486434937,
        -0.3554838299751282,
        -0.03230929374694824
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 790656,
      "componentType": 5126,
      "count": 1388,
      "max": [
        1.0,
        1.0,
        1.8306951687918627e-06
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 258000,
      "componentType": 5126,
      "count": 1388,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.9123008251190186,
        0.726599931716919
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 313344,
      "componentType": 5125,
      "count": 7680,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 807312,
      "componentType": 5126,
      "count": 655,
      "max": [
        0.9678702354431152,
        0.968585729598999,
        1.286289930343628
      ],
      "min": [
        -0.9678702354431152,
        -0.968585729598999,
        -1.2862900495529175
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 815172,
      "componentType": 5126,
      "count": 655,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 269104,
      "componentType": 5126,
      "count": 655,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 344064,
      "componentType": 5125,
      "count": 2880,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 823032,
      "componentType": 5126,
      "count": 655,
      "max": [
        0.9678702354431152,
        0.968585729598999,
        1.286289930343628
      ],
      "min": [
        -0.9678702354431152,
        -0.968585729598999,
        -1.2862900495529175
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 830892,
      "componentType": 5126,
      "count": 655,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 274344,
      "componentType": 5126,
      "count": 655,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 355584,
      "componentType": 5125,
      "count": 2880,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 838752,
      "componentType": 5126,
      "count": 441,
      "max": [
        0.1483573168516159,
        0.16052593290805817,
        0.06661747395992279
      ],
      "min": [
        -0.16052593290805817,
        -0.16052593290805817,
        -0.0666174590587616
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 844044,
      "componentType": 5126,
      "count": 441,
      "max": [
        1.0,
        1.0,
        0.9999999403953552
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9999999403953552
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 279584,
      "componentType": 5126,
      "count": 441,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 367104,
      "componentType": 5125,
      "count": 2304,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 849336,
      "componentType": 5126,
      "count": 441,
      "max": [
        0.1483573168516159,
        0.16052593290805817,
        0.06661747395992279
      ],
      "min": [
        -0.16052593290805817,
        -0.16052593290805817,
        -0.0666174590587616
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 854628,
      "componentType": 5126,
      "count": 441,
      "max": [
        1.0,
        1.0,
        0.9999999403953552
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9999999403953552
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 283112,
      "componentType": 5126,
      "count": 441,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 376320,
      "componentType": 5125,
      "count": 2304,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 859920,
      "componentType": 5126,
      "count": 23024,
      "max": [
        0.1973222941160202,
        0.4500000774860382,
        0.8574171662330627
      ],
      "min": [
        -0.9500001668930054,
        -0.4500000774860382,
        0.18023626506328583
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1136208,
      "componentType": 5126,
      "count": 23024,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 286640,
      "componentType": 5126,
      "count": 23024,
      "max": [
        1.000000238418579,
        1.000000238418579
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 385536,
      "componentType": 5125,
      "count": 34560,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1412496,
      "componentType": 5126,
      "count": 1388,
      "max": [
        0.42404329776763916,
        0.3554838299751282,
        0.10795776546001434
      ],
      "min": [
        -0.42404329776763916,
        -0.3554838299751282,
        -0.03230929374694824
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1429152,
      "componentType": 5126,
      "count": 1388,
      "max": [
        1.0,
        1.0,
        1.472174176342378e-06
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 470832,
      "componentType": 5126,
      "count": 1388,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.9123008251190186,
        0.726599931716919
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 523776,
      "componentType": 5125,
      "count": 7680,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1445808,
      "componentType": 5126,
      "count": 655,
      "max": [
        0.9678702354431152,
        0.968585729598999,
        1.286289930343628
      ],
      "min": [
        -0.9678702354431152,
        -0.968585729598999,
        -1.2862900495529175
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1453668,
      "componentType": 5126,
      "count": 655,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 481936,
      "componentType": 5126,
      "count": 655,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 554496,
      "componentType": 5125,
      "count": 2880,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1461528,
      "componentType": 5126,
      "count": 441,
      "max": [
        0.1483573168516159,
        0.16052593290805817,
        0.06661747395992279
      ],
      "min": [
        -0.16052593290805817,
        -0.16052593290805817,
        -0.0666174590587616
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1466820,
      "componentType": 5126,
      "count": 441,
      "max": [
        1.0,
        1.0,
        0.9999999403953552
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9999999403953552
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 487176,
      "componentType": 5126,
      "count": 441,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 566016,
      "componentType": 5125,
      "count": 2304,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1472112,
      "componentType": 5126,
      "count": 7476,
      "max": [
        0.7500001788139343,
        0.03500000759959221,
        0.40000006556510925
      ],
      "min": [
        -0.7500001788139343,
        -0.03500000759959221,
        -0.40000006556510925
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1561824,
      "componentType": 5126,
      "count": 7476,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 490704,
      "componentType": 5126,
      "count": 7476,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 575232,
      "componentType": 5125,
      "count": 11232,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1651536,
      "componentType": 5126,
      "count": 576,
      "max": [
        0.6110649704933167,
        0.02093437872827053,
        0.2610648572444916
      ],
      "min": [
        -0.6110649108886719,
        0.013942578807473183,
        -0.2610648572444916
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1658448,
      "componentType": 5126,
      "count": 576,
      "max": [
        0.34691280126571655,
        -0.8875077962875366,
        0.4424113631248474
      ],
      "min": [
        -0.34691619873046875,
        -1.0,
        -0.4424135982990265
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 550512,
      "componentType": 5126,
      "count": 576,
      "max": [
        0.5830394625663757,
        0.9776211380958557
      ],
      "min": [
        0.4184172451496124,
        0.7723790407180786
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 620160,
      "componentType": 5125,
      "count": 864,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1665360,
      "componentType": 5126,
      "count": 2853,
      "max": [
        -1.4925357103347778,
        0.7792662978172302,
        0.7035489678382874
      ],
      "min": [
        -2.012664556503296,
        -0.5506662130355835,
        -0.37865087389945984
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1699596,
      "componentType": 5126,
      "count": 2853,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 555120,
      "componentType": 5126,
      "count": 2853,
      "max": [
        0.536189079284668,
        0.17467905580997467
      ],
      "min": [
        0.4638110101222992,
        0.08225293457508087
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 623616,
      "componentType": 5125,
      "count": 13824,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1733832,
      "componentType": 5126,
      "count": 60,
      "max": [
        -1.6117724180221558,
        0.8883514404296875,
        0.9365005493164063
      ],
      "min": [
        -1.6117726564407349,
        -0.6597512364387512,
        -0.6116021871566772
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1734552,
      "componentType": 5126,
      "count": 60,
      "max": [
        1.0,
        3.979244240781554e-07,
        4.620205800165422e-07
      ],
      "min": [
        1.0,
        -3.979245093432837e-07,
        -3.080139663325099e-07
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 577944,
      "componentType": 5126,
      "count": 60,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 678912,
      "componentType": 5125,
      "count": 96,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1735272,
      "componentType": 5126,
      "count": 9519,
      "max": [
        8.579872131347656,
        1.000000238418579,
        4.571043491363525
      ],
      "min": [
        -1.221278429031372,
        -1.0000005960464478,
        -1.0000001192092896
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 1849500,
      "componentType": 5126,
      "count": 9519,
      "max": [
        0.999794065952301,
        1.0,
        0.9966169595718384
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 578424,
      "componentType": 5126,
      "count": 9519,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 679296,
      "componentType": 5125,
      "count": 14400,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 1963728,
      "componentType": 5126,
      "count": 9519,
      "max": [
        8.579872131347656,
        1.000000238418579,
        4.571043491363525
      ],
      "min": [
        -1.221278429031372,
        -1.0000005960464478,
        -1.0000001192092896
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2077956,
      "componentType": 5126,
      "count": 9519,
      "max": [
        0.999794065952301,
        1.0,
        0.9966169595718384
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 654576,
      "componentType": 5126,
      "count": 9519,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 736896,
      "componentType": 5125,
      "count": 14400,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2192184,
      "componentType": 5126,
      "count": 5630,
      "max": [
        1.2823501825332642,
        24.168163299560547,
        1.2823548316955566
      ],
      "min": [
        -1.282353401184082,
        -24.168163299560547,
        -1.2823485136032104
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2259744,
      "componentType": 5126,
      "count": 5630,
      "max": [
        0.9948738217353821,
        0.9943426251411438,
        0.9948738217353821
      ],
      "min": [
        -0.9948738217353821,
        -0.994341254234314,
        -0.9948738217353821
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 730728,
      "componentType": 5126,
      "count": 5630,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.010000006295740604
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 794496,
      "componentType": 5125,
      "count": 8448,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2327304,
      "componentType": 5126,
      "count": 10366,
      "max": [
        -0.0003381638089194894,
        0.22469425201416016,
        0.7500001192092896
      ],
      "min": [
        -0.15461203455924988,
        -0.24128039181232452,
        -0.7500001192092896
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2451696,
      "componentType": 5126,
      "count": 10366,
      "max": [
        0.9999728798866272,
        0.9696703553199768,
        0.9999808073043823
      ],
      "min": [
        -0.9844726324081421,
        -0.9524358510971069,
        -0.9999808073043823
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 775768,
      "componentType": 5126,
      "count": 10366,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 828288,
      "componentType": 5125,
      "count": 15552,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2576088,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2579304,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 858696,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 890496,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2582520,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2585736,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 860840,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 895104,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2588952,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2592168,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 862984,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 899712,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2595384,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2598600,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 865128,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 904320,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2601816,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2605032,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 867272,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 908928,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2608248,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2611464,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 869416,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 913536,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2614680,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2617896,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 871560,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 918144,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2621112,
      "componentType": 5126,
      "count": 10366,
      "max": [
        -0.0003381638089194894,
        0.22469425201416016,
        0.7500001192092896
      ],
      "min": [
        -0.15461203455924988,
        -0.24128039181232452,
        -0.7500001192092896
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2745504,
      "componentType": 5126,
      "count": 10366,
      "max": [
        0.9999728798866272,
        0.9696703553199768,
        0.9999808073043823
      ],
      "min": [
        -0.9844726324081421,
        -0.9524358510971069,
        -0.9999808073043823
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 873704,
      "componentType": 5126,
      "count": 10366,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 922752,
      "componentType": 5125,
      "count": 15552,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2869896,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2873112,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 956632,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 984960,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2876328,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2879544,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 958776,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 989568,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2882760,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2885976,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 960920,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 994176,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2889192,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2892408,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 963064,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 998784,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2895624,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2898840,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 965208,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1003392,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2902056,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2905272,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 967352,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1008000,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2908488,
      "componentType": 5126,
      "count": 268,
      "max": [
        0.0668739303946495,
        0.0668739303946495,
        0.020000001415610313
      ],
      "min": [
        -0.0668739303946495,
        -0.0668739303946495,
        -0.019999999552965164
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2911704,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0,
        1.0,
        0.9993683099746704
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9993683099746704
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 969496,
      "componentType": 5126,
      "count": 268,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1012608,
      "componentType": 5125,
      "count": 1152,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2914920,
      "componentType": 5126,
      "count": 2147,
      "max": [
        0.1353553682565689,
        0.1353553682565689,
        0.34742188453674316
      ],
      "min": [
        -0.1353553682565689,
        -0.21171967685222626,
        -0.05000000447034836
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2940684,
      "componentType": 5126,
      "count": 2147,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9999921321868896
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 971640,
      "componentType": 5126,
      "count": 2147,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.01000000536441803
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1017216,
      "componentType": 5125,
      "count": 11712,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2966448,
      "componentType": 5126,
      "count": 559,
      "max": [
        0.9999997019767761,
        1.0,
        1.0
      ],
      "min": [
        -0.9999990463256836,
        -0.9999993443489075,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2973156,
      "componentType": 5126,
      "count": 559,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 988816,
      "componentType": 5126,
      "count": 559,
      "max": [
        1.0,
        1.0
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1064064,
      "componentType": 5125,
      "count": 2880,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 2979864,
      "componentType": 5126,
      "count": 1417,
      "max": [
        0.2707107365131378,
        0.2707107365131378,
        0.05000000447034836
      ],
      "min": [
        -0.2707107365131378,
        -0.2707107365131378,
        -0.050000011920928955
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 2996868,
      "componentType": 5126,
      "count": 1417,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 993288,
      "componentType": 5126,
      "count": 1417,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.01000000536441803
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1075584,
      "componentType": 5125,
      "count": 7296,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3013872,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3014160,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1004624,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1104768,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3014448,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3014736,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1004816,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1104912,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3015024,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3015312,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1005008,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105056,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3015600,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3015888,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1005200,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105200,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3016176,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3016464,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1005392,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105344,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3016752,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3017040,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1005584,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105488,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3017328,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3017616,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1005776,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105632,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3017904,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.05174235999584198,
        0.004930480383336544,
        0.16538533568382263
      ],
      "min": [
        0.04310910031199455,
        -0.004930480383336544,
        0.12901678681373596
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3018192,
      "componentType": 5126,
      "count": 24,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1005968,
      "componentType": 5126,
      "count": 24,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105776,
      "componentType": 5125,
      "count": 36,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3018480,
      "componentType": 5126,
      "count": 74,
      "max": [
        1.0,
        1.3913824558258057,
        7.984147071838379
      ],
      "min": [
        -1.0,
        -0.26522189378738403,
        -2.4589180946350098
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3019368,
      "componentType": 5126,
      "count": 74,
      "max": [
        1.0,
        0.9999974966049194,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1006160,
      "componentType": 5126,
      "count": 74,
      "max": [
        0.875,
        1.0
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1105920,
      "componentType": 5125,
      "count": 120,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3020256,
      "componentType": 5126,
      "count": 2806,
      "max": [
        0.9207399487495422,
        0.9207400679588318,
        0.20355147123336792
      ],
      "min": [
        -0.9207400679588318,
        -0.9207400679588318,
        -0.8586270809173584
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3053928,
      "componentType": 5126,
      "count": 2806,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1006752,
      "componentType": 5126,
      "count": 2806,
      "max": [
        1.0,
        1.0
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1106400,
      "componentType": 5125,
      "count": 14208,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3087600,
      "componentType": 5126,
      "count": 823,
      "max": [
        1.08114492893219,
        1.0811448097229004,
        1.5351309776306152
      ],
      "min": [
        -1.0811445713043213,
        -1.0811448097229004,
        -0.003400721587240696
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3097476,
      "componentType": 5126,
      "count": 823,
      "max": [
        0.9999869465827942,
        0.9999869465827942,
        1.0
      ],
      "min": [
        -0.9999869465827942,
        -0.9999869465827942,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1029200,
      "componentType": 5126,
      "count": 823,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1163232,
      "componentType": 5125,
      "count": 4224,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3107352,
      "componentType": 5126,
      "count": 128,
      "max": [
        0.8268458843231201,
        0.8268457651138306,
        1.172194480895996
      ],
      "min": [
        -0.8268454670906067,
        -0.8268457651138306,
        1.172194242477417
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3108888,
      "componentType": 5126,
      "count": 128,
      "max": [
        1.0385907671661698e-06,
        5.622693493023689e-07,
        -1.0
      ],
      "min": [
        -1.0385907671661698e-06,
        -5.622693493023689e-07,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1035784,
      "componentType": 5126,
      "count": 128,
      "max": [
        0.0,
        0.0
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1180128,
      "componentType": 5125,
      "count": 192,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3110424,
      "componentType": 5126,
      "count": 606,
      "max": [
        1.6974825859069824,
        0.12732090055942535,
        1.3635972738265991
      ],
      "min": [
        0.8832775950431824,
        -0.17257733643054962,
        0.4639391303062439
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3117696,
      "componentType": 5126,
      "count": 606,
      "max": [
        0.9991037845611572,
        0.9999672174453735,
        0.9999983310699463
      ],
      "min": [
        -0.9999876022338867,
        -0.9999508261680603,
        -0.9999905228614807
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1036808,
      "componentType": 5126,
      "count": 606,
      "max": [
        1.0000001192092896,
        0.8535535335540771
      ],
      "min": [
        0.8535534143447876,
        0.4999999701976776
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1180896,
      "componentType": 5125,
      "count": 3264,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3124968,
      "componentType": 5126,
      "count": 836,
      "max": [
        2.1011786460876465,
        2.101180076599121,
        0.305841863155365
      ],
      "min": [
        -2.1011812686920166,
        -2.101180076599121,
        0.009944453835487366
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3135000,
      "componentType": 5126,
      "count": 836,
      "max": [
        0.9910575151443481,
        0.9910574555397034,
        1.0
      ],
      "min": [
        -0.9910573363304138,
        -0.9910574555397034,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1041656,
      "componentType": 5126,
      "count": 836,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1193952,
      "componentType": 5125,
      "count": 4224,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3145032,
      "componentType": 5126,
      "count": 836,
      "max": [
        2.1011786460876465,
        2.101180076599121,
        0.305841863155365
      ],
      "min": [
        -2.1011812686920166,
        -2.101180076599121,
        0.009944453835487366
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3155064,
      "componentType": 5126,
      "count": 836,
      "max": [
        0.9910575151443481,
        0.9910574555397034,
        1.0
      ],
      "min": [
        -0.9910573363304138,
        -0.9910574555397034,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1048344,
      "componentType": 5126,
      "count": 836,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1210848,
      "componentType": 5125,
      "count": 4224,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3165096,
      "componentType": 5126,
      "count": 1320,
      "max": [
        0.1353401094675064,
        0.1353401243686676,
        0.04149705544114113
      ],
      "min": [
        -0.1353401094675064,
        -0.1353401094675064,
        -0.04149705544114113
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3180936,
      "componentType": 5126,
      "count": 1320,
      "max": [
        1.0,
        1.0,
        0.9999857544898987
      ],
      "min": [
        -1.0,
        -1.0,
        -0.9999857544898987
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1055032,
      "componentType": 5126,
      "count": 1320,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        -1.1102231569740545e-16
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1227744,
      "componentType": 5125,
      "count": 6912,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3196776,
      "componentType": 5126,
      "count": 2747,
      "max": [
        0.13915064930915833,
        0.13779544830322266,
        0.04766315966844559
      ],
      "min": [
        -0.13805322349071503,
        -0.1391506791114807,
        -0.019794469699263573
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3229740,
      "componentType": 5126,
      "count": 2747,
      "max": [
        0.9945902228355408,
        0.9971486926078796,
        0.9997648000717163
      ],
      "min": [
        -0.9982345104217529,
        -0.9945899248123169,
        -0.9999944567680359
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1065592,
      "componentType": 5126,
      "count": 2747,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        2.220446049250313e-16,
        0.5
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1255392,
      "componentType": 5125,
      "count": 14400,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3262704,
      "componentType": 5126,
      "count": 879,
      "max": [
        0.27071070671081543,
        0.2707107663154602,
        0.050000011920928955
      ],
      "min": [
        -0.27071070671081543,
        -0.27071070671081543,
        -0.050000011920928955
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3273252,
      "componentType": 5126,
      "count": 879,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1087568,
      "componentType": 5126,
      "count": 879,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.01000000536441803
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1312992,
      "componentType": 5125,
      "count": 4224,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3283800,
      "componentType": 5126,
      "count": 879,
      "max": [
        0.27071070671081543,
        0.2707107663154602,
        0.050000011920928955
      ],
      "min": [
        -0.27071070671081543,
        -0.27071070671081543,
        -0.050000011920928955
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3294348,
      "componentType": 5126,
      "count": 879,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1094600,
      "componentType": 5126,
      "count": 879,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.01000000536441803
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1329888,
      "componentType": 5125,
      "count": 4224,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3304896,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.8903721570968628,
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        -1.0000001192092896,
        -9.506734848022461,
        -36.736000061035156
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3373776,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1101632,
      "componentType": 5126,
      "count": 5740,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1346784,
      "componentType": 5125,
      "count": 8640,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3442656,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.8903721570968628,
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        -1.0000001192092896,
        -9.506734848022461,
        -36.736000061035156
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3511536,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1147552,
      "componentType": 5126,
      "count": 5740,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1381344,
      "componentType": 5125,
      "count": 8640,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3580416,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.8903721570968628,
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        -1.0000001192092896,
        -9.506734848022461,
        -36.736000061035156
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3649296,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1193472,
      "componentType": 5126,
      "count": 5740,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1415904,
      "componentType": 5125,
      "count": 8640,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3718176,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.8903721570968628,
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        -1.0000001192092896,
        -9.506734848022461,
        -36.736000061035156
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3787056,
      "componentType": 5126,
      "count": 5740,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1239392,
      "componentType": 5126,
      "count": 5740,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.125,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1450464,
      "componentType": 5125,
      "count": 8640,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3855936,
      "componentType": 5126,
      "count": 1853,
      "max": [
        0.284950852394104,
        0.28495079278945923,
        0.02071613259613514
      ],
      "min": [
        -0.2849508821964264,
        -0.2849509119987488,
        -0.03432321175932884
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3878172,
      "componentType": 5126,
      "count": 1853,
      "max": [
        1.0,
        1.0,
        1.0
      ],
      "min": [
        -1.0,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1285312,
      "componentType": 5126,
      "count": 1853,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.01000000536441803
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1485024,
      "componentType": 5125,
      "count": 9216,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3900408,
      "componentType": 5126,
      "count": 1911,
      "max": [
        -0.9843528866767883,
        1.1841963529586792,
        1.4122213125228882
      ],
      "min": [
        -1.2757021188735962,
        0.8928471803665161,
        1.20143461227417
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 3923340,
      "componentType": 5126,
      "count": 1911,
      "max": [
        1.0,
        0.9997445940971375,
        1.0
      ],
      "min": [
        -0.9997445940971375,
        -1.0,
        -1.0
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1300136,
      "componentType": 5126,
      "count": 1911,
      "max": [
        1.0000001192092896,
        1.0000001192092896
      ],
      "min": [
        0.0,
        0.01000000536441803
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1521888,
      "componentType": 5125,
      "count": 9216,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 3946272,
      "componentType": 5126,
      "count": 15360,
      "max": [
        -1.0272825956344604,
        1.1621383428573608,
        1.6281814575195313
      ],
      "min": [
        -1.2160776853561401,
        0.9486503601074219,
        1.362001895904541
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 2,
      "byteOffset": 4130592,
      "componentType": 5126,
      "count": 15360,
      "max": [
        0.9999386072158813,
        0.9999772906303406,
        0.9918099045753479
      ],
      "min": [
        -0.9998718500137329,
        -0.9984024167060852,
        -0.8435404896736145
      ],
      "type": "VEC3"
    },
    {
      "bufferView": 1,
      "byteOffset": 1315424,
      "componentType": 5126,
      "count": 15360,
      "max": [
        0.8750001192092896,
        1.0000001192092896
      ],
      "min": [
        0.375,
        0.0
      ],
      "type": "VEC2"
    },
    {
      "bufferView": 0,
      "byteOffset": 1558752,
      "componentType": 5125,
      "count": 23040,
      "type": "SCALAR"
    }
  ],
  "asset": {
    "extras": {
      "author": "Runscript (https://sketchfab.com/Runscript)",
      "license": "CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)",
      "source": "https://sketchfab.com/3d-models/isometric-room-3d-69ac6f44e48f453a84026ab6557def48",
      "title": "Isometric room 3d"
    },
    "generator": "Sketchfab-16.54.0",
    "version": "2.0"
  },
  "bufferViews": [
    {
      "buffer": 0,
      "byteLength": 1650912,
      "name": "floatBufferViews",
      "target": 34963
    },
    {
      "buffer": 0,
      "byteLength": 1438304,
      "byteOffset": 1650912,
      "byteStride": 8,
      "name": "floatBufferViews",
      "target": 34962
    },
    {
      "buffer": 0,
      "byteLength": 4314912,
      "byteOffset": 3089216,
      "byteStride": 12,
      "name": "floatBufferViews",
      "target": 34962
    }
  ],
  "buffers": [
    {
      "byteLength": 7404128,
      "uri": "scene.bin"
    }
  ],
  "extensionsUsed": [
    "KHR_materials_emissive_strength",
    "KHR_materials_specular"
  ],
  "materials": [
    {
      "doubleSided": true,
      "name": "Torus__0",
      "pbrMetallicRoughness": {
        "metallicFactor": 0.0,
        "roughnessFactor": 0.6
      }
    },
    {
      "doubleSided": true,
      "name": "Material",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          1.0,
          0.696431,
          0.388454,
          1.0
        ],
        "metallicFactor": 0.0
      }
    },
    {
      "doubleSided": true,
      "name": "Material.001",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          1.0,
          0.267719,
          0.0518136,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.9088101133723162
      }
    },
    {
      "doubleSided": true,
      "name": "Material.016",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.311288,
          0.321206,
          0.21802,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.930313521964466
      }
    },
    {
      "doubleSided": true,
      "name": "Material.006",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.0,
          0.0,
          0.0,
          1.0
        ],
        "metallicFactor": 0.0
      }
    },
    {
      "doubleSided": true,
      "name": "Material.015",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.9241509999999996,
          0.681891,
          0.4322990000000001,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8400373019071001
      }
    },
    {
      "doubleSided": true,
      "name": "Material.029",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.627764,
          0.800424,
          0.539583,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8334389268807303
      }
    },
    {
      "doubleSided": true,
      "emissiveFactor": [
        0.1993072093512634,
        0.2791477773611199,
        0.8741016688625401
      ],
      "extensions": {
        "KHR_materials_emissive_strength": {
          "emissiveStrength": 2.0
        }
      },
      "name": "Material.003",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.8,
          0.8,
          0.8,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8040408205773457
      }
    },
    {
      "doubleSided": true,
      "name": "Material.004",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.8,
          0.8,
          0.8,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8040408205773457
      }
    },
    {
      "doubleSided": true,
      "name": "Material.005",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.0,
          0.0,
          0.0,
          1.0
        ],
        "metallicFactor": 0.0
      }
    },
    {
      "doubleSided": true,
      "emissiveFactor": [
        0.7665614189803083,
        0.7053618963496051,
        0.35425718353534663
      ],
      "extensions": {
        "KHR_materials_emissive_strength": {
          "emissiveStrength": 10.0
        }
      },
      "name": "Material.032",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.8,
          0.8,
          0.8,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8040408205773457
      }
    },
    {
      "doubleSided": true,
      "extensions": {
        "KHR_materials_specular": {
          "specularColorFactor": [
            1.0,
            1.0,
            1.0
          ],
          "specularFactor": 0.278857992710073
        }
      },
      "name": "Material.023",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.15090114725019055,
          0.10136276996487964,
          0.13708843405786145,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8040408205773457
      }
    },
    {
      "doubleSided": true,
      "name": "Material.031",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.800007,
          0.505313,
          0.289257,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.8764872743677463
      }
    },
    {
      "doubleSided": true,
      "name": "Material.030",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.800393,
          0.408624,
          0.638125,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.886299507278721
      }
    },
    {
      "doubleSided": true,
      "name": "Material.002",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.504878,
          0.255849,
          0.194227,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.9319467341640716
      }
    },
    {
      "doubleSided": true,
      "name": "Material.017",
      "pbrMetallicRoughness": {
        "baseColorFactor": [
          0.0,
          0.224613,
          0.00185372,
          1.0
        ],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.9640491573150273
      }
    }
  ],
  "meshes": [
    {
      "name": "wall_Material_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 1,
            "POSITION": 0,
            "TEXCOORD_0": 2
          },
          "indices": 3,
          "material": 1,
          "mode": 4
        }
      ]
    },
    {
      "name": "floor_Material.001_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 5,
            "POSITION": 4,
            "TEXCOORD_0": 6
          },
          "indices": 7,
          "material": 2,
          "mode": 4
        }
      ]
    },
    {
      "name": "rug_Material.016_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 9,
            "POSITION": 8,
            "TEXCOORD_0": 10
          },
          "indices": 11,
          "material": 3,
          "mode": 4
        }
      ]
    },
    {
      "name": "couch_Material.016_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 13,
            "POSITION": 12,
            "TEXCOORD_0": 14
          },
          "indices": 15,
          "material": 3,
          "mode": 4
        }
      ]
    },
    {
      "name": "couch legs_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 17,
            "POSITION": 16,
            "TEXCOORD_0": 18
          },
          "indices": 19,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "pillow_Material.016_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 21,
            "POSITION": 20,
            "TEXCOORD_0": 22
          },
          "indices": 23,
          "material": 3,
          "mode": 4
        }
      ]
    },
    {
      "name": "pillow.001_Material.016_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 25,
            "POSITION": 24,
            "TEXCOORD_0": 26
          },
          "indices": 27,
          "material": 3,
          "mode": 4
        }
      ]
    },
    {
      "name": "mini_pilow_Material.015_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 29,
            "POSITION": 28,
            "TEXCOORD_0": 30
          },
          "indices": 31,
          "material": 5,
          "mode": 4
        }
      ]
    },
    {
      "name": "mini_pilow.001_Material.015_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 33,
            "POSITION": 32,
            "TEXCOORD_0": 34
          },
          "indices": 35,
          "material": 5,
          "mode": 4
        }
      ]
    },
    {
      "name": "couch.001_Material.016_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 37,
            "POSITION": 36,
            "TEXCOORD_0": 38
          },
          "indices": 39,
          "material": 3,
          "mode": 4
        }
      ]
    },
    {
      "name": "couch legs.001_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 41,
            "POSITION": 40,
            "TEXCOORD_0": 42
          },
          "indices": 43,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "pillow.002_Material.016_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 45,
            "POSITION": 44,
            "TEXCOORD_0": 46
          },
          "indices": 47,
          "material": 3,
          "mode": 4
        }
      ]
    },
    {
      "name": "mini_pilow.002_Material.015_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 49,
            "POSITION": 48,
            "TEXCOORD_0": 50
          },
          "indices": 51,
          "material": 5,
          "mode": 4
        }
      ]
    },
    {
      "name": "frame_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 53,
            "POSITION": 52,
            "TEXCOORD_0": 54
          },
          "indices": 55,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "frame_Material.029_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 57,
            "POSITION": 56,
            "TEXCOORD_0": 58
          },
          "indices": 59,
          "material": 6,
          "mode": 4
        }
      ]
    },
    {
      "name": "window_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 61,
            "POSITION": 60,
            "TEXCOORD_0": 62
          },
          "indices": 63,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "window_Material.003_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 65,
            "POSITION": 64,
            "TEXCOORD_0": 66
          },
          "indices": 67,
          "material": 7,
          "mode": 4
        }
      ]
    },
    {
      "name": "Curt_holder_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 69,
            "POSITION": 68,
            "TEXCOORD_0": 70
          },
          "indices": 71,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Curt_holder.001_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 73,
            "POSITION": 72,
            "TEXCOORD_0": 74
          },
          "indices": 75,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "curt_rod_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 77,
            "POSITION": 76,
            "TEXCOORD_0": 78
          },
          "indices": 79,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "curt_Material.004_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 81,
            "POSITION": 80,
            "TEXCOORD_0": 82
          },
          "indices": 83,
          "material": 8,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 85,
            "POSITION": 84,
            "TEXCOORD_0": 86
          },
          "indices": 87,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.001__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 89,
            "POSITION": 88,
            "TEXCOORD_0": 90
          },
          "indices": 91,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.002__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 93,
            "POSITION": 92,
            "TEXCOORD_0": 94
          },
          "indices": 95,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.003__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 97,
            "POSITION": 96,
            "TEXCOORD_0": 98
          },
          "indices": 99,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.004__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 101,
            "POSITION": 100,
            "TEXCOORD_0": 102
          },
          "indices": 103,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.005__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 105,
            "POSITION": 104,
            "TEXCOORD_0": 106
          },
          "indices": 107,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.006__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 109,
            "POSITION": 108,
            "TEXCOORD_0": 110
          },
          "indices": 111,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "curt.001_Material.004_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 113,
            "POSITION": 112,
            "TEXCOORD_0": 114
          },
          "indices": 115,
          "material": 8,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.007__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 117,
            "POSITION": 116,
            "TEXCOORD_0": 118
          },
          "indices": 119,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.008__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 121,
            "POSITION": 120,
            "TEXCOORD_0": 122
          },
          "indices": 123,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.009__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 125,
            "POSITION": 124,
            "TEXCOORD_0": 126
          },
          "indices": 127,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.010__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 129,
            "POSITION": 128,
            "TEXCOORD_0": 130
          },
          "indices": 131,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.011__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 133,
            "POSITION": 132,
            "TEXCOORD_0": 134
          },
          "indices": 135,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.012__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 137,
            "POSITION": 136,
            "TEXCOORD_0": 138
          },
          "indices": 139,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.013__0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 141,
            "POSITION": 140,
            "TEXCOORD_0": 142
          },
          "indices": 143,
          "material": 0,
          "mode": 4
        }
      ]
    },
    {
      "name": "lamp_Material.005_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 145,
            "POSITION": 144,
            "TEXCOORD_0": 146
          },
          "indices": 147,
          "material": 9,
          "mode": 4
        }
      ]
    },
    {
      "name": "Sphere_Material.032_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 149,
            "POSITION": 148,
            "TEXCOORD_0": 150
          },
          "indices": 151,
          "material": 10,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cylinder_Material.001_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 153,
            "POSITION": 152,
            "TEXCOORD_0": 154
          },
          "indices": 155,
          "material": 2,
          "mode": 4
        }
      ]
    },
    {
      "name": "Clock_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 157,
            "POSITION": 156,
            "TEXCOORD_0": 158
          },
          "indices": 159,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.001_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 161,
            "POSITION": 160,
            "TEXCOORD_0": 162
          },
          "indices": 163,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.002_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 165,
            "POSITION": 164,
            "TEXCOORD_0": 166
          },
          "indices": 167,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.003_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 169,
            "POSITION": 168,
            "TEXCOORD_0": 170
          },
          "indices": 171,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.004_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 173,
            "POSITION": 172,
            "TEXCOORD_0": 174
          },
          "indices": 175,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.006_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 177,
            "POSITION": 176,
            "TEXCOORD_0": 178
          },
          "indices": 179,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.007_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 181,
            "POSITION": 180,
            "TEXCOORD_0": 182
          },
          "indices": 183,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.008_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 185,
            "POSITION": 184,
            "TEXCOORD_0": 186
          },
          "indices": 187,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.005_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 189,
            "POSITION": 188,
            "TEXCOORD_0": 190
          },
          "indices": 191,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "table_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 193,
            "POSITION": 192,
            "TEXCOORD_0": 194
          },
          "indices": 195,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Circle_Material_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 197,
            "POSITION": 196,
            "TEXCOORD_0": 198
          },
          "indices": 199,
          "material": 1,
          "mode": 4
        }
      ]
    },
    {
      "name": "Circle_Material.023_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 201,
            "POSITION": 200,
            "TEXCOORD_0": 202
          },
          "indices": 203,
          "material": 11,
          "mode": 4
        }
      ]
    },
    {
      "name": "cup_Material_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 205,
            "POSITION": 204,
            "TEXCOORD_0": 206
          },
          "indices": 207,
          "material": 1,
          "mode": 4
        }
      ]
    },
    {
      "name": "Circle.001_Material_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 209,
            "POSITION": 208,
            "TEXCOORD_0": 210
          },
          "indices": 211,
          "material": 1,
          "mode": 4
        }
      ]
    },
    {
      "name": "Circle.002_Material_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 213,
            "POSITION": 212,
            "TEXCOORD_0": 214
          },
          "indices": 215,
          "material": 1,
          "mode": 4
        }
      ]
    },
    {
      "name": "Donut_Material.031_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 217,
            "POSITION": 216,
            "TEXCOORD_0": 218
          },
          "indices": 219,
          "material": 12,
          "mode": 4
        }
      ]
    },
    {
      "name": "Torus.015_Material.030_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 221,
            "POSITION": 220,
            "TEXCOORD_0": 222
          },
          "indices": 223,
          "material": 13,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cylinder.001_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 225,
            "POSITION": 224,
            "TEXCOORD_0": 226
          },
          "indices": 227,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cylinder.002_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 229,
            "POSITION": 228,
            "TEXCOORD_0": 230
          },
          "indices": 231,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "mini_table_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 233,
            "POSITION": 232,
            "TEXCOORD_0": 234
          },
          "indices": 235,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.011_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 237,
            "POSITION": 236,
            "TEXCOORD_0": 238
          },
          "indices": 239,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.012_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 241,
            "POSITION": 240,
            "TEXCOORD_0": 242
          },
          "indices": 243,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.013_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 245,
            "POSITION": 244,
            "TEXCOORD_0": 246
          },
          "indices": 247,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cylinder.003_Material.006_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 249,
            "POSITION": 248,
            "TEXCOORD_0": 250
          },
          "indices": 251,
          "material": 4,
          "mode": 4
        }
      ]
    },
    {
      "name": "pot_Material.002_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 253,
            "POSITION": 252,
            "TEXCOORD_0": 254
          },
          "indices": 255,
          "material": 14,
          "mode": 4
        }
      ]
    },
    {
      "name": "Cube.019_Material.017_0",
      "primitives": [
        {
          "attributes": {
            "NORMAL": 257,
            "POSITION": 256,
            "TEXCOORD_0": 258
          },
          "indices": 259,
          "material": 15,
          "mode": 4
        }
      ]
    }
  ],
  "nodes": [
    {
      "children": [
        1
      ],
      "matrix": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.220446049250313e-16,
        -1.0,
        0.0,
        0.0,
        1.0,
        2.220446049250313e-16,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ],
      "name": "Sketchfab_model"
    },
    {
      "children": [
        2
      ],
      "matrix": [
        0.009999999776482582,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.009999999776482582,
        0.0,
        0.0,
        -0.009999999776482582,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ],
      "name": "f7a27e48c07b42468c0f26ef4af172f8.fbx"
    },
    {
      "children": [
        3,
        5,
        7,
        9,
        21,
        29,
        32,
        35,
        37,
        39,
        41,
        57,
        73,
        77,
        97,
        99,
        104,
        106,
        108,
        112,
        126
      ],
      "name": "RootNode"
    },
    {
      "children": [
        4
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        0.0,
        180.0,
        0.0,
        1.0
      ],
      "name": "wall"
    },
    {
      "mesh": 0,
      "name": "wall_Material_0"
    },
    {
      "children": [
        6
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        0.0,
        180.0,
        0.0,
        1.0
      ],
      "name": "floor"
    },
    {
      "mesh": 1,
      "name": "floor_Material.001_0"
    },
    {
      "children": [
        8
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        49.792449951171875,
        45.23295211791992,
        46.31855773925781,
        1.0
      ],
      "name": "rug"
    },
    {
      "mesh": 2,
      "name": "rug_Material.016_0"
    },
    {
      "children": [
        10,
        11,
        13,
        15,
        17,
        19
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        27.342546463012695,
        37.09362030029297,
        -105.52851867675781,
        1.0
      ],
      "name": "couch"
    },
    {
      "mesh": 3,
      "name": "couch_Material.016_0"
    },
    {
      "children": [
        12
      ],
      "matrix": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        -2.646977960169688e-23,
        0.0,
        0.0,
        2.646977960169688e-23,
        1.0,
        0.0,
        0.0,
        -2.220446049250313e-16,
        0.07956039905548096,
        1.0
      ],
      "name": "couch legs"
    },
    {
      "mesh": 4,
      "name": "couch legs_Material.006_0"
    },
    {
      "children": [
        14
      ],
      "matrix": [
        0.40045568346977234,
        0.0,
        0.0,
        0.0,
        0.0,
        0.06606297454399628,
        0.3182148262507509,
        0.0,
        0.0,
        -0.12239032227800063,
        0.025408837295066086,
        0.0,
        -0.3824273943901062,
        0.0958939790725708,
        0.7438418865203857,
        1.0
      ],
      "name": "pillow"
    },
    {
      "mesh": 5,
      "name": "pillow_Material.016_0"
    },
    {
      "children": [
        16
      ],
      "matrix": [
        0.40045568346977234,
        0.0,
        0.0,
        0.0,
        0.0,
        0.06606297454399628,
        0.3182148262507509,
        0.0,
        0.0,
        -0.12239032227800063,
        0.025408837295066086,
        0.0,
        0.3942333459854126,
        0.0958939790725708,
        0.7438418865203857,
        1.0
      ],
      "name": "pillow.001"
    },
    {
      "mesh": 6,
      "name": "pillow.001_Material.016_0"
    },
    {
      "children": [
        18
      ],
      "matrix": [
        0.4710828848493467,
        -0.27867051351332184,
        -0.8369131738120978,
        0.0,
        0.5517907287312918,
        0.833324744888539,
        0.033117095786851486,
        0.0,
        0.6881917399912565,
        -0.4774018555390658,
        0.5463328631298542,
        0.0,
        -0.6601791977882385,
        -0.1851869821548462,
        0.58922278881073,
        1.0
      ],
      "name": "mini_pilow"
    },
    {
      "mesh": 7,
      "name": "mini_pilow_Material.015_0"
    },
    {
      "children": [
        20
      ],
      "matrix": [
        -0.4710828419150763,
        -0.2786704881154236,
        -0.8369132064358447,
        -0.0,
        -0.5517907518664464,
        0.833324801498607,
        0.03311708565029267,
        -0.0,
        -0.6881917772015858,
        -0.47740185825027803,
        0.54633281388848,
        -0.0,
        0.652504563331604,
        -0.1851869821548462,
        0.58922278881073,
        1.0
      ],
      "name": "mini_pilow.001"
    },
    {
      "mesh": 8,
      "name": "mini_pilow.001_Material.015_0"
    },
    {
      "children": [
        22,
        23,
        25,
        27
      ],
      "matrix": [
        4.371139006309477e-06,
        -1.1102230246251565e-14,
        -99.99999999999991,
        0.0,
        -99.99999999999982,
        -4.371139006309477e-06,
        -4.371139011860592e-06,
        0.0,
        -4.371139011860592e-06,
        99.99999999999991,
        -1.9984014443252818e-13,
        0.0,
        -107.43510437011719,
        37.09362030029297,
        31.585575103759766,
        1.0
      ],
      "name": "couch.001"
    },
    {
      "mesh": 9,
      "name": "couch.001_Material.016_0"
    },
    {
      "children": [
        24
      ],
      "matrix": [
        1.0,
        -1.3234889800848437e-23,
        -7.888609052210114e-31,
        0.0,
        1.3234889800848437e-23,
        1.0,
        -9.125504478607769e-24,
        0.0,
        7.888609052210115e-31,
        9.125504478607769e-24,
        1.0,
        0.0,
        -0.34622812271118164,
        0.0,
        0.07956039905548096,
        1.0
      ],
      "name": "couch legs.001"
    },
    {
      "mesh": 10,
      "name": "couch legs.001_Material.006_0"
    },
    {
      "children": [
        26
      ],
      "matrix": [
        0.40045568346977234,
        -3.308722450212109e-24,
        0.0,
        0.0,
        5.458382937846637e-25,
        0.06606297454399634,
        0.3182148262507509,
        0.0,
        -1.011237007553879e-24,
        -0.12239032227800063,
        0.025408837295066114,
        0.0,
        -0.382427453994751,
        0.0958939790725708,
        0.7438418865203857,
        1.0
      ],
      "name": "pillow.002"
    },
    {
      "mesh": 11,
      "name": "pillow.002_Material.016_0"
    },
    {
      "children": [
        28
      ],
      "matrix": [
        0.4710828848493471,
        -0.27867051351332195,
        -0.8369131738120975,
        0.0,
        0.5517907287312916,
        0.833324744888539,
        0.0331170957868516,
        0.0,
        0.6881917399912562,
        -0.47740185553906567,
        0.5463328631298545,
        0.0,
        -0.6601792573928833,
        -0.18518692255020142,
        0.58922278881073,
        1.0
      ],
      "name": "mini_pilow.002"
    },
    {
      "mesh": 12,
      "name": "mini_pilow.002_Material.015_0"
    },
    {
      "children": [
        30,
        31
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        19.177759170532227,
        215.3647003173828,
        -149.82070922851563,
        1.0
      ],
      "name": "frame"
    },
    {
      "mesh": 13,
      "name": "frame_Material.006_0"
    },
    {
      "mesh": 14,
      "name": "frame_Material.029_0"
    },
    {
      "children": [
        33,
        34
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        0.0,
        180.0,
        0.0,
        1.0
      ],
      "name": "window"
    },
    {
      "mesh": 15,
      "name": "window_Material.006_0"
    },
    {
      "mesh": 16,
      "name": "window_Material.003_0"
    },
    {
      "children": [
        36
      ],
      "matrix": [
        1.717987298965454,
        0.0,
        0.0,
        0.0,
        -0.0,
        -2.7989565793398917e-07,
        -1.7179872989654315,
        0.0,
        0.0,
        1.7179872989654315,
        -2.7989565793398917e-07,
        0.0,
        -152.39617919921875,
        257.0233459472656,
        62.556724548339844,
        1.0
      ],
      "name": "Curt_holder"
    },
    {
      "mesh": 17,
      "name": "Curt_holder_Material.006_0"
    },
    {
      "children": [
        38
      ],
      "matrix": [
        1.717987298965454,
        0.0,
        0.0,
        0.0,
        -0.0,
        -2.7989565793398917e-07,
        -1.7179872989654315,
        0.0,
        0.0,
        1.7179872989654315,
        -2.7989565793398917e-07,
        0.0,
        -152.39617919921875,
        257.3465270996094,
        -85.60560607910156,
        1.0
      ],
      "name": "Curt_holder.001"
    },
    {
      "mesh": 18,
      "name": "Curt_holder.001_Material.006_0"
    },
    {
      "children": [
        40
      ],
      "matrix": [
        3.713536262512207,
        0.0,
        0.0,
        0.0,
        -0.0,
        -6.050118508346912e-07,
        -3.713536262512158,
        0.0,
        0.0,
        3.713536262512158,
        -6.050118508346912e-07,
        0.0,
        -143.38348388671875,
        263.92486572265625,
        -10.451749801635742,
        1.0
      ],
      "name": "curt_rod"
    },
    {
      "mesh": 19,
      "name": "curt_rod_Material.006_0"
    },
    {
      "children": [
        42,
        43,
        45,
        47,
        49,
        51,
        53,
        55
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        -0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        -135.75888061523438,
        198.29486083984375,
        33.570091247558594,
        1.0
      ],
      "name": "curt"
    },
    {
      "mesh": 20,
      "name": "curt_Material.004_0"
    },
    {
      "children": [
        44
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        0.1865370124578476,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus"
    },
    {
      "mesh": 21,
      "name": "Torus__0"
    },
    {
      "children": [
        46
      ],
      "matrix": [
        0.7112687394309527,
        0.43907339663693934,
        -2.1527114456891684e-08,
        0.0,
        -6.717275722065492e-08,
        1.4979700344006666e-07,
        0.8358759284019309,
        0.0,
        0.43907339663693473,
        -0.7112687394309374,
        1.6275106363831195e-07,
        0.0,
        -0.07624614238739014,
        0.13121069967746735,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.001"
    },
    {
      "mesh": 22,
      "name": "Torus.001__0"
    },
    {
      "children": [
        48
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        0.058391690254211426,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.002"
    },
    {
      "mesh": 23,
      "name": "Torus.002__0"
    },
    {
      "children": [
        50
      ],
      "matrix": [
        0.7112687394309527,
        0.43907339663693934,
        -2.1527114456891684e-08,
        0.0,
        -6.717275722065492e-08,
        1.4979700344006666e-07,
        0.8358759284019309,
        0.0,
        0.43907339663693473,
        -0.7112687394309374,
        1.6275106363831195e-07,
        0.0,
        -0.07624614238739014,
        0.003065347671508789,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.003"
    },
    {
      "mesh": 24,
      "name": "Torus.003__0"
    },
    {
      "children": [
        52
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        -0.0731925368309021,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.004"
    },
    {
      "mesh": 25,
      "name": "Torus.004__0"
    },
    {
      "children": [
        54
      ],
      "matrix": [
        0.7112687394309527,
        0.43907339663693934,
        -2.1527114456891684e-08,
        0.0,
        -6.717275722065492e-08,
        1.4979700344006666e-07,
        0.8358759284019309,
        0.0,
        0.43907339663693473,
        -0.7112687394309374,
        1.6275106363831195e-07,
        0.0,
        -0.07624614238739014,
        -0.12851887941360474,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.005"
    },
    {
      "mesh": 26,
      "name": "Torus.005__0"
    },
    {
      "children": [
        56
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        -0.1956055760383606,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.006"
    },
    {
      "mesh": 27,
      "name": "Torus.006__0"
    },
    {
      "children": [
        58,
        59,
        61,
        63,
        65,
        67,
        69,
        71
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        -0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        -135.75888061523438,
        198.29486083984375,
        -61.493865966796875,
        1.0
      ],
      "name": "curt.001"
    },
    {
      "mesh": 28,
      "name": "curt.001_Material.004_0"
    },
    {
      "children": [
        60
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        0.1865370273590088,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.007"
    },
    {
      "mesh": 29,
      "name": "Torus.007__0"
    },
    {
      "children": [
        62
      ],
      "matrix": [
        0.7112687394309527,
        0.43907339663693934,
        -2.1527114456891684e-08,
        0.0,
        -6.717275722065492e-08,
        1.4979700344006666e-07,
        0.8358759284019309,
        0.0,
        0.43907339663693473,
        -0.7112687394309374,
        1.6275106363831195e-07,
        0.0,
        -0.07624614238739014,
        0.13121068477630615,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.008"
    },
    {
      "mesh": 30,
      "name": "Torus.008__0"
    },
    {
      "children": [
        64
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        0.058391690254211426,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.009"
    },
    {
      "mesh": 31,
      "name": "Torus.009__0"
    },
    {
      "children": [
        66
      ],
      "matrix": [
        0.7112687394309527,
        0.43907339663693934,
        -2.1527114456891684e-08,
        0.0,
        -6.717275722065492e-08,
        1.4979700344006666e-07,
        0.8358759284019309,
        0.0,
        0.43907339663693473,
        -0.7112687394309374,
        1.6275106363831195e-07,
        0.0,
        -0.07624614238739014,
        0.003065347671508789,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.010"
    },
    {
      "mesh": 32,
      "name": "Torus.010__0"
    },
    {
      "children": [
        68
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        -0.0731925368309021,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.011"
    },
    {
      "mesh": 33,
      "name": "Torus.011__0"
    },
    {
      "children": [
        70
      ],
      "matrix": [
        0.7112687394309527,
        0.43907339663693934,
        -2.1527114456891684e-08,
        0.0,
        -6.717275722065492e-08,
        1.4979700344006666e-07,
        0.8358759284019309,
        0.0,
        0.43907339663693473,
        -0.7112687394309374,
        1.6275106363831195e-07,
        0.0,
        -0.07624614238739014,
        -0.12851887941360474,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.012"
    },
    {
      "mesh": 34,
      "name": "Torus.012__0"
    },
    {
      "children": [
        72
      ],
      "matrix": [
        0.7285598261085093,
        -0.4097427820749928,
        1.8663705625995878e-08,
        0.0,
        1.4667202072117335e-08,
        6.415360466047447e-08,
        0.8358759284019445,
        0.0,
        -0.40974278207499304,
        -0.7285598261085069,
        6.310687682666682e-08,
        0.0,
        -0.07624614238739014,
        -0.1956055760383606,
        0.6562999486923218,
        1.0
      ],
      "name": "Torus.013"
    },
    {
      "mesh": 35,
      "name": "Torus.013__0"
    },
    {
      "children": [
        74,
        75
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        99.9999999999999,
        4.371138828673792e-06,
        0.0,
        0.0,
        -4.371138828673792e-06,
        99.9999999999999,
        0.0,
        -100.75709533691406,
        259.7582702636719,
        -152.37548828125,
        1.0
      ],
      "name": "lamp"
    },
    {
      "mesh": 36,
      "name": "lamp_Material.005_0"
    },
    {
      "children": [
        76
      ],
      "matrix": [
        0.1450798213481903,
        0.0,
        0.0,
        0.0,
        -0.0,
        -2.3636503060092692e-08,
        -0.1450798213481884,
        0.0,
        0.0,
        0.1450798213481884,
        -2.3636503060092692e-08,
        0.0,
        -1.1920928955078125e-07,
        -0.32052165269851685,
        0.22315824031829834,
        1.0
      ],
      "name": "Sphere"
    },
    {
      "mesh": 37,
      "name": "Sphere_Material.032_0"
    },
    {
      "children": [
        78,
        79,
        81,
        83,
        85,
        87,
        89,
        91,
        93,
        95
      ],
      "matrix": [
        -4.371139006309477e-06,
        -99.99999999999991,
        -1.1102230246251565e-14,
        0.0,
        -4.371139011860592e-06,
        1.9984014443252818e-13,
        -99.99999999999991,
        0.0,
        99.99999999999982,
        -4.371139011860592e-06,
        -4.371139006309477e-06,
        0.0,
        -152.39918518066406,
        225.21409606933594,
        99.13987731933594,
        1.0
      ],
      "name": "Cylinder"
    },
    {
      "mesh": 38,
      "name": "Cylinder_Material.001_0"
    },
    {
      "children": [
        80
      ],
      "matrix": [
        7.549789959870878e-08,
        -8.758115402030107e-47,
        0.9999999999999971,
        0.0,
        1.5777218104420184e-30,
        1.0,
        -1.1911468283944495e-37,
        0.0,
        -0.9999999999999971,
        1.577721810442023e-30,
        7.549789959870878e-08,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Clock"
    },
    {
      "mesh": 39,
      "name": "Clock_Material.006_0"
    },
    {
      "children": [
        82
      ],
      "matrix": [
        7.549789948768648e-08,
        0.0,
        0.9999999999999971,
        0.0,
        0.7557723668888794,
        0.6548344290331548,
        -5.705922628829185e-08,
        0.0,
        -0.6548344290331529,
        0.7557723668888816,
        4.943862386141973e-08,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.001"
    },
    {
      "mesh": 40,
      "name": "Cube.001_Material.006_0"
    },
    {
      "children": [
        84
      ],
      "matrix": [
        3.139164788112936e-07,
        5.551115123125783e-17,
        0.9999999999999507,
        0.0,
        0.9996339653654167,
        0.02705430257305763,
        -3.1380157439198086e-07,
        0.0,
        -0.027054302573056244,
        0.9996339653654659,
        8.492791359060448e-09,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.002"
    },
    {
      "mesh": 41,
      "name": "Cube.002_Material.006_0"
    },
    {
      "children": [
        86
      ],
      "matrix": [
        7.549789959870878e-08,
        0.0,
        0.999999999999997,
        0.0,
        0.7111568649091357,
        -0.7030333658458936,
        -5.369084948858571e-08,
        0.0,
        0.7030333658458917,
        0.7111568649091378,
        -5.3077542361279484e-08,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.003"
    },
    {
      "mesh": 42,
      "name": "Cube.003_Material.006_0"
    },
    {
      "children": [
        88
      ],
      "matrix": [
        7.549789959870878e-08,
        0.0,
        0.9999999999999971,
        0.0,
        0.02172004434348767,
        -0.9997640920105688,
        -1.639817727785986e-09,
        0.0,
        0.9997640920105659,
        0.021720044343487732,
        -7.548008906788084e-08,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.004"
    },
    {
      "mesh": 43,
      "name": "Cube.004_Material.006_0"
    },
    {
      "children": [
        90
      ],
      "matrix": [
        7.549789948768648e-08,
        0.0,
        0.9999999999999972,
        0.0,
        -0.6347440905851393,
        -0.7727224207095602,
        4.792184565838298e-08,
        0.0,
        0.7727224207095579,
        -0.6347440905851411,
        -5.833891991713358e-08,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.006"
    },
    {
      "mesh": 44,
      "name": "Cube.006_Material.006_0"
    },
    {
      "children": [
        92
      ],
      "matrix": [
        7.549789937666418e-08,
        -5.551115123125783e-17,
        0.9999999999999973,
        0.0,
        -0.9996451036260294,
        -0.026639572002932876,
        7.547110564276593e-08,
        0.0,
        0.0266395720029326,
        -0.9996451036260323,
        -2.0112320697762698e-09,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.007"
    },
    {
      "mesh": 45,
      "name": "Cube.007_Material.006_0"
    },
    {
      "children": [
        94
      ],
      "matrix": [
        1.9470718859437852e-07,
        5.551115123125783e-17,
        0.9999999999999811,
        0.0,
        -0.7692581606826434,
        0.6389380895072181,
        1.4978009377220047e-07,
        0.0,
        -0.6389380895072061,
        -0.7692581606826581,
        1.2440583918582604e-07,
        0.0,
        6.781640138342482e-08,
        -1.1102230246251565e-16,
        -0.027466535568237305,
        1.0
      ],
      "name": "Cube.008"
    },
    {
      "mesh": 46,
      "name": "Cube.008_Material.006_0"
    },
    {
      "children": [
        96
      ],
      "matrix": [
        2.4158389252702394e-09,
        2.1360140201349637e-19,
        0.007695801556110003,
        0.0,
        -0.03040485676317379,
        0.06721954281263683,
        9.54458556833335e-09,
        0.0,
        -0.014481006150673768,
        -0.006550073079567953,
        4.545826459016912e-09,
        0.0,
        6.580924605259497e-08,
        -1.1102230246251565e-16,
        0.018451690673828125,
        1.0
      ],
      "name": "Cube.005"
    },
    {
      "mesh": 47,
      "name": "Cube.005_Material.006_0"
    },
    {
      "children": [
        98
      ],
      "matrix": [
        54.69409942626953,
        0.0,
        0.0,
        0.0,
        0.0,
        2.391559497115273e-06,
        -31.67716598510733,
        0.0,
        0.0,
        31.67716598510733,
        2.391559497115273e-06,
        0.0,
        47.28779983520508,
        74.62361145019531,
        -0.12624114751815796,
        1.0
      ],
      "name": "table"
    },
    {
      "mesh": 48,
      "name": "table_Material.006_0"
    },
    {
      "children": [
        100,
        101,
        102
      ],
      "matrix": [
        4.602879047393799,
        0.0,
        0.0,
        0.0,
        0.0,
        -7.499041815598235e-07,
        -4.602879047393738,
        0.0,
        0.0,
        4.602879047393738,
        -7.499041815598235e-07,
        0.0,
        24.28852081298828,
        81.070556640625,
        -13.953462600708008,
        1.0
      ],
      "name": "Circle"
    },
    {
      "mesh": 49,
      "name": "Circle_Material_0"
    },
    {
      "mesh": 50,
      "name": "Circle_Material.023_0"
    },
    {
      "children": [
        103
      ],
      "matrix": [
        0.9999998807907104,
        0.0,
        0.0,
        0.0,
        0.0,
        0.9999998807907104,
        -2.646977960169688e-23,
        0.0,
        0.0,
        2.646977960169688e-23,
        0.9999998807907104,
        0.0,
        -1.430511474609375e-06,
        -2.384185791015625e-07,
        -1.9073486328125e-06,
        1.0
      ],
      "name": "cup"
    },
    {
      "mesh": 51,
      "name": "cup_Material_0"
    },
    {
      "children": [
        105
      ],
      "matrix": [
        3.9993886947631836,
        0.0,
        0.0,
        0.0,
        0.0,
        -6.515831233028277e-07,
        -3.9993886947631307,
        0.0,
        0.0,
        3.9993886947631307,
        -6.515831233028277e-07,
        0.0,
        24.090465545654297,
        81.070556640625,
        -14.5112886428833,
        1.0
      ],
      "name": "Circle.001"
    },
    {
      "mesh": 52,
      "name": "Circle.001_Material_0"
    },
    {
      "children": [
        107
      ],
      "matrix": [
        3.3009822368621826,
        0.0,
        0.0,
        0.0,
        0.0,
        -5.377982686899541e-07,
        -3.300982236862139,
        0.0,
        0.0,
        3.300982236862139,
        -5.377982686899541e-07,
        0.0,
        41.96647644042969,
        81.070556640625,
        -12.633169174194336,
        1.0
      ],
      "name": "Circle.002"
    },
    {
      "mesh": 53,
      "name": "Circle.002_Material_0"
    },
    {
      "children": [
        109,
        110
      ],
      "matrix": [
        35.44499330691327,
        0.21018092433667546,
        0.060012030922036726,
        0.0,
        0.05706136184530883,
        0.49678615660324843,
        -35.442136011794815,
        0.0,
        -0.21100110211545775,
        35.4415625421971,
        0.4964384094474107,
        0.0,
        42.07103729248047,
        82.69184875488281,
        -12.587310791015625,
        1.0
      ],
      "name": "Donut"
    },
    {
      "mesh": 54,
      "name": "Donut_Material.031_0"
    },
    {
      "children": [
        111
      ],
      "matrix": [
        0.9999999403953552,
        1.1641532876582872e-10,
        -6.984920014855721e-10,
        0.0,
        -1.1641532909108945e-10,
        0.9999999403953552,
        -4.656613150633149e-10,
        0.0,
        6.98492001431362e-10,
        4.6566131514463e-10,
        0.9999999403953552,
        0.0,
        -2.384185791015625e-07,
        -2.9802322387695313e-08,
        0.009282677434384823,
        1.0
      ],
      "name": "Torus.015"
    },
    {
      "mesh": 55,
      "name": "Torus.015_Material.030_0"
    },
    {
      "children": [
        113,
        114,
        116,
        118,
        120,
        122,
        124
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        -0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        -112.6527099609375,
        119.42473602294922,
        -103.50212097167969,
        1.0
      ],
      "name": "Cylinder.001"
    },
    {
      "mesh": 56,
      "name": "Cylinder.001_Material.006_0"
    },
    {
      "children": [
        115
      ],
      "matrix": [
        0.8710505962371826,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8710505962371826,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8710505962371826,
        0.0,
        0.0,
        0.0,
        -0.04641151428222656,
        1.0
      ],
      "name": "Cylinder.002"
    },
    {
      "mesh": 57,
      "name": "Cylinder.002_Material.006_0"
    },
    {
      "children": [
        117
      ],
      "matrix": [
        0.015821319318364325,
        0.009257464441004877,
        0.0,
        0.0,
        -0.009257464441004877,
        0.015821319318364325,
        0.0,
        0.0,
        0.0,
        0.0,
        0.018330706283450127,
        0.0,
        0.09975910186767578,
        -0.07553088665008545,
        -0.0983278751373291,
        1.0
      ],
      "name": "mini_table"
    },
    {
      "mesh": 58,
      "name": "mini_table_Material.006_0"
    },
    {
      "children": [
        119
      ],
      "matrix": [
        -0.010506252384105508,
        0.015021100282322708,
        0.0,
        0.0,
        -0.015021100282322708,
        -0.010506252384105508,
        4.135903062765139e-25,
        0.0,
        3.3891664458041673e-25,
        2.370494662981802e-25,
        0.018330706283450127,
        0.0,
        0.10132527351379395,
        0.0766599178314209,
        -0.0983278751373291,
        1.0
      ],
      "name": "Cube.011"
    },
    {
      "mesh": 59,
      "name": "Cube.011_Material.006_0"
    },
    {
      "children": [
        121
      ],
      "matrix": [
        -0.01427892175411361,
        -0.011494659037571282,
        4.1359030627651375e-25,
        0.0,
        0.011494659037571282,
        -0.01427892175411361,
        2.693455210347279e-41,
        0.0,
        3.2217108987852326e-25,
        2.593505933912335e-25,
        0.018330706283450127,
        0.0,
        -0.07055985927581787,
        0.10604143142700195,
        -0.0983278751373291,
        1.0
      ],
      "name": "Cube.012"
    },
    {
      "mesh": 60,
      "name": "Cube.012_Material.006_0"
    },
    {
      "children": [
        123
      ],
      "matrix": [
        0.014307609306047832,
        -0.01145893139850359,
        -5.386910420694558e-41,
        0.0,
        0.01145893139850359,
        0.014307609306047832,
        -8.271806125530279e-25,
        0.0,
        5.170889624681337e-25,
        6.456367172622941e-25,
        0.018330706283450127,
        0.0,
        -0.09935867786407471,
        -0.08215928077697754,
        -0.0983278751373291,
        1.0
      ],
      "name": "Cube.013"
    },
    {
      "mesh": 61,
      "name": "Cube.013_Material.006_0"
    },
    {
      "children": [
        125
      ],
      "matrix": [
        0.8710505962371826,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8710505962371826,
        0.0,
        0.0,
        0.0,
        0.0,
        0.5622124671936035,
        0.0,
        0.0,
        0.0,
        -0.4944562315940857,
        1.0
      ],
      "name": "Cylinder.003"
    },
    {
      "mesh": 62,
      "name": "Cylinder.003_Material.006_0"
    },
    {
      "children": [
        127,
        128
      ],
      "matrix": [
        100.0,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.629206793918314e-05,
        -99.99999999999868,
        0.0,
        0.0,
        99.99999999999868,
        -1.629206793918314e-05,
        0.0,
        0.0,
        4.13158655166626,
        0.0,
        1.0
      ],
      "name": "pot"
    },
    {
      "mesh": 63,
      "name": "pot_Material.002_0"
    },
    {
      "children": [
        129
      ],
      "matrix": [
        1.2830300331115723,
        0.0,
        0.0,
        0.0,
        0.0,
        1.2830300331115723,
        -2.6469779601696877e-23,
        0.0,
        0.0,
        2.6469779601696877e-23,
        1.2830300331115723,
        0.0,
        0.3162015676498413,
        -0.2903026342391968,
        -0.37919509410858154,
        1.0
      ],
      "name": "Cube.019"
    },
    {
      "mesh": 64,
      "name": "Cube.019_Material.017_0"
    }
  ],
  "scene": 0,
  "scenes": [
    {
      "name": "Sketchfab_Scene",
      "nodes": [
        0
      ]
    }
  ]
}



================================================
File: src/App.js
================================================
import React from 'react';
import LandingPage from './components/Landing-Page/landing';
import { Auth0Provider, useAuth0 } from '@auth0/auth0-react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import MainPage from './components/MainPage/MainPage.js';
import Floorplan2d from './components/Floorplan/Floorplan2d.js';
import FloorPlan3d from './components/Floorplan/Floorplan3d.js';
import RoomQuiz from './components/RoomQuiz/RoomQuiz.js';
import CryptoJS from "crypto-js";
import Chatbot from './components/ChatBot/Chatbot.js';
import FurnitureGrid from './components/Floorplan/FurnitureGrid.js';
import { useEffect, useState } from 'react';

function App() {
  const domain = process.env.REACT_APP_AUTH0_DOMAIN;
  const clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;

  const { user, isLoading } = useAuth0();

  const generateUniqueId = (email, length = 20) => {
    // Generate a SHA-256 hash of the email
    const hash = CryptoJS.SHA256(email).toString();
    // Return the first `length` characters of the hash
    return hash.substring(0, length);
  };

  // Generate user_id only if user is authenticated
  const userId = user ? generateUniqueId(user.email, 18) : "12345";

  const [furnitureItems, setFurnitureItems] = useState([]);

  useEffect(() => {
      fetch('http://localhost:5000/products')
        .then(response => response.json())
        .then(data => {
          setFurnitureItems(data);
        })
        .catch(error => {
          console.error('Error fetching products:', error);
        });
    }, []);

  return (
    <Router>
      <Auth0Provider
        domain={domain}
        clientId={clientId}
        authorizationParams={{
          redirect_uri: `http://localhost:3000/main-page`,
        }}
      >
        <div className="App">
          <Routes>
            <Route path="/" element={<LandingPage />} />
            <Route path="/main-page" element={<MainPage />} />
            <Route path="/:user_id/main-page" element={<MainPage />} />
            <Route path="/:user_id/:room_id/floorplan2d" element={<Floorplan2d/>} />
            <Route path="/:user_id/:room_id/floorplan3d" element={<FloorPlan3d />} />
            <Route path="/:user_id/budget-estimator" element={<RoomQuiz />} />
            <Route path ='/products' element={<FurnitureGrid products={furnitureItems}/>}/>
          </Routes>
          <Chatbot/>
        </div>
      </Auth0Provider>
    </Router>
  );
}

export default App;


================================================
File: src/App.test.js
================================================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});



================================================
File: src/index.css
================================================


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



================================================
File: src/index.js
================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();



================================================
File: src/reportWebVitals.js
================================================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;



================================================
File: src/setupTests.js
================================================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';



================================================
File: src/components/ChatBot/Chatbot.js
================================================
import React, { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";
import { MessageSquareText } from "lucide-react";

function Chatbot() {
  const [message, setMessage] = useState("");
  const [chatLog, setChatLog] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [chatLog, isLoading]);

  useEffect(() => {
    if (isOpen && chatLog.length === 0) {
      setChatLog([{ user: "bot", message: "Welcome, How May I Assist You!" }]);
    }
  }, [isOpen, chatLog.length]);

  const sendMessage = async () => {
    if (!message.trim()) return;
    const newChatLog = [...chatLog, { user: "me", message }];
    setChatLog(newChatLog);
    setMessage("");
    setIsLoading(true);

    try {
      const response = await fetch("http://localhost:5001/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message }),
      });
      const data = await response.json();
      setChatLog([...newChatLog, { user: "bot", message: data.response }]);
    } catch (error) {
      console.error(error);
      setChatLog([
        ...newChatLog,
        { user: "bot", message: "Sorry, something went wrong!" },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div
      style={{
        position: "fixed",
        bottom: "20px",
        right: "20px",
        zIndex: 1000,
        fontFamily:
          "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
      }}
    >
      {isOpen ? (
        <div
          style={{
            width: "380px",
            height: "500px",
            backgroundColor: "#F5F5F5",
            borderRadius: "20px",
            boxShadow: "0 15px 50px rgba(139, 69, 19, 0.2)",
            display: "flex",
            flexDirection: "column",
            overflow: "hidden",
            border: "1px solid rgba(139, 69, 19, 0.1)",
            transition: "all 0.3s ease",
          }}
        >
          <div
            style={{
              padding: "15px 20px",
              background: "linear-gradient(135deg, #8B4513 0%, #A0522D 100%)",
              color: "#fff",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              boxShadow: "0 4px 10px rgba(0,0,0,0.1)",
            }}
          >
            <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
              <div
                style={{
                  width: "10px",
                  height: "10px",
                  borderRadius: "50%",
                  backgroundColor: "#D2691E",
                  boxShadow: "0 0 5px rgba(255,255,255,0.5)",
                }}
              />
              <strong
                style={{
                  fontFamily: "'Playfair Display', serif",
                  fontSize: "18px",
                  letterSpacing: "0.7px",
                  fontWeight: "600",
                  textShadow: "1px 1px 2px rgba(0,0,0,0.2)",
                }}
              >
                Lumi
              </strong>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              style={{
                background: "none",
                border: "none",
                color: "#fff",
                cursor: "pointer",
                fontSize: "24px",
                padding: "5px",
                lineHeight: "1",
                transition: "transform 0.2s ease, color 0.2s ease",
                transformOrigin: "center",
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = "rotate(90deg)";
                e.currentTarget.style.color = "#FFD700";
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = "rotate(0deg)";
                e.currentTarget.style.color = "#fff";
              }}
            >
              Ã—
            </button>
          </div>

          <div
            style={{
              flex: 1,
              padding: "20px",
              overflowY: "auto",
              background:
                "linear-gradient(to bottom, #FDF5E6 0%, #F5DEB3 100%)",
              display: "flex",
              flexDirection: "column",
              gap: "15px",
              scrollBehavior: "smooth",
            }}
          >
            {chatLog.map((msg, index) => (
              <div
                key={index}
                style={{
                  display: "flex",
                  justifyContent: msg.user === "me" ? "flex-end" : "flex-start",
                  perspective: "1000px",
                }}
              >
                <div
                  style={{
                    maxWidth: "75%",
                    padding: "12px 16px",
                    borderRadius: "18px",
                    backgroundColor: msg.user === "me" ? "#8B4513" : "#FFFFFF",
                    color: msg.user === "me" ? "#fff" : "#8B4513",
                    boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
                    fontSize: "15px",
                    lineHeight: "1.6",
                    letterSpacing: "0.3px",
                    fontWeight: "400",
                    transformStyle: "preserve-3d",
                    transform: "translateZ(10px)",
                    transition: "transform 0.3s ease",
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.transform =
                      "translateZ(20px) scale(1.02)";
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.transform =
                      "translateZ(10px) scale(1)";
                  }}
                >
                  {msg.user === "bot" ? (
                    <ReactMarkdown>{msg.message}</ReactMarkdown>
                  ) : (
                    msg.message
                  )}
                </div>
              </div>
            ))}
            {isLoading && (
              <div
                style={{
                  display: "flex",
                  justifyContent: "flex-start",
                  gap: "6px",
                  padding: "10px",
                }}
              >
                {[1, 2, 3].map((dot) => (
                  <div
                    key={dot}
                    style={{
                      width: "10px",
                      height: "10px",
                      borderRadius: "50%",
                      backgroundColor: "#8B4513",
                      animation: `pulse 1s infinite ${dot * 0.2}s`,
                    }}
                  />
                ))}
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <div
            style={{
              padding: "15px 20px",
              borderTop: "1px solid rgba(139, 69, 19, 0.1)",
              background: "linear-gradient(to right, #F4A460, #D2691E)",
              boxShadow: "0 -4px 10px rgba(0,0,0,0.05)",
            }}
          >
            <div style={{ display: "flex", gap: "10px" }}>
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && sendMessage()}
                style={{
                  flex: 1,
                  padding: "10px 15px",
                  borderRadius: "25px",
                  border: "2px solid #D2B48C",
                  outline: "none",
                  transition: "all 0.3s ease",
                  fontSize: "15px",
                  boxShadow: "inset 0 2px 4px rgba(0,0,0,0.05)",
                }}
                onFocus={(e) => {
                  e.target.style.borderColor = "#8B4513";
                  e.target.style.boxShadow =
                    "inset 0 2px 4px rgba(139, 69, 19, 0.1), 0 0 10px rgba(139, 69, 19, 0.1)";
                }}
                onBlur={(e) => {
                  e.target.style.borderColor = "#D2B48C";
                  e.target.style.boxShadow = "inset 0 2px 4px rgba(0,0,0,0.05)";
                }}
                placeholder="Type a message..."
                disabled={isLoading}
              />
              <button
                onClick={sendMessage}
                disabled={isLoading}
                style={{
                  padding: "10px 20px",
                  borderRadius: "25px",
                  border: "none",
                  background:
                    "linear-gradient(135deg, #8B4513 0%, #A0522D 100%)",
                  color: "#fff",
                  cursor: "pointer",
                  transition: "all 0.3s ease",
                  fontSize: "15px",
                  fontWeight: "500",
                  boxShadow: "0 4px 10px rgba(139, 69, 19, 0.2)",
                }}
                onMouseOver={(e) => {
                  e.currentTarget.style.transform = "translateY(-3px)";
                  e.currentTarget.style.boxShadow =
                    "0 6px 12px rgba(139, 69, 19, 0.3)";
                }}
                onMouseOut={(e) => {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow =
                    "0 4px 10px rgba(139, 69, 19, 0.2)";
                }}
              >
                Send
              </button>
            </div>
          </div>
        </div>
      ) : (
        <button
          onClick={() => setIsOpen(true)}
          style={{
            width: "70px",
            height: "70px",
            borderRadius: "50%",
            background: "linear-gradient(135deg, #8B4513 0%, #A0522D 100%)",
            border: "3px solid rgba(255,255,255,0.2)",
            color: "#fff",
            cursor: "pointer",
            boxShadow: "0 8px 20px rgba(139, 69, 19, 0.3)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            transition: "all 0.3s ease",
            transform: "scale(1)",
          }}
          onMouseOver={(e) => {
            e.currentTarget.style.transform = "scale(1.1) rotate(5deg)";
            e.currentTarget.style.boxShadow =
              "0 12px 25px rgba(139, 69, 19, 0.4)";
          }}
          onMouseOut={(e) => {
            e.currentTarget.style.transform = "scale(1) rotate(0deg)";
            e.currentTarget.style.boxShadow =
              "0 8px 20px rgba(139, 69, 19, 0.3)";
          }}
        >
          <MessageSquareText size={32} strokeWidth={1.5} />
        </button>
      )}

      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Playfair+Display:wght@600&display=swap');

          @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.7; }
            50% { transform: scale(1.2); opacity: 1; }
          }

          ::-webkit-scrollbar {
            width: 8px;
          }
          ::-webkit-scrollbar-track {
            background: #F5DEB3;
            border-radius: 10px;
          }
          ::-webkit-scrollbar-thumb {
            background: #8B4513;
            border-radius: 10px;
          }
          ::-webkit-scrollbar-thumb:hover {
            background: #A0522D;
          }
        `}
      </style>
    </div>
  );
}

export default Chatbot;



================================================
File: src/components/ChatBot/server.js
================================================
const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config({ path: './.env' });

const app = express();
app.use(cors());
app.use(express.json());

const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;
const MODEL_NAME = 'gemini-1.5-flash'; // Replace with the correct model name if different

app.post('/api/chat', async (req, res) => {
    const { message } = req.body;
  
    try {
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/${MODEL_NAME}:generateContent?key=${GOOGLE_API_KEY}`,
        {
          contents: [
            {
              role: 'user',
              parts: [{ text: message }],
            },
          ],
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
  
      const botResponse = response.data.candidates[0].content.parts[0].text;
      res.json({
        response: botResponse.trim(),
      });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Something went wrong' });
    }
  });
const PORT = 5001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


================================================
File: src/components/Floorplan/Cart.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap');

.cart-container {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.cart-items {
    flex-grow: 1;
    overflow-y: auto;
}

.furniture-footer {
    background-color: #ede0d7;
    padding: 1rem;
    display: flex;
    gap: 1rem;
    align-items: center;
    border-bottom: 2px solid #DEB887;
    position: sticky;
    bottom: 0;
}

.priceh1 {
    font-family: 'Playfair Display', serif;
    color: #8B4513;
    font-size: 2rem;
    font-weight: bold;
    margin: 10px 0;
    width: 100%;
    padding-left: 10px;
    /* text-align: right; */
}
.price-container {
    display: flex;
    justify-content: center;
    /* align-items: center; */
    background-color: #ede0d7;
    border-top: 2px solid #DEB887;
    padding: 0.5rem 0;
    font-family: 'Playfair Display', serif;
    font-size: 1.5rem;
    color: #8B4513;
    border-radius: 10px;
}


================================================
File: src/components/Floorplan/Cart.js
================================================
import React from 'react';
import CartItem from './CartItems';
import { useState } from 'react';
import "./Cart.css"

const Cart = ({ items, handleCartItems, cartPrice, handleCartPrice }) => {
    const[price, SetPrice] = useState(0);
    
    return (
        <div className='cart-container' style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
            {/* Main content area */}
            <div className='container-fluid' style={{ flex: 1, padding: '20px' }}>
                <div className="row row-cols-1 row-cols-sm-2 g-4">
                    {items.map((element, index) => (
                        <div className="col" key={element.url || index}>
                            <div className="card shadow-sm h-100">
                                <CartItem 
                                    name={element.name} 
                                    mrp={element.price} 
                                    url={element.url} 
                                    image_url={element.image_url}
                                    handleCartItems={handleCartItems}
                                    handlePrice={SetPrice}
                                    cartPrice={cartPrice}
                                    handleCartPrice={handleCartPrice}
                                />
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            {/* Price bar at bottom */}
            <div className='price-container'>
                    <h2 className='priceh1'>
                        Price : {cartPrice}
                    </h2>
                </div>
            </div>
        
    );
};

export default Cart;


================================================
File: src/components/Floorplan/CartItems.js
================================================
import React from 'react';
import './FurnitureItem.css';
import { useState } from 'react';

const CartItem = ({ image_url, name, mrp, url, handleCartItems, cartPrice, handleCartPrice}) => {

  const removeFromCart = (image_url_) => {
    handleCartItems((prevItems) =>
      prevItems.filter((item) => item.image_url !== image_url_)
    );
    handleCartPrice((prevprice)=>prevprice-parseInt(mrp))
  };
  
  return (
    <div className="furniture-card">
       
      <div className="image-container">
        <img src={image_url} alt={name} />
      </div>
      
      <div className="content-container">
        <h3 className="product-name">{name}</h3>
        <p className="product-price">{`â‚¹ ${mrp}`}</p>
        
        <div className="button-container">
          <a 
            href={url}
            target="_blank"
            rel="noopener noreferrer"
            className="checkout-button"
          >
            Checkout
          </a>
          
          <button 
            className="cart-button"
            onClick={()=>{removeFromCart(image_url)}}
          >
            Remove From Cart
          </button>
        </div>
      </div>
    </div>
  );
};

export default CartItem;


================================================
File: src/components/Floorplan/Floorplan2d.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap');

.font-serif {
  font-family: 'Playfair Display', serif;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1e7d8;
}

::-webkit-scrollbar-thumb {
  background: #CD853F;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #8B4513;
}

/* Button and input focus states */
button:focus,
input:focus,
select:focus {
  outline: 2px solid #CD853F;
  outline-offset: 2px;
}

/* Smooth transitions */
button,
select,
input {
  transition: all 0.2s ease-in-out;
}

/* Canvas container */
.canvas-container {
  border: 2px solid #8B4513;
  border-radius: 8px;
  overflow: hidden;
  margin: 0 auto;
  width: calc(100% - 100px);
  background: white;
  margin-bottom: 80px;
}

/* Toolbar */
.toolbar {
  
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  background-color: #dbb193;
  border-bottom: 2px solid #8B4513;
}

.toolbar-left {
  display: flex;
  gap: 10px;
  align-items: center;
}

.toolbar-right {
  margin-left: auto;
}

/* Tool buttons */
.tool2d-button,
.tool2d-select {
  
  padding: 8px 16px;
  border: 1px solid #8B4513;
  border-radius: 10px;
  background-color: #EED9C4;
  color: #8B4513;
  cursor: pointer;
  font-size: 14px;
}

.tool2d-button.active {
  background-color: #8B4513;
  color: white;
}

.tool2d-button:hover {
  background-color: #CD853F;
  color: white;
}

/* Submit button */
.submit-button {
  padding: 8px 16px;
  border: 1px solid #8B4513;
  border-radius: 10px;
  background-color: #8B4513;
  color: white;
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.submit-button:hover {
  background-color: #CD853F;
}

.submit-icon {
  width: 18px;
  height: 18px;
}

/* Header Text */
.header-text {
  font-family: 'Playfair Display', serif;
  font-size: 24px;
  font-weight: 600;
  color: #8B4513;
  text-align: center;
  margin-top: 30px;
  margin-bottom: 40px;
}

/* Konva specific styles */
.konvajs-content {
  background: #ffffff;
}

.konvajs-content text {
  font-family: system-ui, -apple-system, sans-serif;
}

.logo-link {
  text-decoration: none; /* Removes underline */
  color: inherit; /* Uses the same color as parent (.logo) */
}


================================================
File: src/components/Floorplan/Floorplan2d.js
================================================
import React, { useState, useRef } from "react";
import { Stage, Layer, Line, Text } from "react-konva";
import { useNavigate, Link , useParams} from "react-router-dom";
import { Search, User, ArrowRightCircle } from "lucide-react";
import LogoutButton from "../Login-in/LogoutButton";
import Konva from "konva";
import "./Floorplan2d.css"
import Chatbot from "../ChatBot/Chatbot";

const GRID_SIZE = 20;
const WALL_THICKNESS = 3;

const FloorPlan = ({userId}) => {
  const {user_id, room_id} = useParams()
  const [walls, setWalls] = useState([]);
  const [isDrawing, setIsDrawing] = useState(false);
  const [tool, setTool] = useState("draw");
  const [unit, setUnit] = useState("feet");
  const stageRef = useRef();
  const navigate = useNavigate();

  const conversionFactor = unit === "feet" ? 1 : 0.3048;

  const createGrid = (width, height, gridSize) => {
    const gridLines = [];
    for (let i = 0; i <= width / gridSize; i++) {
      gridLines.push(
        <Line
          key={`v-${i}`}
          points={[i * gridSize, 0, i * gridSize, height]}
          stroke="#E6D5C3"
          strokeWidth={0.5}
          dash={[2, 4]}
        />
      );
    }
    for (let i = 0; i <= height / gridSize; i++) {
      gridLines.push(
        <Line
          key={`h-${i}`}
          points={[0, i * gridSize, width, i * gridSize]}
          stroke="#E6D5C3"
          strokeWidth={0.5}
          dash={[2, 4]}
        />
      );
    }
    return gridLines;
  };

  const snapToGrid = (x, y) => ({
    x: Math.round(x / GRID_SIZE) * GRID_SIZE,
    y: Math.round(y / GRID_SIZE) * GRID_SIZE,
  });

  const handleMouseDown = (e) => {
    if (tool !== "draw") return;
    const pos = e.target.getStage().getPointerPosition();
    const snapped = snapToGrid(pos.x, pos.y);
    setWalls([
      ...walls,
      { points: [snapped.x, snapped.y, snapped.x, snapped.y] },
    ]);
    setIsDrawing(true);
  };

  const handleMouseMove = (e) => {
    if (!isDrawing || tool !== "draw") return;
    const pos = e.target.getStage().getPointerPosition();
    const snapped = snapToGrid(pos.x, pos.y);
    const updatedWalls = [...walls];
    const currentWall = updatedWalls[updatedWalls.length - 1];
    currentWall.points[2] = snapped.x;
    currentWall.points[3] = snapped.y;
    setWalls(updatedWalls);
  };

  const handleMouseUp = () => {
    if (isDrawing && tool === "draw") {
      setIsDrawing(false);
    }
  };

  const handleWallClick = (index) => {
    if (tool === "delete") {
      const updatedWalls = walls.filter((_, i) => i !== index);
      setWalls(updatedWalls);
    }
  };

  const handleSave = () => {
    const stage = stageRef.current;

    // Find the grid layer and hide it before exporting
    const gridLayer = stage.findOne(".grid-layer");
    if (gridLayer) gridLayer.visible(false);

    // Create a temporary white rectangle as the background
    const backgroundLayer = new Konva.Rect({
      width: stage.width(),
      height: stage.height(),
      fill: "white",
    });
    stage.getLayers()[0].add(backgroundLayer);
    backgroundLayer.moveToBottom();

    // Create a temporary Konva Text node for "Decora"
    const decoraText = new Konva.Text({
      text: "Decora",
      fontSize: 25,
      fontFamily: "Playfair Display",
      fill: "#8B4513",
      x: stage.width() - 100,
      y: stage.height() - 30,
    });
    stage.getLayers()[0].add(decoraText);

    // Export the stage to an image
    const uri = stage.toDataURL({
      mimeType: "image/png",
      pixelRatio: 2,
    });

    // Cleanup: Remove temporary background and text node, and revert visibility of grid
    backgroundLayer.destroy();
    decoraText.destroy();
    if (gridLayer) gridLayer.visible(true);

    // Trigger the download
    const link = document.createElement("a");
    link.href = uri;
    link.download = "floorplan.png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="floorplan-container">
      <nav className="nav">
        <div className="nav-content">
          <div className="nav-left">
          <h1 className="logo">
    <a href="/main-page" className="logo-link">Decora</a>
</h1>
            <div className="nav-links">
              {/* <a href="/">Design</a> */}
              <a href="/products">Products</a>
              <Link to={`/${user_id}/budget-estimator`}>Budget Estimator</Link>
            </div>
          </div>
          <div className="nav-right">
            <div className="search-container">
              <input
                type="text"
                placeholder="Search"
                className="search-input"
              />
              <Search className="search-icon" />
            </div>
            <button className="profile-button">
              <User className="profile-icon" />
            </button>
            <LogoutButton />
          </div>
        </div>
      </nav>

      <div className="content">
        <h2 className="header-text">
          Draw the 2D Layout of your room in the grid below
        </h2>

        <div className="canvas-container">
          <div className="toolbar">
            <div className="toolbar-left">
              <button
                onClick={() => setTool("draw")}
                className={`tool2d-button ${tool === "draw" ? "active" : ""}`}
              >
                Draw Wall
              </button>
              <button
                onClick={() => setTool("delete")}
                className={`tool2d-button ${tool === "delete" ? "active" : ""}`}
              >
                Delete Wall
              </button>
              <select
                value={unit}
                onChange={(e) => setUnit(e.target.value)}
                className="tool2d-select"
              >
                <option value="feet">Feet</option>
                <option value="meters">Meters</option>
              </select>
              <button onClick={() => setWalls([])} className="tool2d-button">
                Clear All
              </button>
              <button onClick={handleSave} className="tool2d-button">
                Download
              </button>
            </div>
            <div className="toolbar-right">
              <button
                onClick={() =>
                  navigate(`/${user_id}/${room_id}/floorplan3d`, { state: { layout: walls } })
                }
                className="submit-button"
              >
                Furnish in 3D
                <ArrowRightCircle className="submit-icon" />
              </button>
            </div>
          </div>

          <Stage
            width={window.innerWidth - 100}
            height={600}
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
            ref={stageRef}
          >
            <Layer>
              {createGrid(window.innerWidth - 100, 600, GRID_SIZE)}
              {walls.map((wall, index) => (
                <React.Fragment key={index}>
                  <Line
                    points={wall.points}
                    stroke={tool === "delete" ? "#B22222" : "#8B4513"}
                    strokeWidth={WALL_THICKNESS}
                    onClick={() => handleWallClick(index)}
                  />
                  <Text
                    x={(wall.points[0] + wall.points[2]) / 2}
                    y={(wall.points[1] + wall.points[3]) / 2 - 15}
                    text={`${(
                      (Math.sqrt(
                        (wall.points[2] - wall.points[0]) ** 2 +
                          (wall.points[3] - wall.points[1]) ** 2
                      ) /
                        GRID_SIZE) *
                      conversionFactor
                    ).toFixed(1)} ${unit}`}
                    fontSize={12}
                    fill="#8B4513"
                  />
                </React.Fragment>
              ))}
            </Layer>
          </Stage>
        </div>
      </div>
    </div>
  );
};

export default FloorPlan;



================================================
File: src/components/Floorplan/Floorplan3d.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap');

.decora-container {
    min-height: 100vh;
    background-color: #f1e7d8;
    /* padding: 2rem; */
}

.main-content {
    display: flex;
    gap: 2rem;
    height: calc(100vh - 4rem);
    padding: 2rem;
}

.layout-container {
    flex: 1.5;
    background-color: #ffffff;
    border-radius: 1rem;
    overflow: hidden;
    border: 2px solid #DEB887;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0);
}

.threejs-container {
    position: relative;
    width: 100%;
    height: 100%;
}

.furniture-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    background-color: #ffffff;
    border-radius: 1rem;
    overflow: hidden;
    border: 2px solid #DEB887;
}

.furniture-header {
    background-color: #ede0d7;
    padding: 1rem;
    display: flex;
    gap: 1rem;
    align-items: center;
    border-bottom: 2px solid #DEB887;
}


.header-button {
    background: none;
    border: none;
    color: #8B4513;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    border-radius: 0.5rem;
}

.header-button:hover {
    background-color: #DEB887;
    color: #ffffff;
}

.header-button.active {
    background-color: #8B4513;
    color: #ffffff;
}

.furniture-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    padding: 1rem;
    overflow-y: auto;
    flex: 1;
}

.furniture-grid::-webkit-scrollbar {
    width: 8px;
}

.furniture-grid::-webkit-scrollbar-track {
    background: #ede0d7;
    border-radius: 4px;
}

.furniture-grid::-webkit-scrollbar-thumb {
    background: #DEB887;
    border-radius: 4px;
}

.furniture-card {
    background-color: #ede0d7;
    border-radius: 0.5rem;
    overflow: hidden;
    position: relative;
    transition: transform 0.3s ease;
}

.furniture-card:hover {
    transform: translateY(-5px);
}

.furniture-card img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.card-content {
    padding: 1rem;
}

.card-content h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
    color: #8B4513;
    font-family: 'Playfair Display', serif;
}

.price {
    font-weight: bold;
    color: #6B4423;
    margin: 0.5rem 0;
}

.furniture-card a {
    color: #8B4513;
    text-decoration: none;
    display: block;
    margin-top: 0.5rem;
    transition: color 0.3s ease;
}

.furniture-card a:hover {
    color: #CD853F;
}

.add-button {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 30px;
    height: 30px;
    background-color: #ffffff;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 1.5rem;
    line-height: 1;
    color: #8B4513;
    transition: all 0.3s ease;
}

.add-button:hover {
    background-color: #8B4513;
    color: #ffffff;
}

.mrp {
    text-decoration: line-through;
    color: #999;
    margin-right: 0.5rem;
}

.discounted-price {
    color: #8B4513;
}

.emi-options {
    font-size: 0.9rem;
    color: #666;
}

@media (max-width: 1200px) {
    .main-content {
        flex-direction: column;
        height: auto;
    }

    .layout-container {
        height: 50vh;
    }

    .furniture-section {
        height: 50vh;
    }
}

@media (max-width: 768px) {
    .decora-container {
        padding: 1rem;
    }

    .furniture-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 480px) {
    .furniture-grid {
        grid-template-columns: 1fr;
    }

    .furniture-header {
        gap: 0.5rem;
    }

    .header-button {
        padding: 0.5rem;
        font-size: 0.9rem;
    }
}


.threejs-container {
    position: relative;
    width: 100%;
    height: 100%;
}

.tool3d-button {
    position: absolute;
    bottom: 20px;
    right: 645px;
    padding: 8px 16px;
    border: 1px solid #8B4513;
    border-radius: 10px;
    background-color: #8B4513;
    color: white;
    cursor: pointer;
    font-size: 14px;
    z-index: 10;
    transition: all 0.3s ease;
}

@media (max-width: 768px) {
    .tool3d-button {
        right: 10px;
        bottom: 10px;
        font-size: 12px;
    }
}

@media (max-width: 480px) {
    .tool3d-button {
        right: 5px;
        padding: 6px 12px;
        font-size: 10px;
    }
}

.logo-link {
    text-decoration: none; /* Removes underline */
    color: inherit; /* Uses the same color as parent (.logo) */
}


================================================
File: src/components/Floorplan/Floorplan3d.js
================================================
import React, { useEffect, useRef, useState } from "react";
import { useLocation, useParams, Link } from "react-router-dom";
import * as THREE from "three";
import { OrbitControls } from "three-stdlib";
import "./Floorplan3d.css";
import FurnitureGrid from "./FurnitureGrid.js";
import ModelGrid from "./ModelGrid.js";
import PaintGrid from './PaintGrid.js';
import ModelRenderer from './ModelItem';
import Cart from './Cart.js';
import { Search, User } from "lucide-react";
import LogoutButton from "../Login-in/LogoutButton.js";

const FloorPlan3D = () => {
  const { user_id, room_id } = useParams();
  const mountRef = useRef(null);
  const location = useLocation();
  const [sceneObjects, setSceneObjects] = useState(null);
  const [furnitureItems, setFurnitureItems] = useState([]);
  const [activeTab, setActiveTab] = useState("MODELS");
  const controlsRef = useRef(null);
  const [selectedModel, setSelectedModel] = useState(null);
  const [floorplanBounds, setFloorplanBounds] = useState({
    minX: -Infinity,
    maxX: Infinity,
    minZ: -Infinity,
    maxZ: Infinity,
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedPaint, setSelectedPaint] = useState(null);
  const [isPaintMode, setIsPaintMode] = useState(false);
  const wallMeshesRef = useRef([]);
  const [cartItems, handleCartItems] = useState([]);
  const [cartPrice, SetCartPrice] = useState(0);
  const[FurnitureSearch, SetFurnitureSearch] = useState(false)

  const [FurnitureLoading, SetFurnitureLoading] = useState(false)

  // Handle paint selection
  const handlePaintSelect = (paint) => {
    console.log("Selected Paint:", paint);
    setSelectedPaint(paint);
    setIsPaintMode(true);
    mountRef.current.classList.add('painting');
  };

  useEffect(() => {
    const fetchProducts = async () => {
      SetFurnitureLoading(true)
      try {
        const response = await fetch('http://localhost:5002/products');
        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }
        const data = await response.json();
        setFurnitureItems(data);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally{
        SetFurnitureLoading(false)
      }
    };
  
    fetchProducts();
    console.log(furnitureItems)
  }, [FurnitureSearch]);
  // Function to capture a screenshot
  const captureScreenshot = (camera, renderer, scene) => {
    renderer.render(scene, camera); // Render the scene with the given camera
    return renderer.domElement.toDataURL('image/png'); // Capture the screenshot as a data URL
  };

  // Function to generate a collage from 4 screenshots
  const generateCollage = async (frontView, topView, leftView, rightView) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    // Set canvas dimensions (2x2 grid of screenshots)
    canvas.width = 800; // Adjust as needed
    canvas.height = 800; // Adjust as needed

    // Load each screenshot as an image
    const loadImage = (src) => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = src;
        img.onload = () => resolve(img);
        img.onerror = reject;
      });
    };

    const [frontImg, topImg, leftImg, rightImg] = await Promise.all([
      loadImage(frontView),
      loadImage(topView),
      loadImage(leftView),
      loadImage(rightView),
    ]);

    // Draw each screenshot onto the canvas
    ctx.drawImage(frontImg, 0, 0, 400, 400); // Top-left
    ctx.drawImage(topImg, 400, 0, 400, 400); // Top-right
    ctx.drawImage(leftImg, 0, 400, 400, 400); // Bottom-left
    ctx.drawImage(rightImg, 400, 400, 400, 400); // Bottom-right

    // Convert canvas to a data URL
    return canvas.toDataURL('image/png');
  };

  // Function to handle the download button click
  const handleDownload = async () => {
    if (!sceneObjects) return;

    const { scene, camera, renderer } = sceneObjects;

    // Save the original camera position and rotation
    const originalPosition = camera.position.clone();
    const originalRotation = camera.rotation.clone();

    // Capture front view
    camera.position.set(-500, 800, 1000); // Adjust for front view
    camera.lookAt(0, 0, 0);
    const frontView = captureScreenshot(camera, renderer, scene);

    // Capture top view
    camera.position.set(0, 1000, 0); // Adjust for top view
    camera.lookAt(0, 0, 0);
    const topView = captureScreenshot(camera, renderer, scene);

    // Capture left view
    camera.position.set(-1000, 800, 0); // Adjust for left view
    camera.lookAt(0, 0, 0);
    const leftView = captureScreenshot(camera, renderer, scene);

    // Capture right view
    camera.position.set(1000, 800, 0); // Adjust for right view
    camera.lookAt(0, 0, 0);
    const rightView = captureScreenshot(camera, renderer, scene);

    // Restore the original camera position and rotation
    camera.position.copy(originalPosition);
    camera.rotation.copy(originalRotation);
    renderer.render(scene, camera); // Re-render the original view

    // Generate the collage
    const collageDataUrl = await generateCollage(frontView, topView, leftView, rightView);

    // Trigger download
    const link = document.createElement('a');
    link.href = collageDataUrl;
    link.download = 'floorplan_collage.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Initialize Three.js scene
  useEffect(() => {
    const walls = location.state?.layout || [];
    if (!walls.length) {
      console.warn("No walls data received");
      return;
    }

    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf5f5f5);

    const camera = new THREE.PerspectiveCamera(
      45,
      mountRef.current.clientWidth / mountRef.current.clientHeight,
      1,
      10000
    );
    camera.position.set(-500, 800, 1000);
    camera.lookAt(0, 0, 0);

    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(
      mountRef.current.clientWidth,
      mountRef.current.clientHeight
    );
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.outputColorSpace = THREE.SRGBColorSpace;

    mountRef.current.appendChild(renderer.domElement);

    // Initialize floor
    const floorMaterial = new THREE.MeshStandardMaterial({
      color: 0xf0f0f0,
      roughness: 0.5,
      metalness: 0.1,
    });

    // Calculate floor dimensions
    let minX = Infinity,
      maxX = -Infinity,
      minY = Infinity,
      maxY = -Infinity;
    walls.forEach((wall) => {
      [wall.points[0], wall.points[2]].forEach((x) => {
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
      });
      [wall.points[1], wall.points[3]].forEach((y) => {
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      });
    });

    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;

    // Create walls
    const wallHeight = 250;
    const wallThickness = 10;
    const wallMeshes = [];

    walls.forEach((wall) => {
      const [x1, y1, x2, y2] = wall.points;
      const length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      const centerWallX = (x1 + x2) / 2 - centerX;
      const centerWallY = (y1 + y2) / 2 - centerY;

      const wallGeometry = new THREE.BoxGeometry(
        length,
        wallHeight,
        wallThickness
      );

      const wallMaterial = new THREE.MeshStandardMaterial({
        color: 0xffffff,
        roughness: 0.2,
        metalness: 0.1,
        transparent: true,
        opacity: 1,
        side: THREE.DoubleSide
      });

      const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
      wallMesh.position.set(centerWallX, wallHeight / 2, centerWallY);
      const angle = Math.atan2(y2 - y1, x2 - x1);
      wallMesh.rotation.y = -angle;

      scene.add(wallMesh);
      wallMeshes.push(wallMesh);
      wallMeshesRef.current.push(wallMesh);
    });

    // Handle wall painting
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    const handleWallClick = (event) => {
      if (!isPaintMode || !selectedPaint) {
        console.log("Paint mode is not active or no paint is selected.");
        return;
      }
    
      const rect = renderer.domElement.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
    
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(wallMeshesRef.current);
    
      if (intersects.length > 0) {
        const wallMesh = intersects[0].object;
        console.log("Wall clicked:", wallMesh);
        console.log("Selected paint color:", selectedPaint.color);
    
        // Dispose of the old material
        if (wallMesh.material) {
          console.log("Disposing old material:", wallMesh.material);
          wallMesh.material.dispose();
        }
    
        // Create a new material with the selected color
        const newMaterial = new THREE.MeshStandardMaterial({
          color: new THREE.Color(selectedPaint.color), // Ensure the color is valid
          roughness: 0.2,
          metalness: 0.1,
          side: THREE.DoubleSide,
        });
    
        // Apply the new material to the wall mesh
        wallMesh.material = newMaterial;
        wallMesh.material.needsUpdate = true; // Ensure the material is updated
        wallMesh.geometry.computeBoundingSphere(); // Recompute bounding sphere
    
        console.log("Wall material after update:", wallMesh.material);
    
        // Force a re-render of the scene
        renderer.render(scene, camera);
        console.log("Scene re-rendered with updated wall color.");
      } else {
        console.log("No wall was clicked.");
      }
    };

    renderer.domElement.addEventListener('click', handleWallClick);

    // Create floor
    const floorWidth = maxX - minX;
    const floorDepth = maxY - minY;
    const floorGeometry = new THREE.PlaneGeometry(floorWidth, floorDepth);
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    floor.position.set(0, 0, 0);
    scene.add(floor);

    // Set floorplan bounds
    setFloorplanBounds({
      minX: -floorWidth / 2,
      maxX: floorWidth / 2,
      minZ: -floorDepth / 2,
      maxZ: floorDepth / 2,
    });

    // Setup lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);

    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight1.position.set(500, 1000, 500);
    scene.add(directionalLight1);

    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.4);
    directionalLight2.position.set(-500, 1000, -500);
    scene.add(directionalLight2);

    // Setup controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.1;
    controls.screenSpacePanning = false;
    controls.maxPolarAngle = Math.PI;
    controls.minDistance = 500;
    controls.maxDistance = 3000;
    controls.target.set(0, wallHeight / 2, 0);
    controls.enabled = true; // Make sure it's enabled by default
    controls.enableRotate = true;
    controls.rotateSpeed = 0.5;
    controls.enableZoom = true;
    controls.enablePan = true;
    controls.panSpeed = 0.5;
    controlsRef.current = controls;

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    setSceneObjects({ scene, camera, renderer, floor });

    // Handle window resize
    const handleResize = () => {
      camera.aspect =
        mountRef.current.clientWidth / mountRef.current.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(
        mountRef.current.clientWidth,
        mountRef.current.clientHeight
      );
    };
    window.addEventListener("resize", handleResize);

    // Cleanup
    return () => {
      window.removeEventListener("resize", handleResize);
      mountRef.current?.removeChild(renderer.domElement);
      renderer.dispose();
      scene.traverse((object) => {
        if (object instanceof THREE.Mesh) {
          object.geometry.dispose();
          object.material.dispose();
        }
      });
      renderer.domElement.removeEventListener('click', handleWallClick);
    };
  }, [location, selectedPaint, isPaintMode]);

  return (
    <div className="decora-container">
      <nav className="nav">
        <div className="nav-content">
          <div className="nav-left">
          <h1 className="logo">
    <a href="/main-page" className="logo-link">Decora</a>
</h1>
            <div className="nav-links">
              {/* <a href="/">Design</a> */}
              <a href="/products">Products</a>
              <Link to={`/${user_id}/budget-estimator`}>Budget Estimator</Link>
            </div>
          </div>
          <div className="nav-right">
            <div className="search-container">
              <input
                type="text"
                placeholder="Search"
                className="search-input"
              />
              <Search className="search-icon" />
            </div>
            <button className="profile-button">
              <User className="profile-icon" />
            </button>
            <LogoutButton />
          </div>
        </div>
      </nav>
      <div className="main-content">
        <div className="layout-container">
          <div ref={mountRef} className="threejs-container" />
          <button className="tool3d-button" onClick={handleDownload}>Download</button>
          {sceneObjects && (
            <ModelRenderer
            scene={sceneObjects.scene}
            camera={sceneObjects.camera}
            renderer={sceneObjects.renderer}
            selectedModel={selectedModel}
            walls={location.state?.layout || []}
            floorBounds={floorplanBounds}
            onError={setError}
            onLoadingChange={setIsLoading}
            orbitControls={controlsRef.current}
            />
          )}
          {isLoading && <div className="loading-indicator">Loading...</div>}
          {error && <div className="error-message">{error}</div>}
        </div>

        <div className="furniture-section">
          <div className="furniture-header">
            <button
              className={`header-button ${activeTab === "MODELS" ? "active" : ""}`}
              onClick={() => setActiveTab("MODELS")}
            >
              MODELS
            </button>
            <button
              className={`header-button ${activeTab === "FURNITURE" ? "active" : ""}`}
              onClick={() => setActiveTab("FURNITURE")}
            >
              FURNITURE
            </button>
            {/* <button
              className={`header-button ${activeTab === "PAINT" ? "active" : ""}`}
              onClick={() => setActiveTab("PAINT")}
            >
              PAINT
            </button> */}
            <button
              className={`header-button ${activeTab === "CART" ? "active" : ""}`}
              onClick={() => setActiveTab("CART")}
            >
              CART
            </button>
          </div>

          <div className="furniture-grid">
            {activeTab === "FURNITURE" && <FurnitureGrid FurnitureLoading={FurnitureLoading} setFurnitureSearch={SetFurnitureSearch} products={furnitureItems} items={cartItems} handleCartItems={handleCartItems} cartPrice={cartPrice} handleCartPrice={SetCartPrice} />}
            {activeTab === "MODELS" && (
              <ModelGrid
                apiKey={process.env.REACT_APP_SKETCHFAB_API_KEY}
                onModelSelect={setSelectedModel}
              />
            )}
            {activeTab === 'PAINT' && <PaintGrid onPaintSelect={handlePaintSelect} />}
            {activeTab === "CART" && <Cart items={cartItems} handleCartItems={handleCartItems} cartPrice={cartPrice} handleCartPrice={SetCartPrice} />}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FloorPlan3D;


================================================
File: src/components/Floorplan/FurnitureGrid.js
================================================
import React, { useState } from 'react';
import FurnitureItem from './FurnitureItem';
import { ClipLoader } from 'react-spinners';

const FurnitureGrid = ({FurnitureLoading, setFurnitureSearch, products, items, handleCartItems, cartPrice, handleCartPrice }) => {
  const [searchQuery, setSearchQuery] = useState("");

  const handleSearch = async () => {
    if (!searchQuery) {
      alert("Please enter a search query");
      return;
    }
  
    try {
      const response = await fetch('http://localhost:5002/scrape', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ search_query: searchQuery }),
      });
  
      if (!response.ok) {
        throw new Error('Failed to scrape data');
      }
  
      const data = await response.json();
      console.log(data.message);

      setFurnitureSearch(prev=>!prev)
  
      // Optionally, you can add a success message or handle the response further
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div className='container-fluid'>
      <div className="search-bar">
        <input
          type="text"
          placeholder="Search for Furniture..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <button onClick={handleSearch}>
          Search
        </button>
      </div>
      {/* Show only the loading animation when FurnitureLoading is true */}
      {FurnitureLoading ? (
        <div className="loading-container">
          <ClipLoader color="#09f" size={50} />
          <p>Fetching furniture, please wait...</p>
        </div>
      ) : (
        <div className="row row-cols-1 row-cols-sm-2 g-4">
          {products.length > 0 ? (
            products.map((element, index) => (
              <div className="col" key={element.url || index}>
                <div className="card shadow-sm h-100">
                  <FurnitureItem
                    name={element.name}
                    mrp={element.price}
                    url={element.url}
                    image_url={element.image_url}
                    cart_items={items}
                    product={element}
                    handleCartItems={handleCartItems}
                    cartPrice={cartPrice}
                    handleCartPrice={handleCartPrice}
                  />
                </div>
              </div>
            ))
          ) : (
            <p>No furniture found.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default FurnitureGrid;


================================================
File: src/components/Floorplan/FurnitureItem.css
================================================
.furniture-card {
    width: 14rem;
    height: 27rem;
    margin: 0 0.5rem;
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: box-shadow 0.3s ease;
  }
  
  .furniture-card:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  .image-container {
    height: 200px;
    width: 100%;
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
  }
  
  .image-container img {
    height: 100%;
    width: 100%;
    object-fit: contain;
  }
  
  .content-container {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    height: calc(100% - 200px);
    justify-content: space-between;
  }
  
  .product-name {
    font-size: 1rem;
    font-weight: 500;
    min-height: 2.5rem;
    color: #333;
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .product-price {
    font-size: 1.125rem;
    font-weight: 700;
    color: #8B4513;
    margin: 0.75rem 0;
  }
  
  .button-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .checkout-button, .cart-button {
    width: 100%;
    padding: 0.5rem;
    border-radius: 0.25rem;
    text-align: center;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    cursor: pointer;
  }
  
  .checkout-button:hover {
    background-color: #723A0F;
  }
  
  .cart-button, .checkout-button {
    background-color: transparent;
    color: #8B4513;
    border: 2px solid #8B4513;
  }
  
  .cart-button:hover, .checkout-button:hover {
    background-color: #8B4513;
    color: white;
  }


================================================
File: src/components/Floorplan/FurnitureItem.js
================================================
import React from 'react';
import './FurnitureItem.css';

const FurnitureItem = ({ image_url, name, mrp, url, product, cart_items, handleCartItems, cartPrice, handleCartPrice}) => {

  const handleAddToCart = () =>{
    handleCartItems((prevItems => [...prevItems, product]))
    handleCartPrice((prevprice)=>prevprice+parseInt(mrp))
  }

  
  return (
    <div className="furniture-card">
      <div className="image-container">
        <img src={image_url} alt={name} />
      </div>
      
      <div className="content-container">
        <h3 className="product-name">{name}</h3>
        <p className="product-price">{`â‚¹ ${mrp}`}</p>

        <div className="button-container">
          <a 
            href={url}
            target="_blank"
            rel="noopener noreferrer"
            className="checkout-button"
          >
            Checkout
          </a>
          
          <button 
            className="cart-button"
            onClick={handleAddToCart}
          >
            Add to Cart
          </button>
        </div>
      </div>
    </div>
  );
};

export default FurnitureItem;


================================================
File: src/components/Floorplan/ModelGrid.css
================================================
.model-grid-container {
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%; /* Ensure it takes full width of its parent */
    background-color: #ffffff;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin: 0; /* Remove any margin that might restrict width */
    max-width: none; /* Ensure no max-width is restricting it */
  }
  
  .search-bar {
    display: flex;
    margin-bottom: 1.5rem;
  }
  
  .search-bar input {
    flex-grow: 1;
    padding: 0.75rem;
    font-size: 1rem;
    border-radius: 8px;
    border: 1px solid #d7bb91;
    margin-right: 0.75rem;
    outline: none;
    transition: border-color 0.3s ease;
  }
  
  .search-bar input:focus {
    border-color: #b89a6f;
  }
  
  .search-bar button {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    background-color: #8B4513;
    color: #ffffff;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .search-bar button:hover {
    background-color: #b89a6f;
  }
  
  .model-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    flex-grow: 1;
  }
  
  .model-card {
    cursor: pointer;
    border: 1px solid #d7bb91;
    border-radius: 12px;
    overflow: hidden;
    text-align: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .model-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  }
  
  .model-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  
  .model-card div {
    padding: 1rem;
    font-size: 1rem;
    color: #333333;
    background-color: #f9f9f9;
  }


================================================
File: src/components/Floorplan/ModelGrid.js
================================================
import React, { useState, useEffect } from "react";
import './ModelGrid.css'

const ModelGrid = ({ apiKey, onModelSelect }) => {
  const [models, setModels] = useState([]);
  const [searchQuery, setSearchQuery] = useState(""); // For input field
  const [query, setQuery] = useState("Sofa"); // Default query

  // Function to fetch models from Sketchfab API
  const fetchModels = async () => {
    try {
      const response = await fetch(
        `https://api.sketchfab.com/v3/search?type=models&q=${query}&downloadable=true`,
        {
          headers: {
            Authorization: `Token ${apiKey}`,
          },
        }
      );
      const data = await response.json();
      setModels(data.results || []);
    } catch (error) {
      console.error("Error fetching models:", error);
    }
  };

  
  // Fetch models when the component mounts or query changes
  useEffect(() => {
    fetchModels();
  }, [query]);

  // Handle model selection
  const handleModelSelect = (model) => {
    onModelSelect(model.uid);
  };

  // Handle search button click
  const handleSearch = () => {
    setQuery(searchQuery);
  };

  return (
    <div className="model-grid-container">
      {/* Search bar at the top */}
      <div className="search-bar">
        <input
          type="text"
          placeholder="Search for 3D models..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <button
          onClick={handleSearch}
        >
          Search
        </button>
      </div>

      {/* Model grid */}
      <div className="model-grid">
        {models.map((model) => (
          <div
            key={model.uid}
            className="model-card"
            onClick={() => handleModelSelect(model)}
          >
            <img
              src={model.thumbnails.images[0].url}
              alt={model.name}
              style={{ width: "100%", height: "150px", objectFit: "cover" }}
            />
            <div style={{ padding: "0.5rem", fontSize: "0.9rem" }}>
              {model.name}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ModelGrid;



================================================
File: src/components/Floorplan/ModelItem.js
================================================
import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { DragControls } from 'three-stdlib';

const ModelRenderer = ({
  scene,
  camera,
  renderer,
  selectedModel,
  walls,
  floorBounds,
  onError,
  onLoadingChange,
  orbitControls,
}) => {
  const modelsRef = useRef([]); // Store all placed models
  const dragControlsRef = useRef(null);
  const [isDraggingEnabled, setIsDraggingEnabled] = useState(true);
  const [isRotatingEnabled, setIsRotatingEnabled] = useState(false);
  const initialMousePosition = useRef({ x: 0, y: 0 });
  const isModelClicked = useRef(null);
  const isDraggingRef = useRef(false);
  const isRotatingRef = useRef(false);

  // Load the 3D model
  const loadModel = (url) => {
    const loader = new GLTFLoader();
    loader.load(
      url,
      (gltf) => {
        const model = gltf.scene;

        // Create a group to hold all pieces of the furniture
        const modelGroup = new THREE.Group();
        modelGroup.add(model); // Add the entire model to the group

        // Scale and position the model
        const box = new THREE.Box3().setFromObject(modelGroup);
        const size = box.getSize(new THREE.Vector3());
        const scale = 100 / size.y;
        modelGroup.scale.set(scale, scale, scale);
        modelGroup.position.set(0, 0, 0);

        scene.add(modelGroup);
        modelsRef.current.push(modelGroup);

        // Set up drag controls
        if (dragControlsRef.current) {
          dragControlsRef.current.dispose();
        }

        const dragControls = new DragControls(modelsRef.current, camera, renderer.domElement);
        dragControls.enabled = false; // Disable drag controls by default
        dragControlsRef.current = dragControls;

        // Mouse down event handler
        const onMouseDown = (event) => {
          event.preventDefault();

          const rect = renderer.domElement.getBoundingClientRect();
          const mouse = new THREE.Vector2();
          mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
          mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

          const raycaster = new THREE.Raycaster();
          raycaster.setFromCamera(mouse, camera);

          const intersects = raycaster.intersectObjects(modelsRef.current, true);
          if (intersects.length > 0) {
            isModelClicked.current = intersects[0].object;
            initialMousePosition.current = { x: event.clientX, y: event.clientY };

            // Disable OrbitControls when interacting with the model
            if (orbitControls) {
              orbitControls.enabled = false;
            }

            // Check which button is pressed
            if (event.button === 0) {
              // Left click - enable dragging
              setIsDraggingEnabled(true);
              setIsRotatingEnabled(false);
              if (dragControlsRef.current) {
                dragControlsRef.current.enabled = true;
              }
            } else if (event.button === 2) {
              // Right click - enable rotation
              setIsDraggingEnabled(false);
              setIsRotatingEnabled(true);
              isRotatingRef.current = true;
            }
          }
        };

        // Mouse move event handler
        const onMouseMove = (event) => {
          if (!isModelClicked.current) return;

          event.preventDefault();

          if (isRotatingRef.current && isModelClicked.current) {
            const deltaX = event.clientX - initialMousePosition.current.x;

            // Rotate only around the Z-axis
            isModelClicked.current.rotation.z += deltaX * 0.01;

            // Update initial mouse position
            initialMousePosition.current = { x: event.clientX, y: event.clientY };
          }
        };

        // Mouse up event handler
        const onMouseUp = (event) => {
          event.preventDefault();

          isModelClicked.current = null;
          setIsRotatingEnabled(false);
          isRotatingRef.current = false;

          // Disable drag controls
          if (dragControlsRef.current) {
            dragControlsRef.current.enabled = false;
          }

          // Re-enable OrbitControls
          if (orbitControls) {
            orbitControls.enabled = true;
          }
        };

        // Add event listeners
        renderer.domElement.addEventListener('mousedown', onMouseDown);
        renderer.domElement.addEventListener('mousemove', onMouseMove);
        renderer.domElement.addEventListener('mouseup', onMouseUp);
        renderer.domElement.addEventListener('contextmenu', (e) => e.preventDefault());

        // Cleanup function
        return () => {
          renderer.domElement.removeEventListener('mousedown', onMouseDown);
          renderer.domElement.removeEventListener('mousemove', onMouseMove);
          renderer.domElement.removeEventListener('mouseup', onMouseUp);
          renderer.domElement.removeEventListener('contextmenu', (e) => e.preventDefault());
        };
      },
      undefined,
      (error) => {
        onError('Error loading model');
        console.error('Error loading model:', error);
      }
    );
  };

  // Load the model when selectedModel changes
  useEffect(() => {
    if (selectedModel && scene && camera && renderer) {
      const fetchModelDetails = async () => {
        try {
          onLoadingChange(true);
          const apiKey = '9d2379512bd84812beb65f0ffe608310';
          const downloadResponse = await fetch(
            `https://api.sketchfab.com/v3/models/${selectedModel}/download`,
            {
              headers: {
                Authorization: `Token ${apiKey}`,
              },
            }
          );
          const downloadData = await downloadResponse.json();
          const glbUrl = downloadData.glb.url;

          if (glbUrl) {
            loadModel(glbUrl);
          } else {
            onError('GLB URL not found');
          }
        } catch (error) {
          onError('Error fetching model');
          console.error('Error fetching model:', error);
        } finally {
          onLoadingChange(false);
        }
      };

      fetchModelDetails();
    }
  }, [selectedModel, scene, camera, renderer]);

  // Cleanup on component unmount
  useEffect(() => {
    return () => {
      if (dragControlsRef.current) {
        dragControlsRef.current.dispose();
      }
      modelsRef.current.forEach(model => {
        scene.remove(model);
        model.traverse((object) => {
          if (object instanceof THREE.Mesh) {
            object.geometry.dispose();
            object.material.dispose();
          }
        });
      });
      modelsRef.current = [];
      // Re-enable OrbitControls on cleanup
      if (orbitControls) {
        orbitControls.enabled = true;
      }
    };
  }, [scene, orbitControls]);

  return null;
};

export default ModelRenderer;


================================================
File: src/components/Floorplan/PaintGrid.css
================================================
.paint-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
  
  .paint-item {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 0.5rem;
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  .paint-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  
  .color-preview {
    width: 100%;
    height: 100px;
    border-radius: 4px;
    margin-bottom: 0.5rem;
    border: 1px solid #eee;
  }
  
  .paint-details {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .paint-name {
    font-weight: 500;
  }
  
  .paint-price {
    color: #666;
  }
  
  .threejs-container.painting {
    cursor: pointer;
  }


================================================
File: src/components/Floorplan/PaintGrid.js
================================================
import React from 'react';
import './PaintGrid.css';

const PaintGrid = ({ onPaintSelect }) => {
  const paints = [
    { id: 1, name: 'Classic White', color: '#FFFFFF', price: '$29.99' },
    { id: 2, name: 'Warm Beige', color: '#E8DCC4', price: '$34.99' },
    { id: 3, name: 'Soft Gray', color: '#D3D3D3', price: '$32.99' },
    { id: 4, name: 'Sky Blue', color: '#87CEEB', price: '$39.99' },
    { id: 5, name: 'Sage Green', color: '#9DC183', price: '$36.99' },
    { id: 6, name: 'Blush Pink', color: '#FFB6C1', price: '$38.99' },
  ];

  return (
    <div className="paint-grid">
      {paints.map((paint) => (
        <div
          key={paint.id}
          className="paint-item"
          onClick={() => onPaintSelect(paint)}
        >
          <div
            className="color-preview"
            style={{ backgroundColor: paint.color }}
          />
          <div className="paint-details">
            <span className="paint-name">{paint.name}</span>
            <span className="paint-price">{paint.price}</span>
          </div>
        </div>
      ))}
    </div>
  );
};

export default PaintGrid;


================================================
File: src/components/Floorplan/navbar.js
================================================
import React, { useState, useRef } from "react";
import { Stage, Layer, Line, Text } from "react-konva";
import { useNavigate, Link } from "react-router-dom";
import { Search, User, ArrowRightCircle } from "lucide-react";
import LogoutButton from "../Login-in/LogoutButton";
import Konva from "konva";

function NavLink({ children, to }) {
  return (
    <Link to={to} className="nav-link">
      {children}
    </Link>
  );
}

const Navbar = () => {
  return (
    <nav className="nav">
      <div className="nav-content">
        <div className="nav-left">
          <h1 className="logo">Decora</h1>
          <div className="nav-links">
            {/* <a href="/">Design</a> */}
            {/* <a href="/products">Products</a> */}
            <a href="/budget-estimator">Budget Estimator</a>
          </div>
        </div>
        <div className="nav-right">
          <div className="search-container">
            <input
              type="text"
              placeholder="Search"
              className="search-input"
            />
            <Search className="search-icon" />
          </div>
          <button className="profile-button">
            <User className="profile-icon" />
          </button>
          <LogoutButton />
        </div>
      </div>
    </nav>
  );
};

export default Navbar;



================================================
File: src/components/Floorplan/scrapedData/amazon_products.json
================================================
[
    {
        "name": "AYSIS Almirah for Clothes,Plastic Soft Sheet Collapsible Wardrobe for Clothes for Kids Clothes/Toy/Book, Baby Cupboard for Clothes Storage in Bedroom Nursery,Cartoon (Black, 8-Shelf-8-Door)",
        "image_url": "https://m.media-amazon.com/images/I/81sZJi6I8KL._AC_UL320_.jpg",
        "price": "2418",
        "url": "https://www.amazon.in/AYSIS-Collapsible-Wardrobe-Cupboard-8-Shelf-8-Door/dp/B0DRCW7Q8Z/ref=sr_1_1?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-1"
    },
    {
        "name": "Nilkamal Freedom Big FMM Plastic Cabinet | 3-Year Warranty | 4-Shelf Storage Cupboard with Doors | Multi Organizer for Home, Wardrobe, and Kitchen | Clothes Rack, Shelves, Almirah Weather Brown",
        "image_url": "https://m.media-amazon.com/images/I/61oxcYAz6oL._AC_UL320_.jpg",
        "price": "4750",
        "url": "https://www.amazon.in/Nilkamal-Freedom-Medium-Cabinet-Weather/dp/B01BY6ZOQI/ref=sr_1_2?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-2"
    },
    {
        "name": "Maison & Cuisine\u00ae 4+2 Layer Collapsible Wardrobe for Clothes with 6 Shelves, 2 Side Pocket and 1 Hanger (Non Woven Febric and Metal Rod, (Grey,7700-1)",
        "image_url": "https://m.media-amazon.com/images/I/81V+w-eVezL._AC_UL320_.jpg",
        "price": "1249",
        "url": "https://www.amazon.in/Maison-Cuisine%C2%AE-Collapsible-Wardrobe-Clothes/dp/B09GPGMFX9/ref=sr_1_3?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-3"
    },
    {
        "name": "CoolLeaf Soft Plastic Wardrobe for Clothes, Kids Almirah for Clothes - 8 Doors Collapsible Wardrobe for Kids Clothes/Toys/Books, Baby Cupboard for Clothes Storage in Bedroom Nursery, White (CW-W8)",
        "image_url": "https://m.media-amazon.com/images/I/61gOdEb2etL._AC_UL320_.jpg",
        "price": "3099",
        "url": "https://www.amazon.in/CoolLeaf-Wardrobe-Multi-Purpose-Collapsible-Cupboard/dp/B0CWRS1ZTN/ref=sr_1_4?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-4"
    },
    {
        "name": "EXVITO 5 Pack Multipurpose Stackable Cupboard Drawer for Clothes Storage; Wardrobe Cabinet Organizer for Office, Kitchen, Bathroom - Beige",
        "image_url": "https://m.media-amazon.com/images/I/71D52BchXdL._AC_UL320_.jpg",
        "price": "2944",
        "url": "https://www.amazon.in/EXVITO-Multipurpose-Stackable-Drawer-Cabinet/dp/B0DS8HGFWW/ref=sr_1_5?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-5"
    },
    {
        "name": "Maison & Cuisine\u00ae 12 Layer Collapsible Portable Foldable Wardrobe Storage Organizer Shelves for Clothes Racks Fabric Almirah Non Rustable Iron Storage Unit (88250) (Grey)",
        "image_url": "https://m.media-amazon.com/images/I/81oqg8O5CVL._AC_UL320_.jpg",
        "price": "1569",
        "url": "https://www.amazon.in/Maison-Cuisine%C2%AE-Collapsible-Organizer-88150/dp/B0BGXZV1P3/ref=sr_1_6?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-6"
    },
    {
        "name": "BEMITH Collapsible Wardrobe 6 Shelves Storage Clothes Storage Rack Quick Wardrobe/Cabinet/Multipurpose Storage Rack, Foldable, Collapsible Fabric Organizer for Home Office Dorm Room(Grey)",
        "image_url": "https://m.media-amazon.com/images/I/71RbAzQ-TBL._AC_UL320_.jpg",
        "price": "899",
        "url": "https://www.amazon.in/BEMITH-Collapsible-Storage-Multipurpose-Organizer/dp/B0DNJJ1MZT/ref=sr_1_7?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-7"
    },
    {
        "name": "AYSIS Plastic Rack for Storage, Foldable Wardrobe for Clothes, Collapsible Wardrobe, Kitchen Cupboard, Clothes Storage Wardrobe, Cupboard for Clothes Plastic (Black, 6-SHELF-3-DOOR)",
        "image_url": "https://m.media-amazon.com/images/I/81WWpYBOQtL._AC_UL320_.jpg",
        "price": "1584",
        "url": "https://www.amazon.in/AYSIS-Foldable-Wardrobe-Collapsible-6-SHELF-3-DOOR/dp/B0DBLHPV1K/ref=sr_1_8?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-8"
    },
    {
        "name": "Jayci Mart 4 Layer Plastic Cupboard for Clothes Plastic Cabinet for Storage Foldable Wardrobe for Clothes Plastic Cloth Rack for Storage Clothes Storage Box (4 Layer)",
        "image_url": "https://m.media-amazon.com/images/I/51nh7jZX3+L._AC_UL320_.jpg",
        "price": "1559",
        "url": "https://www.amazon.in/Jayci-Mart-Cupboard-Foldable-Wardrobe/dp/B0DFX4LJMC/ref=sr_1_9?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-9"
    },
    {
        "name": "Jeyang Multipurpose Stackable Cupboard Drawer for Clothes Storage; Wardrobe Cabinet Organizer for Office, Kitchen, Bathroom (White, 5 TIER)",
        "image_url": "https://m.media-amazon.com/images/I/61sUv1CNRfL._AC_UL320_.jpg",
        "price": "2749",
        "url": "https://www.amazon.in/Multipurpose-Stackable-Cupboard-Wardrobe-Organizer/dp/B0D1P9VBDT/ref=sr_1_10?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-10"
    },
    {
        "name": "Cello Novelty Big Plastic Cupboard with 3 Shelves, White & Grey | Storage Cupboard | Clothes Organizer | Almirah, Almari, Wardrobe for Kids, Home, Kitchen | 3 Years Warranty - Manufacturing defect",
        "image_url": "https://m.media-amazon.com/images/I/51p+6hdjVmL._AC_UL320_.jpg",
        "price": "4499",
        "url": "https://www.amazon.in/Cello-Novelty-Big-Plastic-Cupboard/dp/B083SP5N62/ref=sr_1_11?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-11"
    },
    {
        "name": "EXVITO Collapsible Wardrobe, 12-Shelf 6-Door Clothes Organizer For Cupboard, Organizer For Clothes Foldable And Stackable Personal Organizer For Clothes Diy Plastic Organizer - White, (35 X 5 X 87Cm)",
        "image_url": "https://m.media-amazon.com/images/I/71yk-lHbzwL._AC_UL320_.jpg",
        "price": "2589",
        "url": "https://www.amazon.in/EXVITO-Collapsible-Wardrobe-Organizer-Stackable/dp/B0DH562FPY/ref=sr_1_12?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-12"
    },
    {
        "name": "JD FRESH 3 Tier Foldable Plastic Cloth Rack for Storage/Kitchen Cupboard/Versatile and Sturdy Wardrobe for Clothes/Storage Organizer/Closet for Bedroom/Living Room/Laundry Room/Study(White)",
        "image_url": "https://m.media-amazon.com/images/I/719J3kyZz-L._AC_UL320_.jpg",
        "price": "2509",
        "url": "https://www.amazon.in/JD-FRESH-Foldable-Versatile-Organizer/dp/B0D9NSTBH1/ref=sr_1_13?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-13"
    },
    {
        "name": "Maison & Cuisine Polypropylene Collapsible Wardrobe 12 Shelves Storage Unit Almari Closet Clothes Storage Rack Quick And Easy To Assemble Foldable Almirah(W 88170)(Brown)",
        "image_url": "https://m.media-amazon.com/images/I/81-I9Qnv0QL._AC_UL320_.jpg",
        "price": "1799",
        "url": "https://www.amazon.in/Maison-Cuisine%C2%AE-Collapsible-Wardrobe-88170/dp/B0B3DNL74M/ref=sr_1_14?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-14"
    },
    {
        "name": "Caspian Engineered Wood Double Door Wooden Wardrobe (Brown) | Pre-Assembled Furniture | Cupboard/Almirah for Bedroom Clothes Storage Organizer with 6 Shelves and Key Lock",
        "image_url": "https://m.media-amazon.com/images/I/71jStCayIcL._AC_UL320_.jpg",
        "price": "8999",
        "url": "https://www.amazon.in/Caspian-Furniture-Textured-Wardrobe-Engineered/dp/B091HW1THM/ref=sr_1_15?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-15"
    },
    {
        "name": "Caspian Engineered Wood Double Door Wooden Wardrobe (Coffee Black) | Pre-Assembled Furniture with Mirror & Hanging | Almirah/Cupboard for Bedroom Clothes Storage Organizer with 4 Shelves & 2 Drawers",
        "image_url": "https://m.media-amazon.com/images/I/611mZPLeDnL._AC_UL320_.jpg",
        "price": "9999",
        "url": "https://www.amazon.in/Caspian-Engineered-Pre-Assembled-Furniture-Organizer/dp/B0BG93HNCQ/ref=sr_1_16?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-16"
    },
    {
        "name": "Nilkamal Freedom Mini FMS Plastic Cabinet 3-Year Warranty | Storage Cupboard | Clothes Organizer Rack, 2 Door Cabinet | Almirah | Shelves | Almari | Wardrobe | for Kids, Home, Wardrobe, Kitchen.",
        "image_url": "https://m.media-amazon.com/images/I/71en+hEUHxL._AC_UL320_.jpg",
        "price": "2230",
        "url": "https://www.amazon.in/Nilkamal-Freedom-Mini-Cabinet-Brown/dp/B012K1WQEO/ref=sr_1_17?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-17"
    },
    {
        "name": "Mevigo 4 Tier Stackable Plastic Storage Bins with Lid and Wheels - Closet Organizers & Storage Organizer for Cupboard Rack for Clothes/Shoes/Books/Toys/Snack for Bedroom/Hallway/Office - Beige",
        "image_url": "https://m.media-amazon.com/images/I/71mnGWK4DEL._AC_UL320_.jpg",
        "price": "2799",
        "url": "https://www.amazon.in/Mevigo-Stackable-Plastic-Storage-Wheels/dp/B0DKF7Z18X/ref=sr_1_18?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-18"
    },
    {
        "name": "ABOUT SPACE Wooden Cabinet - 3 Tier Engineered Wood Storage Cabinet for Living Room with Magnetic Door, Space Saving Furniture for Home, Office, Kitchen (Walnut -L 38 x B 38 x H 100.5 cm)",
        "image_url": "https://m.media-amazon.com/images/I/71lyduZvw1L._AC_UL320_.jpg",
        "price": "3799",
        "url": "https://www.amazon.in/ABOUT-SPACE-Wooden-Cabinet-Engineered/dp/B0CB8SG2S9/ref=sr_1_19?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-19"
    },
    {
        "name": "WoodenStreet\u2122 Kayden Engineered Wood 3 Door Wardrobe for Clothes, Cupboard Wooden Almirah for Bedroom, Multi Utility Wardrobe with Hanger Rod Lock and Handles, 1 Year Warranty,Frosty White Finish",
        "image_url": "https://m.media-amazon.com/images/I/61dlscyEasL._AC_UL320_.jpg",
        "price": "10542",
        "url": "https://www.amazon.in/WoodenStreetTM-Engineered-Wardrobe-Cupboard-Wooden/dp/B0DP34TK2M/ref=sr_1_20?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-20"
    },
    {
        "name": "Caspian Engineered Wood Single Door Wooden Wardrobe (White) | Pre-Assembled Furniture | for Bedroom, Kitchen, Office & Kid\u2019s Room | Durable Home Clothes Storage Organizer with 5 Shelves & 2 Drawers",
        "image_url": "https://m.media-amazon.com/images/I/41adylirSVL._AC_UL320_.jpg",
        "price": "6499",
        "url": "https://www.amazon.in/Furniture-Engineered-Single-Door-compartments/dp/B09PZ3LZW9/ref=sr_1_21?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-21"
    },
    {
        "name": "Cello Novelty Compact Plastic Cupboard with 1 Shelve & 2 Doors, White & Grey | Storage Cupboard | Clothes Organizer | Almirah, Almari, Wardrobe for Kids, Home | 3 Years Warranty - Manufacturing defect",
        "image_url": "https://m.media-amazon.com/images/I/51dvVtWkPiL._AC_UL320_.jpg",
        "price": "2129",
        "url": "https://www.amazon.in/Cello-Novelty-Compact-Plastic-Cupboard/dp/B083SPMJC4/ref=sr_1_22?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-22"
    },
    {
        "name": "Nilkamal Freedom Mini Small (FMS) Plastic Kids Mini Storage Cabinet |3-Year Warranty|2 Doors Cupboard | Multipurpose Storage Suitable for Kids Room and Home| Deep Blue and Grey Colour",
        "image_url": "https://m.media-amazon.com/images/I/7106IuowX0L._AC_UL320_.jpg",
        "price": "2499",
        "url": "https://www.amazon.in/Nilkamal-Warranty-Cupboard-Multipurpose-Suitable/dp/B0DDX6GGMM/ref=sr_1_23?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-23"
    },
    {
        "name": "KRISHYAM 4 Box Collapsible Plastic Cupboard for Storage, Plastic Soft Sheet Wardrobe Cabinet for Storage, Almirah for Clothes Storage Cabinet Storage Rack, Plastic Storage Cabinet (White Plain)",
        "image_url": "https://m.media-amazon.com/images/I/51ng+lrtihL._AC_UL320_.jpg",
        "price": "1599",
        "url": "https://www.amazon.in/KRISHYAM-Collapsible-Plastic-Cupboard-Wardrobe/dp/B0D766SWG8/ref=sr_1_24?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-24"
    },
    {
        "name": "CMerchants Shop 6 Rack Collapsible Wardrobe Cabinet (Black) Metal",
        "image_url": "https://m.media-amazon.com/images/I/71LLAo8UH-L._AC_UL320_.jpg",
        "price": "699",
        "url": "https://www.amazon.in/CMerchants-Collapsible-Wardrobe-Cabinet-Black/dp/B08W342YZP/ref=sr_1_25?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-25"
    },
    {
        "name": "Wakefit Wardrobe | 1 Year Warranty | Wardrobe Wooden, Almirah, Cupboard, Wooden Wardrobe, Almari, Twill 2 Door, Without Mirror, No Drawer & No Hanging Space, 18MM Panels (Frosty White)",
        "image_url": "https://m.media-amazon.com/images/I/61r4SqBz8mL._AC_UL320_.jpg",
        "price": "8299",
        "url": "https://www.amazon.in/Wakefit-Wardrobe-Warranty-Clothes-Almirah/dp/B0BH4VDJKL/ref=sr_1_26?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-26"
    },
    {
        "name": "Cello Novelty Large Plastic Cupboard, Ice Brown | Storage Cupboard | Clothes Organizer | Almirah, Almari, Wardrobe for Kids, Home | 3 Years Warranty - Manufacturing defect",
        "image_url": "https://m.media-amazon.com/images/I/61zKi8tHG3L._AC_UL320_.jpg",
        "price": "6099",
        "url": "https://www.amazon.in/Cello-Novelty-Large-Cupboard-Brown/dp/B01CQW6GUM/ref=sr_1_27?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-27"
    },
    {
        "name": "DeckUp Cove 2-Door Engineered Wood Wardrobe with Mirror (Walnut, Matte Finish)",
        "image_url": "https://m.media-amazon.com/images/I/71Bbpg5IFTL._AC_UL320_.jpg",
        "price": "7699",
        "url": "https://www.amazon.in/DeckUp-Cove-2-Door-Wardrobe-Mirror/dp/B085W8JQZC/ref=sr_1_28?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-28"
    },
    {
        "name": "Lukzer 6 Layer Engineered Wood Bookshelf Multipurpose Home Decor Storage Rack Showcase Organizer for Living Room, Kitchen, Bedroom, Office (MR-005/White /180 x 33 x 24cm) DIY (Do It Yourself)",
        "image_url": "https://m.media-amazon.com/images/I/51YprN5bXUL._AC_UL320_.jpg",
        "price": "2680",
        "url": "https://www.amazon.in/Lukzer-Engineered-Bookshelf-Multipurpose-Organizer/dp/B0BPS536WC/ref=sr_1_29?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-29"
    },
    {
        "name": "HEMOVIA Collapsible Wardrobe Clothes Organizer for Cupboard, 6-Shelf 3-Door Organizer for Clothes Foldable and Stackable Personal Organizer for Clothes DIY Plastic White",
        "image_url": "https://m.media-amazon.com/images/I/6173PET0a6L._AC_UL320_.jpg",
        "price": "2999",
        "url": "https://www.amazon.in/HEMOVIA-Collapsible-Wardrobe-Organizer-Stackable/dp/B0DQ8WX3VK/ref=sr_1_30?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-30"
    },
    {
        "name": "KIMANA Movable Foldable Plastic Cupboard for Storage |Plastic Wardrobe for Clothes |Plastic Drawer Storage Cabinet for Home Organizer with Transparent Doors and Wheels- 4 Layer",
        "image_url": "https://m.media-amazon.com/images/I/816trqMcvJL._AC_UL320_.jpg",
        "price": "5399",
        "url": "https://www.amazon.in/KIMANA-Foldable-Cupboard-Organizer-Transparent/dp/B0CV466Z56/ref=sr_1_31?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-31"
    },
    {
        "name": "PureSell Set of 4 Multipurpose Stackable Foldable Plastic Cabinet for Storage Wardrobe for Clothes Plastic Cupboard for Clothes Storage Cabinet Plastic Modular Drawer Storage Box, Skin",
        "image_url": "https://m.media-amazon.com/images/I/515tuHS-yWL._AC_UL320_.jpg",
        "price": "2049",
        "url": "https://www.amazon.in/PureSell-Multipurpose-Stackable-Foldable-Wardrobe/dp/B0DG95KF3D/ref=sr_1_32?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-32"
    },
    {
        "name": "Oumffy Almirah for Clothes,Plastic Wardrobe for Clothes Collapsible Wardrobe for Kids Clothes/Toy/Book, Baby Cupboard for Clothes Storage in Bedroom Nursery,Cartoon (Blue, 8-Shelf-8-Door)",
        "image_url": "https://m.media-amazon.com/images/I/71gjE-laklL._AC_UL320_.jpg",
        "price": "2599",
        "url": "https://www.amazon.in/Oumffy-Wardrobe-Collapsible-Cupboard-8-Shelf-8-Door/dp/B0DNQ66CB2/ref=sr_1_33?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-33"
    },
    {
        "name": "Amazon Brand - Solimo 3-Door Foldable Plastic Wardrobe,8 Racks,Black,126 Centimeters,44 Cm,162 Cm",
        "image_url": "https://m.media-amazon.com/images/I/91HU273dhaL._AC_UL320_.jpg",
        "price": "1999",
        "url": "https://www.amazon.in/Amazon-Brand-Solimo-Foldable-Wardrobe/dp/B07R2XWV1C/ref=sr_1_34?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-34"
    },
    {
        "name": "Nilkamal Freedom FMDR1C with 1 Drawer with 3-Year Warranty|Plastic Cabinet for Storage|Clothes Organizer|Crockery Shelves|Wardrobe|Living Room|Adult & Kids|for Home Kitchen & Office",
        "image_url": "https://m.media-amazon.com/images/I/71UWmvRHuwL._AC_UL320_.jpg",
        "price": "6149",
        "url": "https://www.amazon.in/Nilkamal-Freedom-FMDR1CE-Plastic-Weathered/dp/B0B5H87WKG/ref=sr_1_35?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-35"
    },
    {
        "name": "MECHDEL Cupboard Rack For Clothes Plastic Cabinet For Storage Foldable Wardrobe For Clothes Plastic Cloth Rack For Storage Clothes Storage (CUPBOARD RACK-1 DOOR - WHITE, 1PCS)",
        "image_url": "https://m.media-amazon.com/images/I/71wyFMujwRL._AC_UL320_.jpg",
        "price": "999",
        "url": "https://www.amazon.in/MECHDEL-Cupboard-Foldable-Wardrobe-CUPBOARD/dp/B0DDXKLFLZ/ref=sr_1_36?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-36"
    },
    {
        "name": "COUCH CULTURE Adona Engineering Wooden Wardrobe Almirah for Clothes with 1 Door | Wardrobe Organizer for Clothes | Multipurpose Almirah for Bedroom | 1 Year Warranty - Leon Teak",
        "image_url": "https://m.media-amazon.com/images/I/612AEPagzYL._AC_UL320_.jpg",
        "price": "5899",
        "url": "https://www.amazon.in/COUCH-CULTURE-Engineered-Multipurpose-Office-Teak/dp/B0CBMX7V24/ref=sr_1_37?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-37"
    },
    {
        "name": "Nilkamal Sear 4 Tier Engineered Wood Free Standing Book Shelf | Urban Walnut",
        "image_url": "https://m.media-amazon.com/images/I/71kb3ZYswfL._AC_UL320_.jpg",
        "price": "3690",
        "url": "https://www.amazon.in/Nilkamal-Engineered-Standing-Cabinet-Finish/dp/B0BVQNKDX7/ref=sr_1_38?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-38"
    },
    {
        "name": "YouCopia Fabric Baby Foldable Wardrobe For Clothes Storage, Kids Almirah For Clothes, Baby Cupboard For Clothes Storage Collapsible Wardrobe For Kids Clothes/Toys/Books (Grey, 6-Layer)",
        "image_url": "https://m.media-amazon.com/images/I/71zSfOsJKsL._AC_UL320_.jpg",
        "price": "899",
        "url": "https://www.amazon.in/YouCopia-Foldable-Wardrobe-Storage-Collapsible/dp/B0DDCFW11S/ref=sr_1_39?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-39"
    },
    {
        "name": "Sunderlook Wardrobe for Kids Clothes \u2013 7 Door Kids Wardrobe, Foldable Kids Almirah for Clothes, Baby Cupboard for Clothes Storage, Cupboard for Kids, Baby Almirah for Clothes and Toys (Pink)",
        "image_url": "https://m.media-amazon.com/images/I/71USu8RePeL._AC_UL320_.jpg",
        "price": "1599",
        "url": "https://www.amazon.in/Sunderlook-Wardrobe-Kids-Clothes-Foldable/dp/B0DNCKDB4Y/ref=sr_1_40?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-40"
    },
    {
        "name": "Caspian Furniture 2 Door Wardrobe with Mirror for Bedroom|Value Cupboard with Adequate 2 Drawers and Hanging Space for Clothes|Colour Rainforest Dark|Pre Assembled (Medium (Width 30 Inches)) - Brown",
        "image_url": "https://m.media-amazon.com/images/I/51miObNFuaL._AC_UL320_.jpg",
        "price": "10499",
        "url": "https://www.amazon.in/CASPIAN-Furniture-Wardrobe-Rainforest-Assembled/dp/B0CGXMQVX2/ref=sr_1_41?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-41"
    },
    {
        "name": "Caspian Engineered Wood Single Door Wooden Wardrobe (Black) | Pre-Assembled Furniture | Cupboard/Almirah for Bedroom Clothes Storage Organizer with 5 Shelves, Key Lock & 2 Drawers",
        "image_url": "https://m.media-amazon.com/images/I/31Ivp89uIML._AC_UL320_.jpg",
        "price": "6499",
        "url": "https://www.amazon.in/Caspian-Furniture-Textured-Single-Wardrobe/dp/B079T3N7VC/ref=sr_1_42?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-42"
    },
    {
        "name": "Nilkamal Freedom Big 2 (FB2) Plastic Cabinet for Storage|3-Year Warranty|Space & Clothes Organizer|Crockery Shelves|Cupboard|Wardrobe|Living Room|Adult & Kids|Multipurpose for Home Kitchen & Office",
        "image_url": "https://m.media-amazon.com/images/I/514ibJZokjL._AC_UL320_.jpg",
        "price": "10590",
        "url": "https://www.amazon.in/Nilkamal-FLPWFRDOMPB2A006-Freedom-Cabinet-Brown/dp/B012K1WD7Y/ref=sr_1_43?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-43"
    },
    {
        "name": "FLIPZON Multipurpose 4 Shelve Wardrobe, (Iron and Non-Woven Fabric), Maroon",
        "image_url": "https://m.media-amazon.com/images/I/61FseqisZzL._AC_UL320_.jpg",
        "price": "549",
        "url": "https://www.amazon.in/FLIPZON-Multipurpose-Shelve-Wardrobe-Non-Woven/dp/B08ZLVS8W8/ref=sr_1_44?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-44"
    },
    {
        "name": "Nilkamal Freedom Mini Large (FML) Plastic Storage Cabinet (Weathered Brown & Biscuit)",
        "image_url": "https://m.media-amazon.com/images/I/41HFVH2Sc2L._AC_UL320_.jpg",
        "price": "6899",
        "url": "https://www.amazon.in/Nilkamal-Freedom-Large-Cabinet-Biscuit/dp/B01BY7032W/ref=sr_1_45?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-45"
    },
    {
        "name": "BOXJOY 5 Shelf Plastic Almirah Wardrobe Racks with Door Magnets & 5 Hook Steel Holder for Clothes Storage Collapsible Foldable Multipurpose Cupboard Organizer for Baby Kids Cloth Bedroom Toys (White)",
        "image_url": "https://m.media-amazon.com/images/I/71xYIRn4OpL._AC_UL320_.jpg",
        "price": "1775",
        "url": "https://www.amazon.in/BOXJOY-Wardrobe-Collapsible-Multipurpose-Organizer/dp/B0DQ5MCP6Y/ref=sr_1_46?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-46"
    },
    {
        "name": "CoolLeaf Cupboard for Bedroom,Plastic Wardrobe for Kids, 8 Cubes Baby Cupboard for Storage,Collapsible Wardrobe for Clothes/Toy/Book, Plastic Almirah with Soft Sheets Metal Hook, Blue Cartoon (CW-BC8)",
        "image_url": "https://m.media-amazon.com/images/I/61amJtqEQtL._AC_UL320_.jpg",
        "price": "3099",
        "url": "https://www.amazon.in/CoolLeaf-Cupboard-Wardrobe-Foldable-Cartoon/dp/B0D73R7XD6/ref=sr_1_47?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-47"
    },
    {
        "name": "Happer Plastic Premium Multipurpose Wall Mounted Storage Cabinet with Mirror, Prime Look (Ivory)",
        "image_url": "https://m.media-amazon.com/images/I/61jZwPZOXEL._AC_UL320_.jpg",
        "price": "999",
        "url": "https://www.amazon.in/Happer-Premium-Multipurpose-Mounted-Storage/dp/B0BDG7DZNZ/ref=sr_1_48?dib=eyJ2IjoiMSJ9.d2x7fTXkJFNDemM8NxO-UIgpxRYvpUejXzvT36pPRFCpsfJob7EOB-jiBKkV_Xf4B22OGWYVHmYIEl_tIQZyYlnyuT0yIFNs4EDvY0AW4QqN2qqJG1vTlb0Uj33ldl_DehVdTsBfuBUgntvE20cS6qx0l_oprSKFdur96IHbuESqAta1QmteD_PigYGZBT39jxyM6Oh4kVtaiJy_mSx1mzYCPcFeICndZWX2DZSilR7OYAmqZgZfluC71R6n9Ba1GUcsi8ttzayPXjyvElNl3jswXxl649JPMT3nEJ2is8g.n_28gzOP4_YkV8Efi-rKZPH1XwALSk4md6jG4nLD5sg&dib_tag=se&keywords=CUPBOARD&qid=1738359196&sr=8-48"
    },
    {
        "name": "Happer Plastic Premium Multipurpose Wall Mounted Storage Cabinet with Mirror, Prime Look (Ivory)",
        "image_url": "https://m.media-amazon.com/images/I/61jZwPZOXEL._AC_UL320_.jpg",
        "price": "999",
        "url": "https://www.amazon.in/Happer-Premium-Multipurpose-Mounted-Storage/dp/B0BDG7DZNZ/ref=sr_1_49?dib=eyJ2IjoiMSJ9.pE0KAzVsIrLzPNf6MJKsv5XZlQWlAtrgY3tMQGTs_etrNyluUDRKJ-8OESuS-MJxVL5IxSaV0mflWyut0NFS9TXHXsJfo0UzpJQxZ-EmFCB3cXTTB5FF7sW-u9ZjeCjAc-Yekfc_utxC7jWcv3ilbbEBfKAqGwhQ183gwLRQ7BcoC3JgMO8o0qUHJfGEoDcht3zkZLqOYcXXuXhaS6XOHHK8xcORoqYrNNrkCOIgsL7CT1KeaSiB-9AZEJiHUIUg71eAW5ORePSSW58HTpA-qraF1YMJsxAuzezaeNr9WhQ.Mhntb_7mIBUHrxQlo1dtNZWcB1VvLRL3Vfua9lnTJLg&dib_tag=se&keywords=CUPBOARD&qid=1738359208&sr=8-49"
    },
    {
        "name": "Maison & Cuisine\u00ae Collapsible Wardrobe Portable Foldable Closet for Clothes Almira, 2 Hanging Space, 8 Shelves, (Non-Woven Fabric 90GSM, Metal Rod 112x38x145cm)(88230, Brown)",
        "image_url": "https://m.media-amazon.com/images/I/81EU4Fix6rL._AC_UL320_.jpg",
        "price": "1499",
        "url": "https://www.amazon.in/Maison-Cuisine%C2%AE-Collapsible-Organizer-88130/dp/B0BN87FHBZ/ref=sr_1_50?dib=eyJ2IjoiMSJ9.pE0KAzVsIrLzPNf6MJKsv5XZlQWlAtrgY3tMQGTs_etrNyluUDRKJ-8OESuS-MJxVL5IxSaV0mflWyut0NFS9TXHXsJfo0UzpJQxZ-EmFCB3cXTTB5FF7sW-u9ZjeCjAc-Yekfc_utxC7jWcv3ilbbEBfKAqGwhQ183gwLRQ7BcoC3JgMO8o0qUHJfGEoDcht3zkZLqOYcXXuXhaS6XOHHK8xcORoqYrNNrkCOIgsL7CT1KeaSiB-9AZEJiHUIUg71eAW5ORePSSW58HTpA-qraF1YMJsxAuzezaeNr9WhQ.Mhntb_7mIBUHrxQlo1dtNZWcB1VvLRL3Vfua9lnTJLg&dib_tag=se&keywords=CUPBOARD&qid=1738359208&sr=8-50"
    }
]


================================================
File: src/components/Floorplan/scrapedData/furnScraper.py
================================================
from flask import Flask, jsonify, request
from flask_cors import CORS
import requests
from bs4 import BeautifulSoup
import random
import time
from fake_useragent import UserAgent
import json
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)
CORS(app)

class AmazonScraper:
    def __init__(self, scraper_api_key):
        self.session = requests.Session()
        self.ua = UserAgent()
        self.scraper_api_key = scraper_api_key
        self.base_domain = "https://www.amazon.in"
        self.scraper_api_url = f"http://api.scraperapi.com/?api_key={scraper_api_key}&url="

    def get_random_headers(self):
        return {
            'User-Agent': self.ua.random,
            'Accept-Language': 'en-IN,en;q=0.9',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        }

    def fetch_page(self, url, retries=5):
        for attempt in range(retries):
            try:
                time.sleep(random.uniform(2, 5))
                response = self.session.get(
                    self.scraper_api_url + url,
                    headers=self.get_random_headers(),
                    timeout=30
                )
                if response.status_code == 200:
                    return response
                print(f"Non-200 status code received: {response.status_code}")
                print(f"Response content preview: {response.text[:200]}")  # Debug info
                time.sleep(random.uniform(5, 10))
            except Exception as e:
                print(f"Error on attempt {attempt + 1}: {str(e)}")
                if attempt < retries - 1:
                    time.sleep(random.uniform(5, 10))
        return None

    def extract_product_data(self, card):
        try:
            # Updated selectors based on current Amazon HTML structure
            name_tag = card.select_one('h2.a-size-base-plus span') or \
                      card.select_one('h2[aria-label] span') or \
                      card.select_one('span.a-text-normal')
                      
            image_tag = card.select_one('img.s-image')
            
            # Updated price selector to handle different price formats
            price_tag = card.select_one('span.a-price span.a-offscreen') or \
                       card.select_one('span.a-price-whole')
                       
            link_tag = card.select_one('a.a-link-normal[href]')

            # Print debug information
            print(f"Name found: {name_tag.text.strip() if name_tag else 'None'}")
            print(f"Price found: {price_tag.text.strip() if price_tag else 'None'}")
            
            if not all([name_tag, image_tag, price_tag, link_tag]):
                print("Missing required elements for product")
                return None

            # Clean and format the price
            price_text = price_tag.text.strip()
            price = price_text.replace('â‚¹', '').replace(',', '').strip()
            
            # Construct the product URL
            product_url = link_tag['href']
            if not product_url.startswith('http'):
                product_url = self.base_domain + product_url

            data = {
                'name': name_tag.text.strip(),
                'image_url': image_tag['src'].strip(),
                'price': price,
                'url': product_url
            }

            return data
            
        except Exception as e:
            print(f"Error extracting product data: {str(e)}")
            return None

    def scrape_products(self, search_query, max_products=50):
        all_products = []
        page = 1

        while len(all_products) < max_products:
            url = f"https://www.amazon.in/s?k={search_query}&page={page}"
            print(f"\nScraping page {page} for '{search_query}'...")
            print(f"URL: {url}")

            response = self.fetch_page(url)
            if not response:
                print("Failed to fetch page. Stopping scraping.")
                break

            soup = BeautifulSoup(response.text, 'html.parser')

            product_cards = soup.select("div.s-result-item[data-component-type='s-search-result']")

            if not product_cards:
                print("No product cards found. Stopping scraping.")
                print(f"Page content preview: {soup.text[:200]}")  # Debug info
                break

            print(f"Found {len(product_cards)} product cards on page {page}")

            for card in product_cards:
                if "AdHolder" in card.get('class', []):  # Skip sponsored products
                    continue

                product_data = self.extract_product_data(card)
                if product_data:
                    all_products.append(product_data)
                    print(f"Successfully extracted product: {product_data['name'][:50]}...")

                if len(all_products) >= max_products:
                    break

            print(f"Total products found: {len(all_products)}")
            if len(product_cards) < 10:  # Likely last page
                break

            page += 1
            time.sleep(random.uniform(1, 2))

        return all_products

@app.route('/scrape', methods=['POST'])
def scrape_data():
    try:
        search_query = request.json.get('search_query')
        if not search_query:
            return jsonify({'error': 'Search query is required'}), 400

        scraper_api_key = os.getenv("REACT_APP_SCRAPER_API_KEY")

        if not scraper_api_key:
            return jsonify({'error': 'ScraperAPI key not found in environment variables'}), 400

        scraper = AmazonScraper(scraper_api_key)
        products = scraper.scrape_products(search_query)

        if not products:
            return jsonify({'error': 'No products found or scraping failed'}), 404

        # Save with timestamp
        filename = f'amazon_products.json'
        with open(filename, 'w') as f:
            json.dump(products, f, indent=4)

        return jsonify({
            'message': 'Data scraped successfully!',
            'product_count': len(products),
            'filename': filename,
            'products': products
        })

    except Exception as e:
        return jsonify({'error': f'Scraping failed: {str(e)}'}), 500

@app.route('/products', methods=['GET'])
def get_products():
    try:
        with open('./amazon_products.json', 'r') as f:
            products = json.load(f)
        return jsonify(products)
    except FileNotFoundError:
        return jsonify({'error': 'File not found'}), 404

@app.route('/auto_scrape', methods=['GET'])
def auto_scrape():
    try:
        # Send POST request to /scrape
        post_url = 'http://127.0.0.1:5002/scrape'
        post_data = {'search_query': 'gaming chair'}
        post_response = requests.post(post_url, json=post_data)
        
        if post_response.status_code != 200:
            return jsonify({'error': f'Failed to scrape data: {post_response.text}'}), 500

        # Send GET request to /products
        get_url = 'http://127.0.0.1:5002/products'
        get_response = requests.get(get_url)
        
        if get_response.status_code != 200:
            return jsonify({'error': f'Failed to get products: {get_response.text}'}), 500

        return jsonify({'message': 'Data scraped and retrieved successfully!', 'products': get_response.json()})

    except Exception as e:
        return jsonify({'error': f'Auto scrape failed: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5002)


================================================
File: src/components/Floorplan/scrapedData/requirements.txt
================================================
flask==2.3.3
flask-cors==3.0.10
requests==2.31.0
beautifulsoup4==4.12.2
fake-useragent==1.2.0
python-dotenv==1.0.0


================================================
File: src/components/Furniture/FurnitureColorPanel.js
================================================



================================================
File: src/components/Furniture/Sofa.js
================================================
import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';

const DraggableSofa = ({ scene, camera, renderer, floor, sofaModel, controls }) => {
  const isDraggingRef = useRef(false);
  const isRotatingRef = useRef(false);
  const mouseRef = useRef(new THREE.Vector2());
  const intersectionPointRef = useRef(new THREE.Vector3());

  useEffect(() => {
    if (!sofaModel) return;

    scene.add(sofaModel);
    
    // Create raycaster inside useEffect
    const raycaster = new THREE.Raycaster();

    const onMouseDown = (event) => {
      event.preventDefault();

      const rect = renderer.domElement.getBoundingClientRect();
      mouseRef.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

      raycaster.setFromCamera(mouseRef.current, camera);
      
      // First check if we're clicking on the sofa
      const sofaIntersects = raycaster.intersectObject(sofaModel, true);
      const isSofaClicked = sofaIntersects.length > 0;

      if (isSofaClicked) {
        // Disable orbit controls when interacting with sofa
        controls.enabled = false;
        
        // Now check floor intersection for position
        const floorIntersects = raycaster.intersectObject(floor);
        if (floorIntersects.length > 0) {
          if (event.button === 0) { // Left click
            isDraggingRef.current = true;
            intersectionPointRef.current.copy(floorIntersects[0].point);
          } else if (event.button === 2) { // Right click
            isRotatingRef.current = true;
          }
        }
      }
    };

    const onMouseMove = (event) => {
      if (!isDraggingRef.current && !isRotatingRef.current) return;

      const rect = renderer.domElement.getBoundingClientRect();
      mouseRef.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

      raycaster.setFromCamera(mouseRef.current, camera);
      const intersects = raycaster.intersectObject(floor);

      if (intersects.length > 0) {
        if (isDraggingRef.current) {
          sofaModel.position.x = intersects[0].point.x;
          sofaModel.position.z = intersects[0].point.z;
        } else if (isRotatingRef.current) {
          const deltaX = event.movementX;
          sofaModel.rotation.y += deltaX * 0.02;
        }
      }
    };

    const onMouseUp = () => {
      isDraggingRef.current = false;
      isRotatingRef.current = false;
      // Re-enable orbit controls when done interacting with sofa
      controls.enabled = true;
    };

    // Add event listeners
    renderer.domElement.addEventListener('mousedown', onMouseDown);
    renderer.domElement.addEventListener('mousemove', onMouseMove);
    renderer.domElement.addEventListener('mouseup', onMouseUp);
    renderer.domElement.addEventListener('contextmenu', (e) => e.preventDefault());

    // Cleanup
    return () => {
      renderer.domElement.removeEventListener('mousedown', onMouseDown);
      renderer.domElement.removeEventListener('mousemove', onMouseMove);
      renderer.domElement.removeEventListener('mouseup', onMouseUp);
      renderer.domElement.removeEventListener('contextmenu', (e) => e.preventDefault());
      scene.remove(sofaModel);
    };
  }, [scene, camera, renderer, floor, sofaModel, controls]);

  return null;
};

export default DraggableSofa;


================================================
File: src/components/Landing-Page/Landing.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap');

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeInScale {
    from {
        opacity: 0;
        transform: scale(0.95);
    }

    to {
        opacity: 1;
        transform: scale(1);
    }
}
body{
    background-color: #f8ebd8;
    
}

/* Landing Container */
.landing-container {
    min-height: 100vh;
    background: linear-gradient(to bottom, #ffffff, #d7bb91);
    /* background: linear-gradient(to bottom, #ffffff, #fce4c2); */
    animation: fadeInUp 0.8s ease-out;
}

/* Navbar */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
    position: relative;
    z-index: 2;
}

.nav-links {
    display: flex;
    gap: 2rem;
    align-items: center;
    margin-right: 2rem;
}

.nav-links a {
    color: #8B4513;
    text-decoration: none;
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: #CD853F;
}

.hero-section {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0.5rem;
    min-height: auto;
}

.main_title {
    font-size: 2rem;
    font-weight: bold;
    color: #8B4513;
    font-family: 'Playfair Display', serif;
}

    /* .login-btn {
        background-color: transparent;
        color: #8B4513;
        border: 2px solid #8B4513;
        border-radius: 0.4rem;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
    } */

    .lgnbtn:hover {
        background-color: #8B4513;
        color: white;
        transform: translateY(-2px);
    }

/* Hero Content */
.hero-content {
    display: flex;
    gap: 3rem;
    align-items: center;
    max-width: 1200px;
    margin: 2rem auto 0;
    padding: 0 2rem;
}

.hero-text {
    flex: 1;
}

.hero-text h1 {
    font-size: 3rem;
    color: #8B4513;
    margin-bottom: 1.5rem;
    font-weight: bold;
    text-align: left;
    font-family: 'Playfair Display', serif;
}

.hero-text p {
    font-size: 1.25rem;
    color: #6B4423;
    margin-bottom: 2rem;
    text-align: left;
}

.start-designing-btn {
    background-color: #8B4513;
    color: white;
    padding: 1rem 2rem;
    border: none;
    border-radius: 0.5rem;
    font-size: 1.125rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.start-designing-btn:hover {
    background-color: #CD853F;
}

.hero-image {
    flex: 1;
}

.hero-image img {
    width: 100%;
    border-radius: 0.5rem;
}
.section-divider {
    border: none;
    height: 2px;
    background-color: #8B4513;
    margin: 2rem 0;
    width: 80%;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
}

/* Testimonials Section */
.testimonials-section {
    background-color: #f8ebd8;
    padding: 4rem 2rem;
    animation: fadeInUp 0.8s ease-out;
}

.testimonials-section h2 {
    font-family: 'Playfair Display', serif;
    text-align: center;
    color: #8B4513;
    font-size: 2rem;
    margin-bottom: 3rem;
}

.testimonials-container {
    display: flex;
    gap: 1.5rem;
    overflow-x: auto;
    padding: 1rem 2rem;
    scroll-snap-type: x mandatory;
    max-width: 1200px;
    margin: 0 auto;
}

.testimonial-card {
    min-width: 300px;
    max-width: 350px;
    background: white;
    padding: 1.5rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    scroll-snap-align: center;
    transition: transform 0.3s ease;
    border: 1px solid #DEB887;
    animation: fadeInScale 0.8s ease-out;
}

.testimonial-card:nth-child(2) {
    animation-delay: 0.2s;
}

.testimonial-card:nth-child(3) {
    animation-delay: 0.4s;
}

.testimonial-card:hover {
    transform: scale(1.05);
}

.rating {
    display: flex;
    gap: 0.25rem;
    margin-bottom: 1rem;
}

.star-icon {
    color: #DEB887;
    fill: #DEB887;
    width: 20px;
    height: 20px;
}

.testimonial-text {
    color: #6B4423;
    margin-bottom: 1rem;
    line-height: 1.6;
}

.testimonial-author {
    margin-top: auto;
}

.author-name {
    color: #8B4513;
    font-weight: 600;
}

.author-role {
    color: #CD853F;
}

/* Features Section */
.features-section {
    padding: 4rem 2rem;
    background-color: #f8ebd8;
    /* background-color: #e8d5c4; */
    animation: fadeInUp 0.8s ease-out;
}

.features-section h2 {
    text-align: center;
    color: #8B4513;
    font-size: 2rem;
    margin-bottom: 3rem;
    font-family: 'Playfair Display', serif;
}

.features-container {
    display: flex;
    gap: 1rem;
    justify-content: space-around;
    padding: 1rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
    overflow-x: hidden;
}

.feature-card {
    min-width: 220px;
    background: white;
    max-width: 250px;
    padding: 1.5rem;
    border-radius: 0.75rem;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    border: 1px solid #DEB887;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    animation: fadeInScale 0.8s ease-out;
}

.feature-card:nth-child(2) {
    animation-delay: 0.2s;
}

.feature-card:nth-child(3) {
    animation-delay: 0.4s;
}

.feature-card:nth-child(4) {
    animation-delay: 0.6s;
}

.feature-card:hover {
    transform: scale(1.05);
}

.feature-icon {
    color: #8B4513;
    width: 36px;
    height: 36px;
    margin-bottom: 0.75rem;
}

.feature-title {
    font-size: 1.125rem;
    color: #8B4513;
    margin-bottom: 0.5rem;
}

.feature-description {
    font-size: 0.875rem;
    color: #6B4423;
    line-height: 1.4;
}

/* Contact Section */
.contact-section {
    background-color: #804d28;
    padding: 4rem 2rem;
    position: relative;
    animation: fadeInUp 0.8s ease-out;
}

.contact-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 2rem;
}

.contact-section h2 {
    font-size: 2rem;
    color: #E2D0B5;
    margin-bottom: 2rem;
    font-family: 'Playfair Display', serif;
}

.contact-info {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 1.5rem;
}

.contact-icon {
    width: 24px;
    height: 24px;
    color: #c9a673;
}

.contact-text {
    color: #E2D0B5;
    font-size: 1.125rem;
}

.contact-form {
    background-color: #8B4513;
    padding: 2rem;
    border-radius: 8px;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #DEB887;
    border-radius: 4px;
    margin-bottom: 1rem;
    font-size: 1rem;
}

.form-textarea {
    width: 100%;
    height: 120px;
    padding: 0.75rem;
    border: 1px solid #DEB887;
    background-color: #E2D0B5;
    border-radius: 4px;
    resize: vertical;
    font-family: inherit;
}

.submit-btn {
    width: 100%;
    padding: 0.75rem;
    background-color: #E2D0B5;
    color: #6B4423;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.submit-btn:hover {
    background-color: #CD853F;
}

/* Media Queries */
@media (max-width: 768px) {
    .contact-container {
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .contact-info {
        text-align: center;
    }

    .contact-item {
        justify-content: center;
    }

    .navbar {
        padding: 1rem 2rem;
    }

    .hero-content {
        flex-direction: column;
        text-align: center;
    }

    .hero-text h1 {
        font-size: 2.5rem;
    }

    .nav-links {
        gap: 1rem;
    }

    .features-container {
        padding: 1rem;
    }

    .contact-info {
        flex-direction: column;
        gap: 1.5rem;
    }
}

@media (max-width: 480px) {
    .hero-text h1 {
        font-size: 2rem;
    }

    .testimonials-container {
        padding: 1rem;
    }
}


================================================
File: src/components/Landing-Page/LandingModel.js
================================================
import React, { useRef } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, useGLTF } from '@react-three/drei';

function Model({ url }) {
  const { scene } = useGLTF(url);
  return <primitive object={scene} scale={[2.8, 2.8, 2.8]} position={[2, -3.5, 0]}/>;
}

function Controls() {
  const controlsRef = useRef();
  
  useFrame(() => {
    if (controlsRef.current) {
      controlsRef.current.update();
    }
  });

  return (
    <OrbitControls
      ref={controlsRef}
      autoRotate
      autoRotateSpeed={1.0}
      enableDamping
      dampingFactor={0.05}
    />
  );
}

export default function ModelViewer() {
  return (
    <Canvas 
      style={{ height: '500px' }} 
      camera={{ position: [0, 5, 20], fov: 50, near: 0.1, far: 50 }}
    >
      <ambientLight intensity={0.5} />
      <directionalLight position={[10, 10, 5]} />
      <Controls />
      <Model url="scene.gltf" />
    </Canvas>
  );
}


================================================
File: src/components/Landing-Page/landing.js
================================================
import React from "react";
import {
  Star,
  Calculator,
  ShoppingBag,
  Layers,
  Download,
  Mail,
  Clock,
  MapPin,
  Phone,
} from "lucide-react";
import "./Landing.css";
import { useAuth0 } from "@auth0/auth0-react";
import LogoutButton from "../Login-in/LogoutButton";
import LoginButton from "../Login-in/LoginButton";
import { useNavigate } from "react-router-dom";
import ModelViewer from "./LandingModel";

const Landing = () => {
  const navigate = useNavigate(); 

  const testimonials = [
    {
      name: "Mohammed Bhadsorawala",
      role: "Interior Designer",
      rating: 5,
      text: "This virtual interior design tool has revolutionized how I present concepts to clients. The visualization capabilities are outstanding!",
    },
    {
      name: "Adi Awaskar",
      role: "Homeowner",
      rating: 5,
      text: "Transformed my space without the guesswork. The Budget Estimator is spot-on and helped me achieve exactly what I envisioned, while staying in budget.",
    },
    {
      name: "Aarya B",
      role: "Architect",
      rating: 4,
      text: "I'm really impressed with this tool! It's incredibly convenient and easy to use. I can now bring concepts to life faster than ever before.",
    },
  ];

  const features = [
    {
      icon: <Calculator className="feature-icon" />,
      title: "Budget Estimator",
      description:
        "Get accurate cost estimates for your interior design projects with our smart calculator.",
    },
    {
      icon: <ShoppingBag className="feature-icon" />,
      title: "Suggested Products",
      description:
        "Discover curated products that match your style and budget perfectly.",
    },
    {
      icon: <Layers className="feature-icon" />,
      title: "2D/3D Visualizations",
      description:
        "See your space come to life with detailed 2D and 3D visualizations.",
    },
    {
      icon: <Download className="feature-icon" />,
      title: "Easy Downloads",
      description:
        "Download your final designs instantly for offline access and sharing.",
    },
  ];

  const { isAuthenticated } = useAuth0(); 

  return (
    <>
      <div className="landing-container">
        <div className="hero-section">
          <nav className="navbar">
            <div className="main_title">Decora</div>
            <div className="nav-links">
              <a href="#features">Features</a>
              <a href="#contact-us">Contact Us</a>
              {/* <button>
                {isAuthenticated ? <LogoutButton /> : <LoginButton />}
              </button> */}
              <button className="lgnbtn"
                style={{
                  backgroundColor: "transperant",
                  border: "1px solid #cd853f",
                  borderRadius: "5px", 
                  padding: "10px 20px",
                  color: "#cd853f", 
                  fontSize: "4px", 
                  cursor: "pointer", 
                  
                }}
              >
                {isAuthenticated ? <LogoutButton /> : <LoginButton />}
              </button>
            </div>
          </nav>
        </div>

        <div className="hero-content">
          <div className="hero-text">
            <h1>Transform Your Space within minutes...</h1>
            <p>
              Experience the future of interior design at your fingertips. Turn
              your ideas into stylish designs in seconds.
            </p>
            <button
              className="start-designing-btn"
              onClick={() => navigate("/main-page")}
            >
              Get Started
            </button>
          </div>
          <div className="hero-image">
          <ModelViewer />
          </div>
        </div>
      </div>

      <div className="features-section" id="features">
        <h2>
          <b>Features</b>
        </h2>
        <div className="features-container">
          {features.map((feature, index) => (
            <div key={index} className="feature-card">
              {feature.icon}
              <h3 className="feature-title">{feature.title}</h3>
              <p className="feature-description">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
      <hr class="section-divider" />
      <div className="testimonials-section">
        <h2>
          <b>What People Say</b>
        </h2>
        <div className="testimonials-container">
          {testimonials.map((testimonial, index) => (
            <div key={index} className="testimonial-card">
              <div className="rating">
                {[...Array(testimonial.rating)].map((_, i) => (
                  <Star key={i} className="star-icon" />
                ))}
              </div>
              <p className="testimonial-text">{testimonial.text}</p>
              <div className="testimonial-author">
                <p className="author-name">{testimonial.name}</p>
                <p className="author-role">{testimonial.role}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="contact-section" id="contact-us">
        <div className="contact-container">
          <div className="contact-info">
            <h2>
              <b>Contact Us</b>
            </h2>
            <div className="contact-item">
              <Phone className="contact-icon" />
              <span className="contact-text">+91 12345 67890</span>
            </div>
            <div className="contact-item">
              <Clock className="contact-icon" />
              <span className="contact-text">Mon - Fri, 10am - 5pm</span>
            </div>
            <div className="contact-item">
              <Mail className="contact-icon" />
              <span className="contact-text">support@decora.com</span>
            </div>
            <div className="contact-item">
              <MapPin className="contact-icon" />
              <span className="contact-text">
                H R Mahajani Rd, Matunga East, Mumbai
              </span>
            </div>
          </div>

          {/* Contact Form (optional) */}
          {/* <div className="contact-form">
            <form>
              <div className="form-group">
                <input
                  type="text"
                  className="form-input"
                  placeholder="Enter your Name"
                />
                <input
                  type="email"
                  className="form-input"
                  placeholder="Enter a valid email address"
                />
                <textarea
                  className="form-textarea"
                  placeholder="Your message"
                ></textarea>
              </div>
              <button type="submit" className="submit-btn">
                SUBMIT
              </button>
            </form>
          </div> */}
        </div>
      </div>
    </>
  );
};

export default Landing;



================================================
File: src/components/Langchain/1app.py
================================================
import streamlit as st
from langchain.llms import HuggingFaceHub
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from dotenv import load_dotenv
import os


load_dotenv()

huggingface_api_key = os.getenv("HUGGINGFACEHUB_API_TOKEN")
if not huggingface_api_key:
    raise ValueError("Hugging Face API token not found. Please add it to your .env file.")


llm = HuggingFaceHub(
    repo_id="tiiuae/falcon-7b-instruct", 
    model_kwargs={"temperature": 0.7, "max_length": 300},
    huggingfacehub_api_token=huggingface_api_key
)


# Define the LangChain prompt template
template = """
You are an experienced real estate assistant in 2025.
Your task is to calculate the total renovation cost of an apartment in India based on the provided parameters.

Renovation costs include furnishing, painting, and minor changes.

### Input Data:
- **Number of Bedrooms**: {bedrooms}
- **Number of Bathrooms**: {bathrooms}
- **Square Foot Area**: {sqft_area}
- **Locality**: {locality}

### Renovation Cost Data (Per Sqft):
- **Mumbai**: â‚¹1,200 - â‚¹2,500
- **Delhi**: â‚¹1,000 - â‚¹2,000
- **Bangalore**: â‚¹800 - â‚¹1,500
- **Kolkata**: â‚¹700 - â‚¹1,300
- **Chennai**: â‚¹750 - â‚¹1,400

### Instructions:
1. Identify the city based on the **locality** provided.
2. Multiply the **square foot area** by the **lower and upper bounds** of the renovation cost for the identified city.
3. Display the value as output

For context a 750sqft house in Andheri with 2 bedroom 2 bathroom will cost 13-15lac INR
"""

prompt = PromptTemplate(template=template, input_variables=["bedrooms", "bathrooms", "sqft_area", "sqft_cost", "locality"])
chain = LLMChain(llm=llm, prompt=prompt)


st.title("House Renovation Cost Estimator")

bedrooms = st.number_input("Number of Bedrooms", min_value=1, step=1, value=2)
bathrooms = st.number_input("Number of Bathrooms", min_value=1, step=1, value=1)
sqft_area = st.number_input("Square Footage Area (sqft)", min_value=100.0, step=10.0, value=1000.0)
sqft_cost = st.number_input("Cost per Square Foot (INR)", min_value=1.0, step=1.0, value=50.0)
locality = st.text_input("Locality (e.g., Bandra, Juhu)", "Bandra")

if st.button("Calculate Renovation Cost"):
    with st.spinner("Calculating..."):
        try:
            result = chain.run({
                "bedrooms": bedrooms,
                "bathrooms": bathrooms,
                "sqft_area": sqft_area,
                "sqft_cost": sqft_cost,
                "locality": locality
            })
            st.subheader("Renovation Cost Estimate:")
            st.write(result)
        except Exception as e:
            st.error(f"An error occurred: {e}")



================================================
File: src/components/Langchain/.estimate_cache.db
================================================
[Non-text file]


================================================
File: src/components/Langchain/.langchain.db
================================================
[Non-text file]


================================================
File: src/components/Login-in/Buttons.css
================================================
.nav-button {
    background: none; 
    border: none;
    color: #8B4513;
    font-size: 1rem;
    cursor: pointer;
    text-decoration: none;
    transition: color 0.3s ease;
    font-family: inherit; 
}

.nav-button:hover {
    color: white; 
}



================================================
File: src/components/Login-in/LoginButton.js
================================================
import React from "react";
import { useAuth0 } from "@auth0/auth0-react";
// import './Buttons.css'

const LoginButton = () => {
  const { loginWithRedirect } = useAuth0();

  return <button className="nav-button" onClick={() => loginWithRedirect()}>Log In</button>;
};

export default LoginButton;


================================================
File: src/components/Login-in/LogoutButton.js
================================================
import React from "react";
import { useAuth0 } from "@auth0/auth0-react";
import './Buttons.css'
const LogoutButton = () => {
  const { logout } = useAuth0();

  return (
    <button className="nav-button"  onClick={() => logout({ logoutParams: { returnTo: window.location.origin } })}>
      Log Out
    </button>
  );
};

export default LogoutButton;


================================================
File: src/components/MainPage/AddRoomModal.js
================================================
import React, { useState } from 'react';
import { X } from 'lucide-react';

function AddRoomModal({ isOpen, onClose, onAdd }) {
  const [roomName, setRoomName] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (roomName.trim()) {
      onAdd(roomName.trim());  // Call the onAdd function from MainPage
      setRoomName('');
      onClose();  // Close the modal
    }
  };

  if (!isOpen) return null;  // If the modal is not open, return null

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <button className="modal-close" onClick={onClose}>
          <X className="w-5 h-5" />
        </button>
        <h2 className="modal-title">Add New Room</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            value={roomName}
            onChange={(e) => setRoomName(e.target.value)}
            placeholder="Enter room name"
            className="modal-input"
            autoFocus
          />
          <button type="submit" className="modal-button">
            Add Room
          </button>
        </form>
      </div>
    </div>
  );
}

export default AddRoomModal;



================================================
File: src/components/MainPage/MainPage.css
================================================
.container {
  min-height: 100vh;
  background-color: #FDF8F5;
  min-width: 100vw;
}


.nav {
  border-bottom: 1px solid rgba(230, 213, 199, 0.3);
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(8px);
  /* position: sticky; */
  top: 0;
  z-index: 100;
  min-width: 100vw;
  box-shadow: 0 4px 6px rgba(70, 48, 36, 0.05);
}

.nav-content {
  max-width: 80rem;
  margin: 0 auto;
  padding: 0 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 4.5rem;
}

.nav-left{
  display: flex;
  align-items: center;
  gap: 20px;
  padding-right: 230px;

}
.nav-right {
  display: flex;
    align-items: center;
    gap: 20px;
}

.logo {
  font-size: 1.75rem;
  font-weight: 700;
  color: #8B4513;
  font-family: 'Playfair Display', serif;
  letter-spacing: -0.5px;
  padding-right: 80px;
}

.nav-links {
  display: flex;
  gap: 2.5rem;
}

.nav-link {
  color: #463024;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.2s ease;
  position: relative;
  padding: 0.5rem 0;
}

.nav-link:after {
  content: '';
  position: absolute;
  width: 0;
  height: 2px;
  bottom: 0;
  left: 0;
  background-color: #B37B52;
  transition: width 0.2s ease;
}

.nav-link:hover {
  color: #B37B52;
}

.nav-link:hover:after {
  width: 100%;
}


.search-container {
  position: relative;
}

.search-input {
  width: 18rem;
  padding: 0.75rem 1rem 0.75rem 2.75rem;
  border-radius: 12px;
  border: 1px solid rgba(230, 213, 199, 0.5);
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 0.95rem;
  transition: all 0.2s ease;
}

.search-input:focus {
  background-color: white;
  border-color: #B37B52;
  box-shadow: 0 0 0 3px rgba(179, 123, 82, 0.1);
}

.search-icon {
  position: absolute;
  left: 0.875rem;
  top: 50%;
  transform: translateY(-50%);
  width: 1.25rem;
  height: 1.25rem;
  color: #8B5E3D;
  opacity: 0.7;
}


.profile-button {
  padding: 0.75rem;
  border-radius: 12px;
  border: 1px solid transparent;
  background: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.profile-button:hover {
  background-color: rgba(250, 246, 241, 0.8);
  border-color: rgba(230, 213, 199, 0.3);
}

.profile-icon {
  width: 1.375rem;
  height: 1.375rem;
  color: #463024;
}


.main {
  max-width: 80rem;
  margin: 0 auto;
  padding: 3rem 2rem;
}


.welcome-section {
  /* background: linear-gradient(135deg, #F3EAE1, #FAF6F1); */
  background-color: #F3EAE1;
  border-radius: 16px;
  padding: 3rem;
  margin-bottom: 3rem;
  box-shadow: 0 4px 6px -1px rgba(70, 48, 36, 0.03);
}

.welcome-title {
  /* font-family: 'Playfair Display', serif; */
  font-size: 2rem;
  font-weight: 600;
  color: #8B4513;
  margin-bottom: 0.75rem;
  letter-spacing: -0.5px;
}

.welcome-text {
  color: #8B4513;
  font-size: 1.125rem;
  opacity: 0.9;
}


.section-title {
  font-family: 'Playfair Display', serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #463024;
  margin-bottom: 1.5rem;
  letter-spacing: -0.5px;
}

.rooms-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 2rem;
  padding-bottom: 1.5rem;
}


.room-card {
  aspect-ratio: 3/4;
  border-radius: 16px;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  background-color: white;
  box-shadow: 0 4px 6px -1px rgba(70, 48, 36, 0.06);
  position: relative;
  border: 1px solid rgba(230, 213, 199, 0.3);
}

.room-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 24px -8px rgba(70, 48, 36, 0.12);
}

.room-card-add {
  background-color: rgba(250, 246, 241, 0.5);
  border: 2px dashed rgba(217, 191, 169, 0.5);
  box-shadow: none;
}

.room-card-add:hover {
  background-color: rgba(250, 246, 241, 0.8);
  border-color: #D9BFA9;
}

.room-image {
  width: 100%;
  height: 70%;
  background-color: #F3EAE1;
  border-radius: 12px;
  margin-bottom: 1rem;
  overflow: hidden;
  transition: all 0.2s ease;
}

.room-title {
  color: #463024;
  font-weight: 600;
  font-size: 1.125rem;
  letter-spacing: -0.3px;
}

.icon {
  width: 2.5rem;
  height: 2.5rem;
  color: #B37B52;
  margin-bottom: 1rem;
  opacity: 0.8;
}

.add-text {
  color: #B37B52;
  font-weight: 500;
  font-size: 1.125rem;
}


.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}
.modal-content {
  background-color: white;
  padding: 20px 30px;
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  max-width: 400px;
  width: 100%;
  text-align: center;
}

.modal-content h2 {
  font-size: 24px;
  font-weight: bold;
  color: #8b4513;
  margin-bottom: 20px;
}
.modal-close {
  position: absolute;
  top: 1.25rem;
  right: 1.25rem;
  background: none;
  border: none;
  cursor: pointer;
  color: #8B5E3D;
  padding: 0.5rem;
  border-radius: 8px;
  transition: all 0.2s ease;
}

.modal-close:hover {
  background-color: #FAF6F1;
}

.modal-title {
  font-size: 1.75rem;
  color: #463024;
  margin-bottom: 2rem;
  font-weight: 600;
  letter-spacing: -0.5px;
}

.modal-content input[type="text"] {
  width: 100%;
  padding: 10px 15px;
  margin-bottom: 20px;
  border: 1px solid #8B4513;
  
  border-radius: 5px;
  font-size: 16px;
  box-sizing: border-box;
  transition: border-color 0.3s ease;
}
.modal-content input[type="text"]::placeholder{
  color: #8B4513;

}

.modal-content input[type="text"]:focus {
  border-color: #8b4513;
  color: #8B4513;
  outline: none;
}
.modal-actions {
  display: flex;
  justify-content: center;
  gap: 15px;
}

.modal-button {
  padding: 10px 20px;
  font-size: 16px;
  border-radius: 5px;
  cursor: pointer;
  border: none;
  transition: background-color 0.3s ease;
}

.modal-button:first-child {
  background-color: #8b4513;
  color: white;
}

.modal-button:first-child:hover {
  background-color: #a0522d;
}

.modal-button:last-child {
  background-color: #f0f0f0;
  color: #333;
}

.modal-button:last-child:hover {
  background-color: #ddd;
}

.delete-button,
.edit-button {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.95);
  border: 1px solid rgba(230, 213, 199, 0.3);
  border-radius: 10px;
  width: 2.5rem;
  height: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  color: #8B5E3D;
  opacity: 0;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(70, 48, 36, 0.06);
}

.room-card:hover .delete-button,
.room-card:hover .edit-button {
  opacity: 1;
}

.delete-button:hover,
.edit-button:hover {
  background: white;
  color: #463024;
  transform: scale(1.05);
  box-shadow: 0 4px 8px rgba(70, 48, 36, 0.1);
}


================================================
File: src/components/MainPage/MainPage.js
================================================
import React, { useState, useEffect } from "react";
import { Search, User, Plus } from "lucide-react";
import "./MainPage.css";
import { useNavigate, Link } from "react-router-dom";
import RoomCard from "./RoomCard";
import { useAuth0 } from "@auth0/auth0-react";
import LogoutButton from "../Login-in/LogoutButton";
import CryptoJS from "crypto-js";

// NavLink Component
function NavLink({ children, to }) {
  return (
    <Link to={to} className="nav-link">
      {children}
    </Link>
  );
}

// Navigation Component
function Navigation(props) {
  return (
    <nav className="nav">
      <div className="nav-content">
        <div className="nav-left">
          <h1 className="logo">Decora</h1>
          <div className="nav-links">
            {/* <NavLink to="/products">Products</NavLink> */}
            <Link to={`/${props.userId}/budget-estimator`}>Budget Estimator</Link>
          </div>
        </div>
        <div className="nav-right">
          <div className="search-container">
            <input type="text" placeholder="Search" className="search-input" />
            <Search className="search-icon" />
          </div>
          <button className="profile-button">
            <User className="profile-icon" />
          </button>
          <LogoutButton />
        </div>
      </div>
    </nav>
  );
}

// AddRoomModal Component
function AddRoomModal({ isOpen, onClose, onAdd }) {
  const [roomName, setRoomName] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (roomName.trim()) {
      onAdd(roomName);
      setRoomName("");
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Add New Room</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Enter room name"
            value={roomName}
            onChange={(e) => setRoomName(e.target.value)}
            required
          />
          <div className="modal-actions">
            <button type="submit" className="modal-button">
              Add
            </button>
            <button type="button" className="modal-button" onClick={onClose}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


// Main Page Component
function MainPage() {
  const { user } = useAuth0();
  const navigate = useNavigate();
  const [rooms, setRooms] = useState(["Living Room", "Bedroom", "Kitchen"]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [userId, setUserId] = useState(null); // Store userId in state

  const generateUniqueId = (email, length = 20) => {
    const hash = CryptoJS.SHA256(email).toString();
    return hash.substring(0, length);
  };

  useEffect(() => {
    if (user) {
      const generatedUserId = generateUniqueId(user.email, 18);
      setUserId(generatedUserId); // Update userId in state
      navigate(`/${generatedUserId}/main-page`); // Navigate to the dynamic URL
    }
  }, [user, navigate]);

  const handleAddRoom = (roomName) => {
    if (roomName) {
      setRooms((prevRooms) => [...prevRooms, roomName]);
    }
  };

  const handleDeleteRoom = (roomName) => {
    setRooms(rooms.filter((room) => room !== roomName));
  };

  return (
    <div className="container">
      <Navigation userId={userId} /> {/* Pass userId from state */}

      <main className="main">
        <div className="welcome-section">
          <h2 className="welcome-title">Hello {user?.name || "Guest"}</h2>
          <p className="welcome-text">Let's start building your dream space</p>
        </div>

        <div className="home-section">
          <h3 className="section-title" style={{ color: "#8B4513" }}>
            My Projects
          </h3>
          <div className="rooms-container">
            <RoomCard isAdd={true} onAdd={() => setIsModalOpen(true)} userId={userId} />
            {rooms.map((room) => (
              <RoomCard
                key={room}
                title={room}
                onDelete={handleDeleteRoom}
                userId={userId} // Pass userId from state
              />
            ))}
          </div>
        </div>
      </main>

      <AddRoomModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onAdd={handleAddRoom}
      />
    </div>
  );
}

export default MainPage;


================================================
File: src/components/MainPage/RoomCard.css
================================================
.dlt-btn {
    color: #8B4513;
    background-color: #F3EAE1;
    border-radius: 5px;
    border: 2px solid #8B4513;
    height: 35px;
    padding: 0 12px;
    font-size: 14px;
    font-weight: 600;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.dlt-btn:hover {
    background-color: rgba(250, 246, 241, 0.8);
    border-color: #D9BFA9;
    transform: translateY(-2px);
    
}

.dlt-btn:active {
    background-color: #D9BFA9;
    border-color: #C1A57A;
    transform: translateY(0);
    
}

.room-title{
    color: #8B4513;
    font-family: 'Playfair Display', serif;
    padding-bottom: 15px;
}

.room-image {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 250px;
    width: 250px;
    font-size: 40px;
  
}
.room-icon{
    color: #8B4513;
}


================================================
File: src/components/MainPage/RoomCard.js
================================================
import React from "react";
import "./RoomCard.css";
import { useNavigate } from "react-router-dom";
import { Plus, Home, Utensils, Bed, Armchair } from "lucide-react";

function RoomCard({ title, isAdd = false, onAdd, onDelete, userId }) {
  const navigate = useNavigate();

  const roomId =`${title}=room`

  
  const handleCardClick = () => {
    if (isAdd) {
      onAdd();
    } else {
      navigate(`/${userId}/${roomId}/floorplan2d`); //ADD LINK HERE 
    }
  };

  const getIcon = () => {
    switch (title.toLowerCase()) {
      case "living room":
        return <Home className="room-icon" size={64} />;
      case "kitchen":
        return <Utensils className="room-icon" size={64} />;
      case "bedroom":
        return <Bed className="room-icon" size={64} />;
      default:
        return <Armchair className="room-icon" size={64} />;
    }
  };

  return (
    <div
      className={`room-card ${isAdd ? "room-card-add" : ""}`}
      onClick={handleCardClick} 
    >
      {isAdd ? (
        <>
          <Plus
            className="icon"
            onClick={(e) => {
              e.stopPropagation();
              onAdd();
            }}
          />
          <span className="add-text">Add New Room</span>
        </>
      ) : (
        <>
          <div className="room-image">{getIcon()}</div>
          <span className="room-title">{title}</span>
          {onDelete && (
            <button
              className="dlt-btn"
              onClick={(e) => {
                e.stopPropagation(); 
                onDelete(title);
              }}
            >
              Delete
            </button>
          )}
        </>
      )}
    </div>
  );
}

export default RoomCard;



================================================
File: src/components/NavBar/Navbar.css
================================================
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
    
}

.nav-links {
    display: flex;
    gap: 2rem;
    align-items: center;
    margin-right: 2rem;
    
}

.nav-links a {
    color: #8B4513;
    text-decoration: none;
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: #CD853F;
}

.hero-section {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0.5rem; 
    min-height: auto; 
}




.logo {
    font-size: 2rem;
    font-weight: bold;
    color: #8B4513;
    font-family: 'Playfair Display', serif;

    margin-left: 4rem;

}



================================================
File: src/components/NavBar/Navbar.js
================================================
import React from 'react'

import LogoutButton from "../Login-in/LogoutButton";
import LoginButton from "../Login-in/LoginButton";
import { useAuth0 } from '@auth0/auth0-react';

import './Navbar.css'
export default function Navbar() {
    const {isAuthenticated} = useAuth0()
  return (
    <div className="hero-section">
        <nav className="navbar">
          <div className="logo">Decora</div>
          <div className="nav-links">
            <a href="#about">About</a>
            <a href="#features">Features</a>
            {
              isAuthenticated ? <LogoutButton/> : <LoginButton/>
            }
          </div>
        </nav>
    </div>

        
  )
}



================================================
File: src/components/RenovationEstimator/Renovation_Estimator.ipynb
================================================
# Jupyter notebook converted to Python script.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.linear_model import Ridge


file_path = '/content/updated_house_renovation_data.csv'
house_data = pd.read_csv(file_path)


X = house_data.drop(columns=['Total Renovation Cost (INR)'])
y = house_data['Total Renovation Cost (INR)']


numerical_features = ['Bedrooms', 'Sqft Area', 'Price per Sqft (INR)', 'Toilets', 'House Age (years)']
categorical_features = ['Locality', 'Renovation Type', 'Material Quality']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


preprocessor = ColumnTransformer([
    ('num', StandardScaler(), numerical_features),
    ('cat', OneHotEncoder(), categorical_features)
])

linear_model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', Ridge(alpha=1.0))  # Alpha controls regularization strength
])


linear_model.fit(X_train, y_train)

y_pred_lr = linear_model.predict(X_test)
r2_lr = r2_score(y_test, y_pred_lr)

print("Linear Regression")

print(f"R^2 Score: {r2_lr}")


# Output:
#   Linear Regression

#   R^2 Score: 0.4250263869531593


import matplotlib.pyplot as plt
import numpy as np


plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_lr, color='blue', label='Predicted vs Actual', alpha=0.6)

# Plot the regression line (y=x for perfect prediction)
min_val = min(y_test.min(), y_pred_lr.min())
max_val = max(y_test.max(), y_pred_lr.max())
plt.plot([min_val, max_val], [min_val, max_val], color='red', linestyle='--', label='Ideal Fit')

# Plot settings
plt.title("Linear Regression: Actual vs Predicted Values")
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.legend()
plt.grid(alpha=0.3)
plt.show()

# Output:
#   <Figure size 1000x600 with 1 Axes>

custom_input = [[3, 1000, 40000, 4, 15, 'Urban', 'moderate', 'low']]
custom_input_df = pd.DataFrame(custom_input, columns=numerical_features + categorical_features)


custom_prediction = linear_model.predict(custom_input_df)

print(f"Predicted Renovation Cost Range: {custom_prediction[0]*0.6} to {custom_prediction[0]*0.8} INR")

# Output:
#   Predicted Renovation Cost Range: 3066661.4601494228 to 4088881.946865897 INR


import joblib

# Save the trained model as an .h5 file
joblib.dump(linear_model, "linear_regression_model.joblib")

print("Model saved to linear_regression_model.h5")

# Output:
#   Model saved to linear_regression_model.h5




================================================
File: src/components/RenovationEstimator/updated_house_renovation_data.csv
================================================
Bedrooms,Sqft Area,Price per Sqft (INR),Toilets,Locality,Renovation Type,Total Renovation Cost (INR),House Age (years),Material Quality,Energy Efficiency Rating
4,629,134676,4,Urban,moderate,4800000,39,low,3
2,594,40368,2,Rural,moderate,4800000,29,low,1
2,1293,29424,2,Rural,necessity,4800000,15,low,4
4,510,176356,3,Urban,luxury,4800000,43,medium,2
5,1211,6684,4,Rural,necessity,4800000,8,low,3
1,1314,38624,1,Rural,necessity,4800000,21,medium,2
3,1484,13420,3,Rural,necessity,4800000,39,medium,4
1,855,224236,1,Urban,moderate,4800000,19,high,4
1,626,148348,1,Urban,luxury,4800000,23,medium,5
5,1103,38948,4,Rural,luxury,4800000,11,high,1
1,550,52108,1,Rural,necessity,4800000,11,medium,5
1,2292,23356,1,Rural,luxury,4800000,24,medium,3
4,1831,26796,4,Rural,necessity,4806796,36,medium,2
3,1153,14120,3,Rural,moderate,4809344,40,high,3
4,1023,41696,3,Rural,necessity,4830248,24,high,4
4,1777,18864,4,Rural,luxury,4831572,3,low,5
1,1453,54368,1,Rural,moderate,4838904,22,high,5
4,1002,45360,4,Rural,luxury,4841708,2,high,5
2,1260,47024,2,Rural,necessity,4878104,24,high,3
4,1025,47016,3,Rural,luxury,4883216,44,high,4
4,1041,31056,3,Rural,necessity,4901888,30,low,2
3,864,145476,3,Urban,moderate,4910944,38,high,2
1,1526,52540,1,Rural,moderate,4922772,2,medium,3
3,857,162680,3,Urban,moderate,4923612,21,medium,5
5,1660,29720,4,Rural,necessity,4928856,33,high,1
4,1752,30100,4,Rural,luxury,4930656,12,high,3
4,732,214648,4,Urban,luxury,4932968,22,medium,3
3,1528,234260,3,Urban,luxury,4942008,44,medium,4
2,1077,126888,1,Urban,luxury,4958512,25,low,2
4,1762,22464,4,Rural,necessity,4973072,49,medium,3
2,1818,151096,1,Urban,moderate,4975980,27,medium,3
5,1323,101180,4,Urban,luxury,4981660,42,high,5
4,1031,37144,3,Rural,necessity,4985224,28,medium,5
5,1796,8048,4,Rural,moderate,4988336,16,low,1
4,1528,206300,4,Urban,luxury,5009352,15,medium,4
1,1263,215024,1,Urban,necessity,5020140,47,high,1
2,2130,53316,2,Rural,necessity,5029156,44,high,5
1,2406,18852,1,Rural,luxury,5036196,3,medium,2
3,977,182444,2,Urban,luxury,5056016,37,high,5
5,970,52832,4,Rural,moderate,5057380,7,low,4
3,904,139436,3,Urban,luxury,5064328,21,low,5
3,2192,42800,2,Rural,luxury,5077044,9,medium,4
3,1672,156516,2,Urban,necessity,5119616,39,medium,4
3,1184,55472,3,Rural,necessity,5131568,18,medium,4
5,1865,16692,4,Rural,luxury,5136220,4,high,4
3,1198,10668,3,Rural,moderate,5162760,25,low,4
1,1989,116832,1,Urban,necessity,5165252,14,low,2
2,2261,17068,1,Rural,moderate,5172944,50,high,1
1,1930,188832,1,Urban,luxury,5176252,9,low,3
3,1601,200060,3,Urban,necessity,5176624,26,medium,1
3,1752,202244,3,Urban,luxury,5205988,2,medium,4
2,1133,87312,2,Urban,necessity,5206336,20,medium,2
2,1419,49916,2,Rural,luxury,5219064,28,low,5
1,1958,141128,1,Urban,moderate,5258652,47,medium,2
1,2019,112980,1,Urban,necessity,5260508,7,high,4
2,1515,9200,1,Rural,moderate,5269704,44,high,2
5,764,160576,4,Urban,moderate,5271480,8,low,2
3,1297,48520,3,Rural,moderate,5300164,47,high,4
5,1847,35844,4,Rural,necessity,5312056,35,high,2
4,1171,13712,4,Rural,necessity,5324724,14,low,3
4,1705,111624,3,Urban,luxury,5373648,17,medium,3
2,1842,223692,2,Urban,moderate,5377152,36,medium,2
4,1656,208492,4,Urban,luxury,5378256,50,medium,5
5,735,93368,4,Urban,moderate,5387068,40,low,4
4,845,228832,4,Urban,necessity,5412944,4,high,3
2,1915,236252,2,Urban,moderate,5415824,2,medium,5
5,1074,31628,4,Rural,necessity,5426872,6,medium,2
4,1217,25800,4,Rural,necessity,5433092,42,low,5
5,760,98592,4,Urban,necessity,5440120,4,medium,1
3,2154,30196,3,Rural,necessity,5447068,29,low,3
3,1805,150600,2,Urban,luxury,5455416,18,high,2
3,1835,80420,2,Urban,luxury,5459368,26,low,4
1,2055,162780,1,Urban,necessity,5466396,44,low,2
3,2176,28236,3,Rural,luxury,5475244,34,low,4
2,1166,126144,2,Urban,moderate,5502712,10,low,2
2,1253,152096,2,Urban,necessity,5565644,36,high,5
1,1433,119612,1,Urban,luxury,5574856,14,high,5
4,2117,11192,4,Rural,moderate,5578864,31,medium,5
1,2688,28144,1,Rural,necessity,5619264,48,high,1
1,1776,16332,1,Rural,moderate,5624468,15,high,4
5,2026,20428,4,Rural,necessity,5627612,8,medium,5
2,2432,13172,2,Rural,luxury,5634888,14,high,1
4,895,181120,4,Urban,luxury,5637204,23,low,4
5,1100,24312,4,Rural,moderate,5655844,40,low,2
5,1697,139596,4,Urban,moderate,5664128,21,medium,1
4,1717,126372,3,Urban,necessity,5666616,16,medium,3
3,1535,47312,2,Rural,moderate,5676200,45,medium,1
2,1992,178228,2,Urban,necessity,5688780,18,low,1
1,2717,32040,1,Rural,necessity,5690592,47,high,4
5,873,122824,4,Urban,moderate,5709500,24,low,2
4,1004,138652,4,Urban,necessity,5729232,26,medium,3
3,2469,49572,2,Rural,necessity,5752064,25,high,5
3,2401,24040,2,Rural,necessity,5760988,45,high,5
5,1714,167016,4,Urban,luxury,5763100,41,low,1
3,2352,7852,3,Rural,moderate,5776308,29,medium,4
5,2199,43536,4,Rural,moderate,5786512,15,low,4
5,1228,51492,4,Rural,luxury,5787816,45,high,5
1,2701,46632,1,Rural,luxury,5791564,1,low,3
3,1928,147868,3,Urban,necessity,5798580,25,low,2
2,1327,112500,2,Urban,luxury,5798852,7,medium,3
4,2375,44424,3,Rural,necessity,5804480,9,medium,2
1,1754,12176,1,Rural,luxury,5810692,24,high,5
5,862,223360,4,Urban,luxury,5814212,1,low,2
5,2104,11536,4,Rural,luxury,5817636,44,low,4
1,2824,25740,1,Rural,moderate,5819620,8,low,1
2,1350,179804,1,Urban,necessity,5845732,24,high,1
3,1138,189696,3,Urban,moderate,5867640,11,high,5
1,2365,225948,1,Urban,necessity,5870364,17,medium,4
5,2183,33520,4,Rural,moderate,5933328,8,medium,3
1,2871,28028,1,Rural,moderate,5946900,35,medium,4
5,1691,232788,4,Urban,necessity,5956148,35,low,1
3,1993,141396,3,Urban,moderate,5956304,33,low,1
4,2435,21020,3,Rural,moderate,6014880,5,medium,4
2,2743,55188,2,Rural,luxury,6050696,42,low,4
2,1750,31576,1,Rural,luxury,6103472,39,medium,1
3,2650,31120,3,Rural,moderate,6107556,41,high,3
3,2494,18440,3,Rural,luxury,6110252,28,medium,5
4,1152,150696,3,Urban,moderate,6127456,7,high,5
3,2105,177452,3,Urban,necessity,6127924,9,low,4
2,2843,25792,2,Rural,necessity,6148672,8,medium,5
3,2680,56124,3,Rural,necessity,6186092,12,low,1
3,2704,10196,3,Rural,luxury,6188412,34,high,1
5,1394,5624,4,Rural,luxury,6230856,33,high,4
4,2609,5952,3,Rural,luxury,6233476,48,high,4
2,2886,52160,1,Rural,moderate,6245608,23,low,4
2,2763,31172,2,Rural,moderate,6274972,24,low,3
5,2476,25120,4,Rural,moderate,6306756,37,low,5
2,2324,101780,2,Urban,luxury,6311680,35,low,4
3,2765,23192,3,Rural,luxury,6334348,44,high,2
2,2400,87876,2,Urban,luxury,6336748,40,high,2
5,1328,36848,4,Rural,moderate,6350044,22,medium,1
1,1644,167216,1,Urban,necessity,6351424,27,medium,5
5,2356,52228,4,Rural,moderate,6353812,35,low,4
5,1428,24188,4,Rural,moderate,6358756,1,high,2
4,2560,53516,4,Rural,moderate,6373304,35,high,5
2,1858,50172,2,Rural,necessity,6379768,37,high,1
1,2428,111392,1,Urban,moderate,6380880,47,medium,3
2,2775,35032,2,Rural,luxury,6383996,14,medium,5
3,1655,23040,3,Rural,necessity,6386900,3,high,5
3,1709,53124,3,Rural,necessity,6396660,1,high,3
5,1971,231784,4,Urban,necessity,6407992,5,high,5
4,2081,212248,4,Urban,luxury,6409892,26,medium,1
4,2139,187936,4,Urban,luxury,6470144,14,high,1
5,1428,54444,4,Rural,necessity,6484184,39,high,3
2,2328,159900,2,Urban,necessity,6487616,27,low,4
4,1184,232004,4,Urban,luxury,6489924,9,low,2
3,2862,37812,3,Rural,luxury,6491680,15,medium,4
1,2494,186464,1,Urban,moderate,6499688,15,high,5
4,2637,48552,3,Rural,moderate,6529152,26,high,2
4,2535,26772,4,Rural,necessity,6533940,42,low,3
1,1640,92080,1,Urban,luxury,6537700,13,medium,3
5,2458,21724,4,Rural,moderate,6538924,32,low,2
4,1562,23580,4,Rural,necessity,6612828,39,low,1
2,1884,40824,1,Rural,moderate,6616468,49,low,2
3,1376,229244,3,Urban,luxury,6621840,32,low,5
4,2594,33244,4,Rural,necessity,6621996,4,high,1
3,2761,44240,3,Rural,necessity,6632912,30,high,3
4,2183,150408,4,Urban,luxury,6641556,37,low,2
4,2633,46796,4,Rural,necessity,6645264,23,medium,4
5,1095,212156,4,Urban,luxury,6647260,39,medium,4
3,2338,84544,3,Urban,luxury,6649776,45,medium,5
1,2656,140608,1,Urban,moderate,6666624,15,medium,4
5,2687,41300,4,Rural,luxury,6674156,43,low,2
5,2690,39200,4,Rural,necessity,6689408,29,high,2
1,2136,27108,1,Rural,necessity,6692056,36,medium,4
2,2442,220532,2,Urban,luxury,6708424,13,low,2
2,2562,97880,1,Urban,necessity,6713192,32,medium,5
1,2693,197028,1,Urban,necessity,6720348,7,medium,1
4,1581,56712,4,Rural,moderate,6724832,22,low,5
1,2040,48324,1,Rural,luxury,6740304,28,high,5
4,1189,171444,4,Urban,necessity,6751540,2,high,2
2,2539,212568,1,Urban,moderate,6785188,42,low,1
5,2570,4652,4,Rural,moderate,6786732,45,high,2
2,2642,202828,1,Urban,necessity,6796184,6,low,3
3,2393,89412,3,Urban,necessity,6800800,28,low,2
3,1401,82100,3,Urban,moderate,6806284,28,low,2
5,2173,202092,4,Urban,necessity,6812332,44,high,2
5,1549,13972,4,Rural,moderate,6831668,44,low,1
2,1973,48952,1,Rural,moderate,6839096,20,medium,2
1,2658,149736,1,Urban,moderate,6874356,30,high,1
3,1513,166368,2,Urban,necessity,6890216,11,high,4
2,2642,196964,2,Urban,luxury,6910356,28,high,3
4,2302,213356,3,Urban,moderate,6930048,25,high,1
4,2274,238740,4,Urban,necessity,6931640,39,medium,4
1,2119,38936,1,Rural,necessity,6941648,33,high,1
5,1579,17496,4,Rural,necessity,6996112,1,high,1
1,1756,158492,1,Urban,moderate,7013432,27,low,3
3,2521,131212,3,Urban,moderate,7018952,13,high,5
4,2255,145236,4,Urban,luxury,7024848,41,medium,5
1,1746,115784,1,Urban,necessity,7039896,3,medium,1
4,1752,21432,4,Rural,necessity,7045064,39,medium,2
1,1748,183568,1,Urban,moderate,7058772,6,medium,4
1,2233,37740,1,Rural,luxury,7076404,8,high,2
4,2310,178312,3,Urban,necessity,7076640,27,high,2
5,1223,128012,4,Urban,necessity,7084072,9,medium,1
5,2865,53320,4,Rural,necessity,7102992,37,medium,1
3,2497,81124,3,Urban,necessity,7109176,33,high,1
3,1960,32908,2,Rural,necessity,7141780,42,medium,1
5,1208,119528,4,Urban,luxury,7148960,44,low,5
3,2594,104616,3,Urban,moderate,7185552,24,medium,1
1,1871,91232,1,Urban,luxury,7193932,15,medium,5
4,2363,136540,3,Urban,necessity,7229080,32,low,5
2,2158,59540,1,Rural,necessity,7243624,32,low,1
5,1314,210224,4,Urban,necessity,7243824,24,high,3
1,1896,152352,1,Urban,necessity,7246032,41,high,4
5,1667,15088,4,Rural,moderate,7266000,49,low,2
4,1853,31148,3,Rural,luxury,7269848,49,low,5
2,2129,54744,2,Rural,moderate,7326264,12,high,4
4,2417,186892,3,Urban,necessity,7338184,39,medium,3
4,1933,26624,3,Rural,moderate,7343536,2,low,2
4,1853,25888,3,Rural,necessity,7389100,3,high,2
3,2594,120900,2,Urban,luxury,7403484,49,medium,5
3,2731,154556,2,Urban,moderate,7405632,37,low,1
5,2357,116440,4,Urban,luxury,7490600,49,medium,3
3,2042,39708,3,Rural,luxury,7495008,17,high,5
1,2938,122896,1,Urban,luxury,7510456,49,low,3
3,2724,178296,2,Urban,moderate,7525704,2,medium,1
5,1829,30408,4,Rural,luxury,7552016,2,low,1
2,2897,95048,1,Urban,moderate,7560132,28,medium,5
2,1812,193520,1,Urban,necessity,7583728,23,high,1
5,2455,232024,4,Urban,luxury,7599312,37,high,4
3,1645,116068,2,Urban,moderate,7615276,32,low,2
3,2074,15408,2,Rural,necessity,7679212,33,medium,5
2,2182,57868,2,Rural,luxury,7682076,1,low,3
4,2576,189504,3,Urban,luxury,7682864,19,low,4
2,1888,108856,1,Urban,necessity,7687112,2,medium,5
2,2992,195324,1,Urban,moderate,7711056,44,medium,1
5,2552,158304,4,Urban,moderate,7718632,26,medium,1
4,1969,5928,3,Rural,luxury,7729132,32,high,1
1,2387,37032,1,Rural,necessity,7742108,6,low,1
4,2720,98812,3,Urban,necessity,7761112,32,low,3
4,1492,144004,4,Urban,moderate,7791408,4,high,4
2,2972,86240,1,Urban,luxury,7797888,11,medium,2
2,2897,120724,2,Urban,luxury,7804084,17,high,3
4,2049,26156,3,Rural,luxury,7818680,38,high,3
5,2443,88452,4,Urban,necessity,7823228,24,high,2
5,1450,141592,4,Urban,necessity,7826116,5,low,2
2,1916,216628,1,Urban,moderate,7878560,34,high,1
2,2408,47608,1,Rural,luxury,7900680,6,low,3
5,2658,198180,4,Urban,luxury,7962452,22,low,5
4,2628,148700,4,Urban,moderate,8033448,11,low,2
4,1620,175428,4,Urban,necessity,8038000,48,medium,2
4,1715,181164,3,Urban,necessity,8111440,16,low,4
5,2031,4592,4,Rural,moderate,8118224,33,low,5
4,2796,184572,3,Urban,moderate,8150880,9,medium,5
1,2575,54972,1,Rural,luxury,8152852,6,low,2
2,1945,136796,2,Urban,luxury,8167836,16,high,1
1,2070,102896,1,Urban,luxury,8171788,29,high,4
4,2169,5676,3,Rural,moderate,8173828,3,low,5
1,2133,134028,1,Urban,luxury,8190476,20,medium,2
5,2625,121444,4,Urban,luxury,8203528,36,high,5
1,2600,13888,1,Rural,necessity,8207208,19,medium,4
1,2656,43172,1,Rural,moderate,8259976,26,medium,4
1,2605,23528,1,Rural,necessity,8283540,3,high,3
5,1563,91680,4,Urban,necessity,8294524,19,medium,2
4,1669,165152,3,Urban,necessity,8294700,20,high,4
2,1964,224884,2,Urban,luxury,8326180,32,medium,3
3,1858,125700,2,Urban,luxury,8349004,7,high,3
4,1724,186820,3,Urban,moderate,8358168,41,low,5
3,2945,207532,3,Urban,necessity,8374764,33,high,5
5,2073,32180,4,Rural,moderate,8440956,40,high,3
3,2370,56940,2,Rural,luxury,8443992,39,high,5
2,2041,134448,2,Urban,moderate,8467804,18,high,4
4,2949,119388,4,Urban,necessity,8567624,40,medium,1
2,2548,16160,1,Rural,necessity,8579164,1,low,4
4,2323,6520,3,Rural,luxury,8583496,11,high,3
5,2775,227508,4,Urban,necessity,8608108,28,medium,3
5,1641,206340,4,Urban,luxury,8623372,25,low,4
4,2351,6756,3,Rural,necessity,8644420,50,low,5
4,2336,6644,3,Rural,necessity,8651668,23,low,5
2,2581,56488,2,Rural,necessity,8667972,31,low,3
4,2355,44580,3,Rural,moderate,8682184,30,high,2
1,2253,196036,1,Urban,moderate,8738300,42,high,5
4,2992,123264,3,Urban,luxury,8738808,35,medium,4
1,2786,46104,1,Rural,moderate,8750920,7,medium,5
4,2363,46996,3,Rural,necessity,8854432,16,medium,4
4,1890,209652,3,Urban,luxury,8880272,26,low,3
5,2910,153760,4,Urban,luxury,8886920,48,low,5
3,2536,36908,3,Rural,moderate,8979736,49,high,4
1,2327,186740,1,Urban,luxury,8993768,2,low,3
1,2893,19496,1,Rural,necessity,9001244,1,low,2
5,2215,55776,4,Rural,necessity,9026060,48,low,4
1,2310,168060,1,Urban,moderate,9074668,12,medium,2
5,2334,44804,4,Rural,moderate,9079548,5,medium,2
2,2272,187152,1,Urban,necessity,9114524,37,high,1
2,2168,106252,2,Urban,luxury,9118720,32,low,5
5,1819,124332,4,Urban,necessity,9187612,9,low,4
4,2468,46372,4,Rural,necessity,9191604,41,high,2
2,2319,88200,1,Urban,necessity,9208032,35,low,1
5,1812,116800,4,Urban,moderate,9294036,19,low,3
3,2616,37732,3,Rural,moderate,9365852,48,medium,4
1,2496,182236,1,Urban,necessity,9382164,16,high,2
3,2146,238992,3,Urban,luxury,9396968,3,high,5
3,2135,93720,3,Urban,luxury,9401904,20,high,1
5,2381,36936,4,Rural,moderate,9406828,24,high,2
5,1824,155400,4,Urban,necessity,9413368,33,medium,5
4,1984,146644,4,Urban,moderate,9449276,24,medium,2
5,1872,105104,4,Urban,moderate,9570516,11,low,4
1,2517,102504,1,Urban,necessity,9586508,49,low,4
3,2673,11216,3,Rural,moderate,9586752,8,low,4
5,2500,31228,4,Rural,moderate,9595676,36,low,1
2,2388,82476,1,Urban,luxury,9660728,38,medium,4
4,2146,235400,3,Urban,necessity,9734036,40,high,5
3,2720,28048,3,Rural,moderate,9788088,20,medium,2
4,2651,40044,4,Rural,moderate,9790972,35,low,3
1,2572,191844,1,Urban,necessity,9857444,48,medium,5
2,2948,7076,2,Rural,necessity,9863548,25,high,5
2,2484,208928,2,Urban,necessity,9900324,35,high,4
2,2475,207560,1,Urban,necessity,9908472,25,medium,1
3,2780,47412,3,Rural,moderate,9974020,29,medium,2
3,2406,213280,2,Urban,moderate,9988996,18,medium,1
3,2873,54212,3,Rural,luxury,10034056,46,low,2
4,2180,201792,3,Urban,luxury,10047148,18,medium,2
2,2446,227064,2,Urban,necessity,10122072,2,medium,1
3,2348,149928,2,Urban,necessity,10131396,35,medium,5
1,2719,196208,1,Urban,luxury,10194840,16,high,2
4,2219,141004,3,Urban,luxury,10202344,41,high,1
2,2470,236120,2,Urban,luxury,10212988,36,low,2
1,2652,108236,1,Urban,necessity,10215820,33,low,3
2,2489,153244,2,Urban,moderate,10219888,4,high,5
5,2103,145620,4,Urban,necessity,10283840,33,high,4
3,2365,236248,3,Urban,moderate,10294236,14,high,2
5,2636,57640,4,Rural,necessity,10303236,21,medium,3
3,2403,159580,2,Urban,moderate,10337552,48,medium,4
4,2895,24972,3,Rural,luxury,10340536,20,high,4
3,2526,131060,2,Urban,luxury,10456100,8,medium,2
1,2806,126244,1,Urban,necessity,10615188,7,medium,1
4,2997,43600,4,Rural,moderate,10859500,3,low,2
2,2714,109148,1,Urban,luxury,10880504,17,high,3
2,2692,83872,2,Urban,necessity,10998540,33,high,4
4,2390,115620,4,Urban,moderate,11060916,48,medium,2
1,2943,207560,1,Urban,necessity,11309896,12,high,1
2,2849,202636,1,Urban,luxury,11317428,22,low,2
3,2665,137152,3,Urban,necessity,11333260,22,low,5
4,2581,188328,3,Urban,luxury,11336376,46,low,1
2,2876,223936,2,Urban,moderate,11346012,30,high,3
4,2555,203244,3,Urban,necessity,11347212,38,high,4
2,2934,142340,1,Urban,luxury,11406908,38,high,2
5,2444,219328,4,Urban,luxury,11510484,45,high,1
4,2622,168168,3,Urban,necessity,11671152,8,high,5
5,2548,151112,4,Urban,moderate,11678568,27,low,1
5,2469,218124,4,Urban,necessity,11708864,27,medium,5
5,2538,135040,4,Urban,necessity,11734632,34,low,3
4,2724,85740,3,Urban,luxury,11834392,21,high,4
4,2645,145340,4,Urban,luxury,11972440,30,low,3
3,2982,217800,2,Urban,moderate,12000000,33,high,2
5,2692,126612,4,Urban,necessity,12000000,28,high,1
5,2817,173996,4,Urban,necessity,12000000,47,low,5
3,2969,153236,3,Urban,moderate,12000000,33,high,5
5,2836,106552,4,Urban,necessity,12000000,5,medium,1
4,629,134676,4,Urban,moderate,4800000,48,high,1
2,594,40368,2,Rural,moderate,4800000,19,medium,2
2,1293,29424,2,Rural,necessity,4800000,4,medium,3
4,510,176356,3,Urban,necessity,4800000,35,high,5
5,1211,6684,4,Rural,necessity,4800000,49,low,2
1,1314,38624,1,Rural,necessity,4800000,17,medium,3
3,1484,13420,3,Rural,moderate,4800000,44,low,2
1,855,224236,1,Urban,moderate,4800000,28,medium,5
1,626,148348,1,Urban,necessity,4800000,30,high,1
5,1103,38948,4,Rural,luxury,4800000,29,high,1
1,550,52108,1,Rural,moderate,4800000,46,medium,3
1,2292,23356,1,Rural,moderate,4800000,6,high,4
4,1831,26796,4,Rural,luxury,4806796,35,medium,3
3,1153,14120,3,Rural,necessity,4809344,41,high,4
4,1023,41696,3,Rural,necessity,4830248,37,low,2
4,1777,18864,4,Rural,luxury,4831572,24,high,2
1,1453,54368,1,Rural,moderate,4838904,29,low,5
4,1002,45360,4,Rural,necessity,4841708,49,high,4
2,1260,47024,2,Rural,necessity,4878104,46,low,5
4,1025,47016,3,Rural,luxury,4883216,31,high,1
4,1041,31056,3,Rural,luxury,4901888,35,low,4
3,864,145476,3,Urban,moderate,4910944,33,medium,3
1,1526,52540,1,Rural,moderate,4922772,21,medium,1
3,857,162680,3,Urban,moderate,4923612,32,low,1
5,1660,29720,4,Rural,moderate,4928856,23,high,3
4,1752,30100,4,Rural,moderate,4930656,33,low,1
4,732,214648,4,Urban,moderate,4932968,3,high,4
3,1528,234260,3,Urban,moderate,4942008,18,medium,5
2,1077,126888,1,Urban,necessity,4958512,25,high,1
4,1762,22464,4,Rural,necessity,4973072,42,medium,4
2,1818,151096,1,Urban,moderate,4975980,31,high,2
5,1323,101180,4,Urban,luxury,4981660,3,high,4
4,1031,37144,3,Rural,luxury,4985224,40,high,5
5,1796,8048,4,Rural,luxury,4988336,46,low,4
4,1528,206300,4,Urban,necessity,5009352,24,low,3
1,1263,215024,1,Urban,luxury,5020140,50,medium,5
2,2130,53316,2,Rural,moderate,5029156,32,medium,2
1,2406,18852,1,Rural,moderate,5036196,47,low,3
3,977,182444,2,Urban,luxury,5056016,22,medium,4
5,970,52832,4,Rural,moderate,5057380,23,low,5
3,904,139436,3,Urban,moderate,5064328,2,high,2
3,2192,42800,2,Rural,moderate,5077044,27,medium,3
3,1672,156516,2,Urban,moderate,5119616,42,medium,2
3,1184,55472,3,Rural,luxury,5131568,2,low,4
5,1865,16692,4,Rural,moderate,5136220,26,medium,2
3,1198,10668,3,Rural,necessity,5162760,17,medium,1
1,1989,116832,1,Urban,necessity,5165252,40,high,3
2,2261,17068,1,Rural,luxury,5172944,33,medium,2
1,1930,188832,1,Urban,necessity,5176252,9,high,4
3,1601,200060,3,Urban,moderate,5176624,43,low,4
3,1752,202244,3,Urban,luxury,5205988,48,medium,2
2,1133,87312,2,Urban,necessity,5206336,39,high,4
2,1419,49916,2,Rural,luxury,5219064,29,low,5
1,1958,141128,1,Urban,necessity,5258652,42,medium,5
1,2019,112980,1,Urban,necessity,5260508,26,low,5
2,1515,9200,1,Rural,luxury,5269704,35,medium,1
5,764,160576,4,Urban,luxury,5271480,50,low,2
3,1297,48520,3,Rural,luxury,5300164,25,low,1
5,1847,35844,4,Rural,necessity,5312056,24,high,4
4,1171,13712,4,Rural,moderate,5324724,13,low,1
4,1705,111624,3,Urban,luxury,5373648,7,medium,4
2,1842,223692,2,Urban,moderate,5377152,36,medium,4
4,1656,208492,4,Urban,moderate,5378256,45,high,3
5,735,93368,4,Urban,luxury,5387068,20,medium,5
4,845,228832,4,Urban,luxury,5412944,1,medium,4
2,1915,236252,2,Urban,luxury,5415824,8,medium,3
5,1074,31628,4,Rural,luxury,5426872,46,low,5
4,1217,25800,4,Rural,luxury,5433092,16,low,4
5,760,98592,4,Urban,moderate,5440120,14,medium,4
3,2154,30196,3,Rural,luxury,5447068,12,high,1
3,1805,150600,2,Urban,luxury,5455416,23,low,1
3,1835,80420,2,Urban,necessity,5459368,15,high,5
1,2055,162780,1,Urban,moderate,5466396,28,medium,4
3,2176,28236,3,Rural,necessity,5475244,34,medium,2
2,1166,126144,2,Urban,moderate,5502712,2,low,1
2,1253,152096,2,Urban,luxury,5565644,32,medium,5
1,1433,119612,1,Urban,luxury,5574856,23,low,4
4,2117,11192,4,Rural,moderate,5578864,22,medium,4
1,2688,28144,1,Rural,luxury,5619264,25,medium,2
1,1776,16332,1,Rural,moderate,5624468,22,low,5
5,2026,20428,4,Rural,necessity,5627612,22,low,4
2,2432,13172,2,Rural,moderate,5634888,49,low,1
4,895,181120,4,Urban,moderate,5637204,42,medium,2
5,1100,24312,4,Rural,necessity,5655844,6,medium,5
5,1697,139596,4,Urban,moderate,5664128,15,high,2
4,1717,126372,3,Urban,moderate,5666616,43,low,1
3,1535,47312,2,Rural,necessity,5676200,37,medium,5
2,1992,178228,2,Urban,luxury,5688780,33,medium,2
1,2717,32040,1,Rural,luxury,5690592,8,low,3
5,873,122824,4,Urban,moderate,5709500,44,high,1
4,1004,138652,4,Urban,moderate,5729232,44,low,1
3,2469,49572,2,Rural,luxury,5752064,5,high,1
3,2401,24040,2,Rural,luxury,5760988,39,medium,3
5,1714,167016,4,Urban,necessity,5763100,4,high,3
3,2352,7852,3,Rural,moderate,5776308,6,medium,4
5,2199,43536,4,Rural,moderate,5786512,45,low,2
5,1228,51492,4,Rural,necessity,5787816,32,low,4
1,2701,46632,1,Rural,luxury,5791564,30,low,2
3,1928,147868,3,Urban,luxury,5798580,47,high,3
2,1327,112500,2,Urban,necessity,5798852,35,medium,3
4,2375,44424,3,Rural,necessity,5804480,40,low,4
1,1754,12176,1,Rural,luxury,5810692,16,low,5
5,862,223360,4,Urban,moderate,5814212,13,medium,4
5,2104,11536,4,Rural,necessity,5817636,50,low,2
1,2824,25740,1,Rural,luxury,5819620,42,medium,4
2,1350,179804,1,Urban,necessity,5845732,30,medium,1
3,1138,189696,3,Urban,moderate,5867640,19,medium,2
1,2365,225948,1,Urban,luxury,5870364,17,medium,2
5,2183,33520,4,Rural,necessity,5933328,19,medium,5
1,2871,28028,1,Rural,necessity,5946900,28,high,3
5,1691,232788,4,Urban,necessity,5956148,26,low,2
3,1993,141396,3,Urban,moderate,5956304,37,high,3
4,2435,21020,3,Rural,moderate,6014880,26,low,4
2,2743,55188,2,Rural,necessity,6050696,23,high,1
2,1750,31576,1,Rural,luxury,6103472,9,medium,5
3,2650,31120,3,Rural,necessity,6107556,12,low,3
3,2494,18440,3,Rural,necessity,6110252,1,low,2
4,1152,150696,3,Urban,necessity,6127456,1,high,3
3,2105,177452,3,Urban,luxury,6127924,47,high,2
2,2843,25792,2,Rural,moderate,6148672,34,low,3
3,2680,56124,3,Rural,moderate,6186092,32,high,2
3,2704,10196,3,Rural,necessity,6188412,48,high,4
5,1394,5624,4,Rural,luxury,6230856,25,high,2
4,2609,5952,3,Rural,moderate,6233476,40,medium,2
2,2886,52160,1,Rural,necessity,6245608,45,medium,1
2,2763,31172,2,Rural,luxury,6274972,1,high,2
5,2476,25120,4,Rural,moderate,6306756,16,high,1
2,2324,101780,2,Urban,necessity,6311680,39,medium,5
3,2765,23192,3,Rural,luxury,6334348,5,medium,1
2,2400,87876,2,Urban,luxury,6336748,22,low,4
5,1328,36848,4,Rural,moderate,6350044,29,low,1
1,1644,167216,1,Urban,necessity,6351424,3,medium,5
5,2356,52228,4,Rural,luxury,6353812,12,high,4
5,1428,24188,4,Rural,luxury,6358756,26,high,3
4,2560,53516,4,Rural,necessity,6373304,16,high,3
2,1858,50172,2,Rural,necessity,6379768,37,high,1
1,2428,111392,1,Urban,moderate,6380880,22,low,1
2,2775,35032,2,Rural,necessity,6383996,29,medium,5
3,1655,23040,3,Rural,necessity,6386900,14,high,5
3,1709,53124,3,Rural,luxury,6396660,28,low,2
5,1971,231784,4,Urban,luxury,6407992,5,high,5
4,2081,212248,4,Urban,necessity,6409892,47,medium,2
4,2139,187936,4,Urban,necessity,6470144,49,low,4
5,1428,54444,4,Rural,necessity,6484184,30,medium,1
2,2328,159900,2,Urban,necessity,6487616,46,medium,4
4,1184,232004,4,Urban,moderate,6489924,5,low,5
3,2862,37812,3,Rural,moderate,6491680,12,low,4
1,2494,186464,1,Urban,moderate,6499688,16,low,4
4,2637,48552,3,Rural,moderate,6529152,26,low,4
4,2535,26772,4,Rural,luxury,6533940,26,low,5
1,1640,92080,1,Urban,luxury,6537700,48,low,4
5,2458,21724,4,Rural,moderate,6538924,21,low,2
4,1562,23580,4,Rural,moderate,6612828,39,high,5
2,1884,40824,1,Rural,luxury,6616468,36,medium,4
3,1376,229244,3,Urban,moderate,6621840,33,low,5
4,2594,33244,4,Rural,necessity,6621996,30,high,3
3,2761,44240,3,Rural,luxury,6632912,37,high,2
4,2183,150408,4,Urban,necessity,6641556,23,high,4
4,2633,46796,4,Rural,luxury,6645264,10,medium,3
5,1095,212156,4,Urban,moderate,6647260,5,low,3
3,2338,84544,3,Urban,moderate,6649776,36,high,5
1,2656,140608,1,Urban,luxury,6666624,34,medium,3
5,2687,41300,4,Rural,luxury,6674156,31,medium,2
5,2690,39200,4,Rural,luxury,6689408,10,medium,2
1,2136,27108,1,Rural,luxury,6692056,19,high,1
2,2442,220532,2,Urban,moderate,6708424,32,low,2
2,2562,97880,1,Urban,moderate,6713192,1,high,3
1,2693,197028,1,Urban,luxury,6720348,5,high,2
4,1581,56712,4,Rural,moderate,6724832,45,low,5
1,2040,48324,1,Rural,luxury,6740304,4,low,1
4,1189,171444,4,Urban,luxury,6751540,16,low,3
2,2539,212568,1,Urban,moderate,6785188,24,medium,1
5,2570,4652,4,Rural,moderate,6786732,16,low,3
2,2642,202828,1,Urban,necessity,6796184,2,high,5
3,2393,89412,3,Urban,moderate,6800800,49,low,1
3,1401,82100,3,Urban,moderate,6806284,28,high,4
5,2173,202092,4,Urban,necessity,6812332,32,medium,3
5,1549,13972,4,Rural,moderate,6831668,27,high,4
2,1973,48952,1,Rural,moderate,6839096,20,high,1
1,2658,149736,1,Urban,moderate,6874356,24,low,4
3,1513,166368,2,Urban,necessity,6890216,12,low,4
2,2642,196964,2,Urban,necessity,6910356,50,high,1
4,2302,213356,3,Urban,luxury,6930048,35,low,5
4,2274,238740,4,Urban,necessity,6931640,33,medium,4
1,2119,38936,1,Rural,luxury,6941648,33,medium,4
5,1579,17496,4,Rural,necessity,6996112,43,low,5
1,1756,158492,1,Urban,moderate,7013432,37,medium,4
3,2521,131212,3,Urban,necessity,7018952,12,low,4
4,2255,145236,4,Urban,moderate,7024848,3,high,4
1,1746,115784,1,Urban,necessity,7039896,1,high,2
4,1752,21432,4,Rural,moderate,7045064,33,medium,5
1,1748,183568,1,Urban,luxury,7058772,40,low,4
1,2233,37740,1,Rural,moderate,7076404,10,low,5
4,2310,178312,3,Urban,necessity,7076640,43,medium,3
5,1223,128012,4,Urban,luxury,7084072,44,high,3
5,2865,53320,4,Rural,luxury,7102992,29,medium,4
3,2497,81124,3,Urban,necessity,7109176,13,high,5
3,1960,32908,2,Rural,moderate,7141780,12,low,5
5,1208,119528,4,Urban,luxury,7148960,31,high,5
3,2594,104616,3,Urban,moderate,7185552,46,medium,2
1,1871,91232,1,Urban,necessity,7193932,2,low,3
4,2363,136540,3,Urban,necessity,7229080,50,medium,5
2,2158,59540,1,Rural,necessity,7243624,35,medium,5
5,1314,210224,4,Urban,necessity,7243824,23,high,2
1,1896,152352,1,Urban,luxury,7246032,17,medium,2
5,1667,15088,4,Rural,luxury,7266000,26,high,5
4,1853,31148,3,Rural,moderate,7269848,8,low,1
2,2129,54744,2,Rural,necessity,7326264,29,high,5
4,2417,186892,3,Urban,necessity,7338184,26,low,5
4,1933,26624,3,Rural,luxury,7343536,10,high,2
4,1853,25888,3,Rural,luxury,7389100,26,medium,2
3,2594,120900,2,Urban,moderate,7403484,34,high,5
3,2731,154556,2,Urban,luxury,7405632,41,high,5
5,2357,116440,4,Urban,moderate,7490600,7,low,5
3,2042,39708,3,Rural,moderate,7495008,4,medium,2
1,2938,122896,1,Urban,moderate,7510456,50,high,5
3,2724,178296,2,Urban,moderate,7525704,45,medium,5
5,1829,30408,4,Rural,luxury,7552016,11,high,4
2,2897,95048,1,Urban,moderate,7560132,29,high,1
2,1812,193520,1,Urban,moderate,7583728,36,medium,3
5,2455,232024,4,Urban,luxury,7599312,25,high,1
3,1645,116068,2,Urban,luxury,7615276,21,medium,4
3,2074,15408,2,Rural,necessity,7679212,36,high,3
2,2182,57868,2,Rural,luxury,7682076,10,low,5
4,2576,189504,3,Urban,necessity,7682864,37,medium,4
2,1888,108856,1,Urban,moderate,7687112,9,high,5
2,2992,195324,1,Urban,luxury,7711056,24,high,2
5,2552,158304,4,Urban,luxury,7718632,35,low,4
4,1969,5928,3,Rural,luxury,7729132,49,medium,2
1,2387,37032,1,Rural,moderate,7742108,35,high,4
4,2720,98812,3,Urban,necessity,7761112,48,low,4
4,1492,144004,4,Urban,luxury,7791408,36,high,2
2,2972,86240,1,Urban,luxury,7797888,18,medium,3
2,2897,120724,2,Urban,luxury,7804084,49,high,1
4,2049,26156,3,Rural,luxury,7818680,39,high,5
5,2443,88452,4,Urban,necessity,7823228,32,high,4
5,1450,141592,4,Urban,necessity,7826116,24,high,5
2,1916,216628,1,Urban,moderate,7878560,23,low,2
2,2408,47608,1,Rural,moderate,7900680,32,low,5
5,2658,198180,4,Urban,necessity,7962452,37,medium,2
4,2628,148700,4,Urban,moderate,8033448,12,low,5
4,1620,175428,4,Urban,moderate,8038000,49,low,1
4,1715,181164,3,Urban,moderate,8111440,13,medium,1
5,2031,4592,4,Rural,luxury,8118224,23,low,1
4,2796,184572,3,Urban,necessity,8150880,25,low,1
1,2575,54972,1,Rural,necessity,8152852,35,medium,1
2,1945,136796,2,Urban,moderate,8167836,41,medium,1
1,2070,102896,1,Urban,necessity,8171788,30,medium,2
4,2169,5676,3,Rural,moderate,8173828,17,high,4
1,2133,134028,1,Urban,moderate,8190476,49,high,5
5,2625,121444,4,Urban,luxury,8203528,20,medium,1
1,2600,13888,1,Rural,necessity,8207208,48,medium,2
1,2656,43172,1,Rural,moderate,8259976,25,medium,2
1,2605,23528,1,Rural,moderate,8283540,22,high,2
5,1563,91680,4,Urban,moderate,8294524,13,high,4
4,1669,165152,3,Urban,moderate,8294700,19,low,5
2,1964,224884,2,Urban,luxury,8326180,49,low,4
3,1858,125700,2,Urban,moderate,8349004,36,medium,3
4,1724,186820,3,Urban,necessity,8358168,12,high,2
3,2945,207532,3,Urban,necessity,8374764,41,high,3
5,2073,32180,4,Rural,moderate,8440956,19,high,1
3,2370,56940,2,Rural,luxury,8443992,12,medium,1
2,2041,134448,2,Urban,luxury,8467804,9,low,4
4,2949,119388,4,Urban,moderate,8567624,7,medium,5
2,2548,16160,1,Rural,luxury,8579164,28,low,3
4,2323,6520,3,Rural,moderate,8583496,14,low,5
5,2775,227508,4,Urban,luxury,8608108,31,medium,4
5,1641,206340,4,Urban,moderate,8623372,19,low,1
4,2351,6756,3,Rural,necessity,8644420,47,low,5
4,2336,6644,3,Rural,necessity,8651668,16,high,5
2,2581,56488,2,Rural,moderate,8667972,5,low,1
4,2355,44580,3,Rural,luxury,8682184,35,medium,3
1,2253,196036,1,Urban,moderate,8738300,12,medium,1
4,2992,123264,3,Urban,necessity,8738808,25,low,5
1,2786,46104,1,Rural,moderate,8750920,21,high,3
4,2363,46996,3,Rural,moderate,8854432,36,high,3
4,1890,209652,3,Urban,moderate,8880272,23,low,1
5,2910,153760,4,Urban,luxury,8886920,16,low,5
3,2536,36908,3,Rural,necessity,8979736,39,medium,4
1,2327,186740,1,Urban,moderate,8993768,45,low,5
1,2893,19496,1,Rural,luxury,9001244,42,high,2
5,2215,55776,4,Rural,moderate,9026060,39,low,4
1,2310,168060,1,Urban,luxury,9074668,14,medium,3
5,2334,44804,4,Rural,necessity,9079548,31,medium,4
2,2272,187152,1,Urban,necessity,9114524,5,medium,3
2,2168,106252,2,Urban,moderate,9118720,35,medium,3
5,1819,124332,4,Urban,moderate,9187612,23,medium,4
4,2468,46372,4,Rural,necessity,9191604,29,low,3
2,2319,88200,1,Urban,moderate,9208032,43,low,3
5,1812,116800,4,Urban,moderate,9294036,11,low,2
3,2616,37732,3,Rural,luxury,9365852,18,low,5
1,2496,182236,1,Urban,necessity,9382164,47,medium,5
3,2146,238992,3,Urban,necessity,9396968,12,high,2
3,2135,93720,3,Urban,necessity,9401904,9,low,4
5,2381,36936,4,Rural,necessity,9406828,10,high,1
5,1824,155400,4,Urban,luxury,9413368,44,low,1
4,1984,146644,4,Urban,moderate,9449276,17,low,1
5,1872,105104,4,Urban,luxury,9570516,38,high,2
1,2517,102504,1,Urban,necessity,9586508,7,medium,2
3,2673,11216,3,Rural,necessity,9586752,46,low,3
5,2500,31228,4,Rural,necessity,9595676,13,low,1
2,2388,82476,1,Urban,necessity,9660728,40,low,4
4,2146,235400,3,Urban,luxury,9734036,42,high,4
3,2720,28048,3,Rural,necessity,9788088,9,medium,1
4,2651,40044,4,Rural,luxury,9790972,50,high,1
1,2572,191844,1,Urban,necessity,9857444,27,high,1
2,2948,7076,2,Rural,necessity,9863548,2,medium,2
2,2484,208928,2,Urban,necessity,9900324,5,high,2
2,2475,207560,1,Urban,necessity,9908472,29,medium,2
3,2780,47412,3,Rural,luxury,9974020,37,low,5
3,2406,213280,2,Urban,necessity,9988996,38,medium,4
3,2873,54212,3,Rural,moderate,10034056,19,low,4
4,2180,201792,3,Urban,moderate,10047148,8,high,3
2,2446,227064,2,Urban,moderate,10122072,48,high,2
3,2348,149928,2,Urban,moderate,10131396,45,low,5
1,2719,196208,1,Urban,luxury,10194840,1,high,5
4,2219,141004,3,Urban,luxury,10202344,22,medium,4
2,2470,236120,2,Urban,luxury,10212988,17,low,2
1,2652,108236,1,Urban,moderate,10215820,7,high,3
2,2489,153244,2,Urban,luxury,10219888,25,low,2
5,2103,145620,4,Urban,moderate,10283840,45,medium,1
3,2365,236248,3,Urban,moderate,10294236,4,medium,2
5,2636,57640,4,Rural,moderate,10303236,36,high,1
3,2403,159580,2,Urban,necessity,10337552,6,medium,1
4,2895,24972,3,Rural,moderate,10340536,31,low,3
3,2526,131060,2,Urban,moderate,10456100,19,medium,4
1,2806,126244,1,Urban,moderate,10615188,44,low,2
4,2997,43600,4,Rural,luxury,10859500,39,low,1
2,2714,109148,1,Urban,necessity,10880504,27,medium,2
2,2692,83872,2,Urban,luxury,10998540,10,high,4
4,2390,115620,4,Urban,moderate,11060916,26,medium,4
1,2943,207560,1,Urban,luxury,11309896,19,low,5
2,2849,202636,1,Urban,luxury,11317428,39,low,4
3,2665,137152,3,Urban,luxury,11333260,3,medium,3
4,2581,188328,3,Urban,moderate,11336376,45,high,1
2,2876,223936,2,Urban,necessity,11346012,13,high,5
4,2555,203244,3,Urban,moderate,11347212,50,low,3
2,2934,142340,1,Urban,necessity,11406908,28,low,2
5,2444,219328,4,Urban,luxury,11510484,20,high,1
4,2622,168168,3,Urban,luxury,11671152,28,medium,4
5,2548,151112,4,Urban,necessity,11678568,8,low,1
5,2469,218124,4,Urban,luxury,11708864,41,low,2
5,2538,135040,4,Urban,moderate,11734632,39,high,5
4,2724,85740,3,Urban,moderate,11834392,1,medium,5
4,2645,145340,4,Urban,moderate,11972440,3,high,5
3,2982,217800,2,Urban,moderate,12000000,13,medium,4
5,2692,126612,4,Urban,luxury,12000000,28,medium,3
5,2817,173996,4,Urban,luxury,12000000,49,medium,3
3,2969,153236,3,Urban,luxury,12000000,25,low,1
5,2836,106552,4,Urban,moderate,12000000,33,high,4
4,629,134676,4,Urban,luxury,4800000,38,high,5
2,594,40368,2,Rural,moderate,4800000,6,medium,5
2,1293,29424,2,Rural,moderate,4800000,44,low,2
4,510,176356,3,Urban,necessity,4800000,45,low,2
5,1211,6684,4,Rural,moderate,4800000,32,high,5
1,1314,38624,1,Rural,necessity,4800000,45,low,5
3,1484,13420,3,Rural,necessity,4800000,47,low,4
1,855,224236,1,Urban,moderate,4800000,21,medium,3
1,626,148348,1,Urban,moderate,4800000,16,low,2
5,1103,38948,4,Rural,luxury,4800000,21,medium,3
1,550,52108,1,Rural,luxury,4800000,11,high,4
1,2292,23356,1,Rural,luxury,4800000,37,low,5
4,1831,26796,4,Rural,necessity,4806796,36,high,3
3,1153,14120,3,Rural,necessity,4809344,35,high,5
4,1023,41696,3,Rural,moderate,4830248,19,low,5
4,1777,18864,4,Rural,necessity,4831572,20,low,1
1,1453,54368,1,Rural,luxury,4838904,18,high,3
4,1002,45360,4,Rural,luxury,4841708,47,low,3
2,1260,47024,2,Rural,necessity,4878104,41,medium,5
4,1025,47016,3,Rural,moderate,4883216,49,medium,4
4,1041,31056,3,Rural,luxury,4901888,14,low,1
3,864,145476,3,Urban,moderate,4910944,15,high,5
1,1526,52540,1,Rural,necessity,4922772,31,low,2
3,857,162680,3,Urban,moderate,4923612,1,low,2
5,1660,29720,4,Rural,luxury,4928856,3,high,1
4,1752,30100,4,Rural,moderate,4930656,16,high,4
4,732,214648,4,Urban,necessity,4932968,23,medium,5
3,1528,234260,3,Urban,luxury,4942008,11,high,3
2,1077,126888,1,Urban,necessity,4958512,12,medium,1
4,1762,22464,4,Rural,necessity,4973072,10,high,4
2,1818,151096,1,Urban,moderate,4975980,32,low,3
5,1323,101180,4,Urban,necessity,4981660,16,medium,2
4,1031,37144,3,Rural,moderate,4985224,8,medium,2
5,1796,8048,4,Rural,necessity,4988336,38,medium,3
4,1528,206300,4,Urban,necessity,5009352,12,low,1
1,1263,215024,1,Urban,luxury,5020140,24,low,2
2,2130,53316,2,Rural,luxury,5029156,28,low,5
1,2406,18852,1,Rural,moderate,5036196,8,low,3
3,977,182444,2,Urban,necessity,5056016,28,low,3
5,970,52832,4,Rural,necessity,5057380,36,medium,2
3,904,139436,3,Urban,luxury,5064328,26,low,1
3,2192,42800,2,Rural,necessity,5077044,8,medium,5
3,1672,156516,2,Urban,necessity,5119616,50,low,1
3,1184,55472,3,Rural,necessity,5131568,28,high,4
5,1865,16692,4,Rural,necessity,5136220,28,medium,4
3,1198,10668,3,Rural,luxury,5162760,37,high,2
1,1989,116832,1,Urban,luxury,5165252,41,medium,2
2,2261,17068,1,Rural,moderate,5172944,36,high,2
1,1930,188832,1,Urban,necessity,5176252,27,low,4
3,1601,200060,3,Urban,moderate,5176624,17,low,1
3,1752,202244,3,Urban,luxury,5205988,9,low,1
2,1133,87312,2,Urban,luxury,5206336,33,medium,2
2,1419,49916,2,Rural,necessity,5219064,20,high,5
1,1958,141128,1,Urban,necessity,5258652,13,low,1
1,2019,112980,1,Urban,luxury,5260508,28,high,4
2,1515,9200,1,Rural,moderate,5269704,48,high,3
5,764,160576,4,Urban,necessity,5271480,29,low,3
3,1297,48520,3,Rural,moderate,5300164,13,low,3
5,1847,35844,4,Rural,luxury,5312056,46,high,5
4,1171,13712,4,Rural,luxury,5324724,35,low,2
4,1705,111624,3,Urban,moderate,5373648,6,low,4
2,1842,223692,2,Urban,necessity,5377152,18,low,5
4,1656,208492,4,Urban,necessity,5378256,5,medium,4
5,735,93368,4,Urban,luxury,5387068,47,high,4
4,845,228832,4,Urban,necessity,5412944,25,high,2
2,1915,236252,2,Urban,moderate,5415824,2,medium,3
5,1074,31628,4,Rural,luxury,5426872,10,high,2
4,1217,25800,4,Rural,necessity,5433092,30,low,5
5,760,98592,4,Urban,luxury,5440120,50,high,5
3,2154,30196,3,Rural,luxury,5447068,45,low,5
3,1805,150600,2,Urban,necessity,5455416,5,medium,2
3,1835,80420,2,Urban,moderate,5459368,33,low,4
1,2055,162780,1,Urban,necessity,5466396,1,high,4
3,2176,28236,3,Rural,luxury,5475244,18,high,1
2,1166,126144,2,Urban,moderate,5502712,32,high,5
2,1253,152096,2,Urban,luxury,5565644,47,medium,4
1,1433,119612,1,Urban,moderate,5574856,49,medium,1
4,2117,11192,4,Rural,luxury,5578864,11,high,4
1,2688,28144,1,Rural,moderate,5619264,21,low,5
1,1776,16332,1,Rural,necessity,5624468,26,medium,3
5,2026,20428,4,Rural,luxury,5627612,25,high,5
2,2432,13172,2,Rural,moderate,5634888,22,high,2
4,895,181120,4,Urban,luxury,5637204,27,medium,4
5,1100,24312,4,Rural,moderate,5655844,49,medium,4
5,1697,139596,4,Urban,moderate,5664128,13,medium,2
4,1717,126372,3,Urban,necessity,5666616,33,low,2
3,1535,47312,2,Rural,necessity,5676200,34,low,3
2,1992,178228,2,Urban,necessity,5688780,41,high,4
1,2717,32040,1,Rural,necessity,5690592,35,medium,4
5,873,122824,4,Urban,moderate,5709500,1,low,3
4,1004,138652,4,Urban,luxury,5729232,21,medium,1
3,2469,49572,2,Rural,luxury,5752064,48,high,3
3,2401,24040,2,Rural,luxury,5760988,6,low,5
5,1714,167016,4,Urban,necessity,5763100,28,low,4
3,2352,7852,3,Rural,moderate,5776308,17,low,2
5,2199,43536,4,Rural,necessity,5786512,5,high,5
5,1228,51492,4,Rural,necessity,5787816,31,medium,4
1,2701,46632,1,Rural,moderate,5791564,5,low,3
3,1928,147868,3,Urban,moderate,5798580,38,high,5
2,1327,112500,2,Urban,luxury,5798852,3,medium,4
4,2375,44424,3,Rural,luxury,5804480,23,high,1
1,1754,12176,1,Rural,luxury,5810692,37,medium,1
5,862,223360,4,Urban,moderate,5814212,37,high,2
5,2104,11536,4,Rural,necessity,5817636,10,medium,4
1,2824,25740,1,Rural,luxury,5819620,10,low,1
2,1350,179804,1,Urban,luxury,5845732,19,medium,3
3,1138,189696,3,Urban,luxury,5867640,17,high,4
1,2365,225948,1,Urban,moderate,5870364,21,high,3
5,2183,33520,4,Rural,luxury,5933328,14,medium,3
1,2871,28028,1,Rural,necessity,5946900,9,low,1
5,1691,232788,4,Urban,moderate,5956148,46,low,4
3,1993,141396,3,Urban,necessity,5956304,1,medium,5
4,2435,21020,3,Rural,luxury,6014880,45,medium,1
2,2743,55188,2,Rural,luxury,6050696,13,high,1
2,1750,31576,1,Rural,luxury,6103472,4,low,4
3,2650,31120,3,Rural,moderate,6107556,1,medium,4
3,2494,18440,3,Rural,luxury,6110252,49,low,3
4,1152,150696,3,Urban,necessity,6127456,40,medium,4
3,2105,177452,3,Urban,luxury,6127924,32,medium,3
2,2843,25792,2,Rural,moderate,6148672,34,low,1
3,2680,56124,3,Rural,luxury,6186092,28,medium,2
3,2704,10196,3,Rural,luxury,6188412,31,medium,5
5,1394,5624,4,Rural,moderate,6230856,8,high,1
4,2609,5952,3,Rural,luxury,6233476,39,medium,4
2,2886,52160,1,Rural,luxury,6245608,26,medium,5
2,2763,31172,2,Rural,necessity,6274972,34,medium,2
5,2476,25120,4,Rural,moderate,6306756,3,high,2
2,2324,101780,2,Urban,luxury,6311680,50,low,3
3,2765,23192,3,Rural,moderate,6334348,12,high,5
2,2400,87876,2,Urban,luxury,6336748,1,high,3
5,1328,36848,4,Rural,luxury,6350044,44,low,1
1,1644,167216,1,Urban,moderate,6351424,5,high,5
5,2356,52228,4,Rural,moderate,6353812,30,low,1
5,1428,24188,4,Rural,moderate,6358756,30,high,3
4,2560,53516,4,Rural,luxury,6373304,17,low,5
2,1858,50172,2,Rural,moderate,6379768,48,medium,3
1,2428,111392,1,Urban,necessity,6380880,47,high,5
2,2775,35032,2,Rural,moderate,6383996,23,high,3
3,1655,23040,3,Rural,necessity,6386900,15,high,2
3,1709,53124,3,Rural,luxury,6396660,37,high,3
5,1971,231784,4,Urban,luxury,6407992,21,medium,2
4,2081,212248,4,Urban,moderate,6409892,14,high,3
4,2139,187936,4,Urban,luxury,6470144,2,medium,5
5,1428,54444,4,Rural,luxury,6484184,11,medium,5
2,2328,159900,2,Urban,necessity,6487616,39,medium,5
4,1184,232004,4,Urban,necessity,6489924,38,medium,4
3,2862,37812,3,Rural,necessity,6491680,34,low,1
1,2494,186464,1,Urban,luxury,6499688,38,low,5
4,2637,48552,3,Rural,moderate,6529152,50,high,2
4,2535,26772,4,Rural,moderate,6533940,34,low,5
1,1640,92080,1,Urban,moderate,6537700,18,low,4
5,2458,21724,4,Rural,necessity,6538924,30,high,2
4,1562,23580,4,Rural,necessity,6612828,15,high,4
2,1884,40824,1,Rural,luxury,6616468,27,high,2
3,1376,229244,3,Urban,luxury,6621840,34,low,3
4,2594,33244,4,Rural,necessity,6621996,38,low,1
3,2761,44240,3,Rural,moderate,6632912,33,high,1
4,2183,150408,4,Urban,luxury,6641556,24,medium,4
4,2633,46796,4,Rural,luxury,6645264,15,high,1
5,1095,212156,4,Urban,necessity,6647260,30,medium,4
3,2338,84544,3,Urban,moderate,6649776,42,medium,4
1,2656,140608,1,Urban,necessity,6666624,17,high,4
5,2687,41300,4,Rural,necessity,6674156,5,high,1
5,2690,39200,4,Rural,moderate,6689408,29,high,4
1,2136,27108,1,Rural,moderate,6692056,4,low,1
2,2442,220532,2,Urban,moderate,6708424,10,medium,4
2,2562,97880,1,Urban,moderate,6713192,17,low,5
1,2693,197028,1,Urban,luxury,6720348,10,low,4
4,1581,56712,4,Rural,luxury,6724832,17,high,2
1,2040,48324,1,Rural,moderate,6740304,20,low,4
4,1189,171444,4,Urban,luxury,6751540,24,high,3
2,2539,212568,1,Urban,necessity,6785188,5,medium,4
5,2570,4652,4,Rural,moderate,6786732,34,high,2
2,2642,202828,1,Urban,necessity,6796184,6,low,2
3,2393,89412,3,Urban,moderate,6800800,2,low,1
3,1401,82100,3,Urban,luxury,6806284,13,high,5
5,2173,202092,4,Urban,moderate,6812332,43,high,4
5,1549,13972,4,Rural,moderate,6831668,43,low,1
2,1973,48952,1,Rural,moderate,6839096,48,medium,5
1,2658,149736,1,Urban,luxury,6874356,11,medium,4
3,1513,166368,2,Urban,luxury,6890216,47,high,3
2,2642,196964,2,Urban,moderate,6910356,23,medium,4
4,2302,213356,3,Urban,necessity,6930048,16,low,2
4,2274,238740,4,Urban,moderate,6931640,31,high,2
1,2119,38936,1,Rural,luxury,6941648,11,low,3
5,1579,17496,4,Rural,moderate,6996112,16,low,1
1,1756,158492,1,Urban,necessity,7013432,8,medium,5
3,2521,131212,3,Urban,luxury,7018952,4,high,4
4,2255,145236,4,Urban,luxury,7024848,40,high,2
1,1746,115784,1,Urban,necessity,7039896,4,medium,1
4,1752,21432,4,Rural,moderate,7045064,25,low,3
1,1748,183568,1,Urban,moderate,7058772,3,low,2
1,2233,37740,1,Rural,necessity,7076404,32,low,3
4,2310,178312,3,Urban,necessity,7076640,3,low,4
5,1223,128012,4,Urban,luxury,7084072,27,high,5
5,2865,53320,4,Rural,moderate,7102992,29,high,2
3,2497,81124,3,Urban,luxury,7109176,32,medium,2
3,1960,32908,2,Rural,moderate,7141780,50,medium,4
5,1208,119528,4,Urban,luxury,7148960,19,high,1
3,2594,104616,3,Urban,moderate,7185552,21,high,5
1,1871,91232,1,Urban,luxury,7193932,5,low,2
4,2363,136540,3,Urban,necessity,7229080,18,low,5
2,2158,59540,1,Rural,necessity,7243624,28,medium,2
5,1314,210224,4,Urban,moderate,7243824,42,high,5
1,1896,152352,1,Urban,moderate,7246032,22,medium,3
5,1667,15088,4,Rural,moderate,7266000,21,high,2
4,1853,31148,3,Rural,moderate,7269848,6,low,5
2,2129,54744,2,Rural,necessity,7326264,1,medium,1
4,2417,186892,3,Urban,luxury,7338184,5,medium,3
4,1933,26624,3,Rural,necessity,7343536,41,high,3
4,1853,25888,3,Rural,luxury,7389100,12,low,1
3,2594,120900,2,Urban,luxury,7403484,26,medium,5
3,2731,154556,2,Urban,luxury,7405632,46,low,4
5,2357,116440,4,Urban,luxury,7490600,34,medium,1
3,2042,39708,3,Rural,necessity,7495008,49,low,5
1,2938,122896,1,Urban,moderate,7510456,14,high,1
3,2724,178296,2,Urban,luxury,7525704,26,medium,1
5,1829,30408,4,Rural,necessity,7552016,45,medium,2
2,2897,95048,1,Urban,moderate,7560132,27,low,5
2,1812,193520,1,Urban,moderate,7583728,9,low,4
5,2455,232024,4,Urban,necessity,7599312,26,medium,2
3,1645,116068,2,Urban,necessity,7615276,47,high,1
3,2074,15408,2,Rural,moderate,7679212,22,low,1
2,2182,57868,2,Rural,luxury,7682076,47,low,1
4,2576,189504,3,Urban,luxury,7682864,30,low,5
2,1888,108856,1,Urban,moderate,7687112,43,medium,5
2,2992,195324,1,Urban,luxury,7711056,48,medium,2
5,2552,158304,4,Urban,necessity,7718632,17,medium,4
4,1969,5928,3,Rural,moderate,7729132,26,medium,2
1,2387,37032,1,Rural,moderate,7742108,36,high,3
4,2720,98812,3,Urban,moderate,7761112,1,high,1
4,1492,144004,4,Urban,necessity,7791408,8,medium,1
2,2972,86240,1,Urban,moderate,7797888,49,high,1
2,2897,120724,2,Urban,luxury,7804084,35,low,2
4,2049,26156,3,Rural,necessity,7818680,15,low,2
5,2443,88452,4,Urban,necessity,7823228,47,low,1
5,1450,141592,4,Urban,necessity,7826116,22,medium,2
2,1916,216628,1,Urban,necessity,7878560,14,low,5
2,2408,47608,1,Rural,necessity,7900680,26,high,5
5,2658,198180,4,Urban,luxury,7962452,28,medium,2
4,2628,148700,4,Urban,necessity,8033448,23,high,1
4,1620,175428,4,Urban,luxury,8038000,14,low,2
4,1715,181164,3,Urban,moderate,8111440,24,low,2
5,2031,4592,4,Rural,necessity,8118224,2,low,2
4,2796,184572,3,Urban,necessity,8150880,45,medium,3
1,2575,54972,1,Rural,luxury,8152852,26,high,5
2,1945,136796,2,Urban,luxury,8167836,14,medium,4
1,2070,102896,1,Urban,moderate,8171788,7,medium,4
4,2169,5676,3,Rural,necessity,8173828,3,low,3
1,2133,134028,1,Urban,moderate,8190476,47,medium,2
5,2625,121444,4,Urban,luxury,8203528,23,medium,3
1,2600,13888,1,Rural,moderate,8207208,46,low,3
1,2656,43172,1,Rural,necessity,8259976,43,medium,1
1,2605,23528,1,Rural,necessity,8283540,47,low,5
5,1563,91680,4,Urban,necessity,8294524,45,low,4
4,1669,165152,3,Urban,moderate,8294700,18,low,2
2,1964,224884,2,Urban,luxury,8326180,38,low,4
3,1858,125700,2,Urban,luxury,8349004,35,medium,4
4,1724,186820,3,Urban,moderate,8358168,15,low,5
3,2945,207532,3,Urban,necessity,8374764,25,low,4
5,2073,32180,4,Rural,necessity,8440956,37,medium,4
3,2370,56940,2,Rural,luxury,8443992,28,medium,3
2,2041,134448,2,Urban,necessity,8467804,10,high,5
4,2949,119388,4,Urban,necessity,8567624,39,medium,1
2,2548,16160,1,Rural,luxury,8579164,17,medium,2
4,2323,6520,3,Rural,necessity,8583496,39,high,4
5,2775,227508,4,Urban,moderate,8608108,22,medium,2
5,1641,206340,4,Urban,luxury,8623372,26,medium,1
4,2351,6756,3,Rural,moderate,8644420,44,medium,2
4,2336,6644,3,Rural,luxury,8651668,25,medium,1
2,2581,56488,2,Rural,luxury,8667972,17,high,3
4,2355,44580,3,Rural,moderate,8682184,13,medium,4
1,2253,196036,1,Urban,luxury,8738300,20,medium,1
4,2992,123264,3,Urban,luxury,8738808,25,high,2
1,2786,46104,1,Rural,moderate,8750920,4,low,4
4,2363,46996,3,Rural,necessity,8854432,10,high,3
4,1890,209652,3,Urban,moderate,8880272,3,low,4
5,2910,153760,4,Urban,moderate,8886920,41,high,1
3,2536,36908,3,Rural,luxury,8979736,45,high,3
1,2327,186740,1,Urban,luxury,8993768,18,medium,2
1,2893,19496,1,Rural,moderate,9001244,47,low,3
5,2215,55776,4,Rural,necessity,9026060,36,medium,3
1,2310,168060,1,Urban,luxury,9074668,47,low,5
5,2334,44804,4,Rural,moderate,9079548,22,high,3
2,2272,187152,1,Urban,necessity,9114524,34,high,3
2,2168,106252,2,Urban,luxury,9118720,47,low,4
5,1819,124332,4,Urban,necessity,9187612,8,medium,2
4,2468,46372,4,Rural,luxury,9191604,40,medium,4
2,2319,88200,1,Urban,luxury,9208032,49,medium,4
5,1812,116800,4,Urban,luxury,9294036,44,medium,1
3,2616,37732,3,Rural,necessity,9365852,19,high,4
1,2496,182236,1,Urban,necessity,9382164,42,high,5
3,2146,238992,3,Urban,moderate,9396968,41,high,5
3,2135,93720,3,Urban,necessity,9401904,37,high,1
5,2381,36936,4,Rural,luxury,9406828,6,high,2
5,1824,155400,4,Urban,necessity,9413368,26,medium,2
4,1984,146644,4,Urban,moderate,9449276,34,medium,4
5,1872,105104,4,Urban,necessity,9570516,45,medium,4
1,2517,102504,1,Urban,moderate,9586508,6,medium,4
3,2673,11216,3,Rural,moderate,9586752,37,high,2



================================================
File: src/components/RoomQuiz/RoomQuiz.css
================================================
/* Import the same font as landing page */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap');

/* Quiz container styles */
.quiz-wrapper {
  background: linear-gradient(to bottom, #ffffff, #F5E6D3);
  min-height: 100vh;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

/* Quiz card styles */
.quiz-card {
  background: white;
  border-radius: 1rem;
  box-shadow: 0 8px 20px rgba(139, 69, 19, 0.1);
  border: 1px solid #DEB887;
  width: 90%;
  max-width: 900px;
  margin: 1rem auto;
  display: flex;
  flex-direction: column;
  padding: 2rem;
}

/* Quiz header area */
.quiz-header {
  text-align: center;
  margin-bottom: 2rem;
}

.quiz-title {
  font-family: 'Playfair Display', serif;
  font-size: 1.75rem;
  color: #8B4513;
  margin-bottom: 0.5rem;
}

.quiz-subtitle {
  font-size: 1rem;
  color: #6B4423;
  margin-bottom: 1.5rem;
}

/* Progress indicator */
.quiz-progress {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.quiz-progress-container {
  flex: 1;
  height: 0.4rem;
  background-color: #F5E6D3;
  border-radius: 1rem;
  margin: 0 0.5rem;
  overflow: hidden;
}

.quiz-progress-fill {
  background: linear-gradient(90deg, #8B4513, #CD853F);
  height: 100%;
  transition: width 0.5s ease-out;
}

/* Question area */
.question-area {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  max-width: 600px;
  margin: 0 auto;
  width: 100%;
}

/* Options grid */
.options-grid {
  display: flex;
  flex-direction: column;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1rem;
  margin: 1rem 0;
  width: 100%;
  align-items: center;
}

.quiz-option {
  background: white;
  border: 2px solid #DEB887;
  color: #6B4423;
  padding: 1rem;
  border-radius: 1rem;
  font-size: 1rem;
  transition: all 0.3s ease;
  cursor: pointer;
  width: 100%;
  text-align: left;
}

.quiz-option:hover {
  border-color: #8B4513;
  background-color: #F5E6D3;
  transform: translateY(-4px);
}

.quiz-option.selected {
  background-color: #F5E6D3;
  border-color: #8B4513;
  transform: scale(1.02);
}

/* Navigation buttons */
.quiz-navigation {
  display: flex;
  justify-content: space-between;
  margin-top: 1.5rem;
  padding: 0 1rem;
}

.quiz-button {
  background-color: #8B4513;
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.quiz-button:hover {
  background-color: #CD853F;
  transform: translateY(-2px);
}

.quiz-button:disabled {
  background-color: #DEB887;
  cursor: not-allowed;
  transform: none;
}

/* Completion screen */
.completion-screen {
  text-align: center;
  padding: 2rem;
}

.quiz-input {
  width: 300px;
  padding: 0.75rem;
  font-size: 1rem;
  border: 2px solid #DEB887;
  border-radius: 0.5rem;
  margin: 1rem auto;
  transition: all 0.3s ease;
  text-align: center;
  display: block;
  color: #8B4513;
}

.quiz-input:focus {
  border-color: #8B4513;
  box-shadow: 0 0 0 4px rgba(139, 69, 19, 0.1);
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .quiz-card {
    padding: 1rem;
  }

  .quiz-title {
    font-size: 2rem;
  }

  .quiz-subtitle {
    font-size: 0.9rem;
  }

  .options-grid {
    grid-template-columns: 1fr;
  }

  .quiz-option {
    padding: 1rem;
  }

  .quiz-input {
    width: 80%;
  }
}

.budget-display {
  font-family: 'Playfair Display', serif;
  color: #8B4513;
  font-size: 2rem;
  font-weight: bold;
  margin: 10px 0;
}

  .quiz-done-text {
    font-family: 'Playfair Display', serif;
    font-weight: 700; /* To make it bold */
    color: #463024; /* Same color as the option text */
    font-size: 1.5rem; /* Adjust the size as needed */
    margin: 10px 0;
  }

  .quiz-input {
    width: 120%; /* Expand the length */
    padding: 12px; /* Slightly increase padding for better appearance */
    border: 1px solid #ccc;
    border-radius: 15px; /* Make corners more rounded */
    font-size: 16px;
    margin-top: 5px; /* Reduce top margin to shift it upward */
    margin-left: -10%; /* Shift it more to the left */
    box-sizing: border-box; /* Ensure padding and border are included in the width */
  }

  .logo-link {
    text-decoration: none; /* Removes underline */
    color: inherit; /* Uses the same color as parent (.logo) */
}



================================================
File: src/components/RoomQuiz/RoomQuiz.js
================================================
import React, { useState } from 'react';
import { ChevronLeft, ChevronRight, Home, CheckCircle } from 'lucide-react';
import './RoomQuiz.css';
import { useAuth0 } from '@auth0/auth0-react';
import LogoutButton from '../Login-in/LogoutButton';
import { useNavigate, Link } from 'react-router-dom';
import { Search, User, Plus } from 'lucide-react';

function NavLink({ children, to }) {
  return (
    <Link to={to} className="nav-link">
      {children}
    </Link>
  );
}

function Navigation() {
  return (
    <nav className="nav">
      <div className="nav-content">
        <div className="nav-left">
          <h1 className="logo">
            <a href="/main-page" className="logo-link">Decora</a>
          </h1>

          <div className="nav-links">
            {/* <NavLink to="/">Design</NavLink> */}
            {/* <NavLink to="/products">Products</NavLink> */}
            <a href="/budget-estimator">Budget Estimator</a>
          </div>
        </div>
        <div className="nav-right">
          <div className="search-container">
            <input type="text" placeholder="Search" className="search-input" />
            <Search className="search-icon" />
          </div>
          <button className="profile-button">
            <User className="profile-icon" />
          </button>
          <LogoutButton />
        </div>
      </div>
    </nav>
  );
}

  const questions = [
    {
      id: 'bedrooms',
      title: 'Bedrooms',
      question: 'How many bedrooms does your house have?',
      icon: '🛏️',
      type: 'number', // Indicates this is a user input field
      placeholder: 'Enter number of bedrooms',
    },
    {
      id: 'sqft',
      title: 'Square Footage',
      question: 'What is the area of your house in square feet?',
      icon: '📏',
      type: 'number', // Indicates this is a user input field
      placeholder: 'Enter square footage',
    },
    {
      id: 'price',
      title: 'Price per Sqft',
      question: 'What is the price per square foot of your house?',
      icon: '💰',
      type: 'number', // Updated to user input field
      placeholder: 'Enter price per square foot (₹)',
    },
    {
      id: 'toilets',
      title: 'Bathrooms',
      question: 'How many bathrooms are there in your house?',
      icon: '🚽',
      type: 'number', // Indicates this is a user input field
      placeholder: 'Enter number of bathrooms',
    },
    {
      id: 'locality',
      title: 'Location',
      question: 'Where is your house located?',
      icon: '📍',
      options: ['Urban', 'Rural'],
    },
    {
      id: 'renovation',
      title: 'Renovation',
      question: 'What type of renovation was done in your house?',
      icon: '🔨',
      options: ['necessity', 'moderate', 'luxury'],
    },
    {
      id: 'age',
      title: 'House Age',
      question: 'How old is your house?',
      icon: '⏳',
      type: 'number', // Indicates this is a user input field
      placeholder: 'Enter age of the house in years',
    },
    {
      id: 'quality',
      title: 'Material Quality',
      question: 'What is the quality of materials used in your house?',
      icon: '⭐',
      options: ['low', 'medium', 'high'],
    },
  ];

  const RoomQuiz = () => {
    const [currentQuestion, setCurrentQuestion] = useState(0);
    const [answers, setAnswers] = useState({});
    const [isCompleted, setIsCompleted] = useState(false);
    const [estimatedBudget, setEstimatedBudget] = useState(null);
    const [loading, setLoading] = useState(false);
    const [animation, setAnimation] = useState('quiz-fade-in');
  
    // Function to handle answer selection
    const handleAnswer = (answer) => {
      setAnswers((prev) => ({
        ...prev,
        [questions[currentQuestion].id]: answer,
      }));
    };
  
    // Function to handle input change
    const handleInputChange = (e) => {
      const value = e.target.value;
      setAnswers((prev) => ({
        ...prev,
        [questions[currentQuestion].id]: value,
      }));
    };
  
    // Function to fetch budget from ML model
    const fetchEstimatedBudget = async () => {
      setLoading(true);
      try {
        console.log('Sending answers:', answers); // Debugging: Log the answers being sent
        const response = await fetch('http://localhost:5003/api/predict-budget', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(answers),
        });
    
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
    
        const data = await response.json();
        console.log('Received data:', data); // Debugging: Log the API response
        setEstimatedBudget(data.estimatedBudget);
      } catch (error) {
        console.error('Error fetching budget:', error);
        setEstimatedBudget('Error calculating budget. Please try again.');
      } finally {
        setLoading(false);
      }
    };
  
    const handleNext = () => {
      setAnimation('quiz-fade-out');
      setTimeout(() => {
        if (currentQuestion < questions.length - 1) {
          setCurrentQuestion((prev) => prev + 1);
        } else {
          setIsCompleted(true);
          fetchEstimatedBudget(); // Fetch the budget when the quiz is completed
        }
        setAnimation('quiz-fade-in');
      }, 300);
    };
  
    const handlePrevious = () => {
      setAnimation('quiz-fade-out');
      setTimeout(() => {
        if (currentQuestion > 0) {
          setCurrentQuestion((prev) => prev - 1);
        }
        setAnimation('quiz-fade-in');
      }, 300);
    };
  
    if (isCompleted) {
      return (
        <>
          <Navigation />
          <div className="quiz-wrapper">
            <div className="quiz-card">
              <div className="text-center p-4">
                <CheckCircle className="quiz-completion-icon w-12 h-12 mx-auto mb-4" />
                <h2 className="text-xl font-bold text-[#463024] mb-2" style={{color:"#8B4513"}}>
                  {loading ? 'Calculating your budget...' : 'Done! 🎉'}
                </h2>
                <p className="text-[#694832] mb-4" style={{color:"#8B4513"}}>
                  {loading
                    ? 'Please wait while we calculate your estimated budget...'
                    : `The estimated budget for your room is:`}
                </p>
                {!loading && (
                  <h3 className="budget-display">
                    {estimatedBudget && !isNaN(estimatedBudget)
                      ? `₹ ${Number(Math.ceil(estimatedBudget / 100000) * 100000).toLocaleString('en-IN', {
  maximumFractionDigits: 0,
})}`
                      : 'N/A'}
                  </h3>
                )}
              </div>
              <div className="px-4 pb-4">
                {!loading && (
                  <button
                    onClick={() => window.location.reload()}
                    className="quiz-button w-full py-2 px-4 rounded-lg font-semibold"
                  >
                    Take Quiz Again
                  </button>
                )}
              </div>
            </div>
          </div>
        </>
      );
    }
  
    return (
      <>
        <Navigation />
        <div className="quiz-wrapper">
          <div className="quiz-card">
            <div className="quiz-header">
              <h1 className="quiz-title">{questions[currentQuestion].title}</h1>
              <p className="quiz-subtitle">{questions[currentQuestion].question}</p>
              <div className="quiz-progress">
                <span>{currentQuestion + 1}</span>
                <div className="quiz-progress-container">
                  <div
                    className="quiz-progress-fill"
                    style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
                  ></div>
                </div>
                <span>{questions.length}</span>
              </div>
            </div>
  
            <div className="question-area">
              <div className={`options-grid ${animation}`}>
                {questions[currentQuestion].type === 'number' ? (
                  <input
                    type="number"
                    placeholder={questions[currentQuestion].placeholder}
                    value={answers[questions[currentQuestion].id] || ''}
                    onChange={handleInputChange}
                    className="quiz-input"
                  />
                ) : (
                  questions[currentQuestion].options.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => handleAnswer(option)}
                      className={`quiz-option ${
                        answers[questions[currentQuestion].id] === option ? 'selected' : ''
                      }`}
                    >
                      {option}
                    </button>
                  ))
                )}
              </div>
            </div>
  
            <div className="quiz-navigation">
              <button
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
                className="quiz-button"
              >
                <ChevronLeft className="w-5 h-5" /> Previous
              </button>
              <button
                onClick={handleNext}
                disabled={
                  questions[currentQuestion].type === 'number'
                    ? !answers[questions[currentQuestion].id]
                    : !answers[questions[currentQuestion].id]
                }
                className="quiz-button"
              >
                {currentQuestion === questions.length - 1 ? 'Finish' : 'Next'}
                <ChevronRight className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </>
    );
  };
  
  export default RoomQuiz;


================================================
File: src/components/RoomQuiz/linear_regression_model.h5
================================================
[Non-text file]


================================================
File: src/components/RoomQuiz/linear_regression_model.joblib
================================================
[Non-text file]


================================================
File: src/components/RoomQuiz/requirements.txt
================================================
Flask==2.3.2
flask-cors==3.1.1
numpy==1.24.1
pandas==1.5.3
joblib==1.2.0
scikit-learn==1.2.0



================================================
File: src/components/RoomQuiz/server.py
================================================
from flask import Flask, request, jsonify
from flask_cors import CORS
import numpy as np
import pandas as pd
import os
import joblib
import random

app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "http://localhost:3000"}})

def load_model():
    model_path = './linear_regression_model.joblib'
    
    # Check if model file exists
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found at {model_path}. Please ensure the model file is in the correct location.")
    
    try:
        # Load the scikit-learn pipeline
        model = joblib.load(model_path)
        return model
    except Exception as e:
        raise Exception(f"Error loading model: {str(e)}")

# Initialize model as None
model = None

@app.route('/api/predict-budget', methods=['POST'])
def predict_budget():
    global model
    
    try:
        # Load the model if not already loaded
        if model is None:
            try:
                model = load_model()
            except Exception as e:
                # If model loading fails, return a dummy prediction for testing
                print(f"Warning: Using dummy model due to loading error: {str(e)}")
                return jsonify({
                    'estimatedBudget': 500000,  # Dummy value for testing
                    'warning': 'Using test mode: Model not loaded'
                })

        # Get the data from the POST request
        data = request.get_json()
        print("Received data:", data)

        # Validate required fields
        required_fields = ['bedrooms', 'sqft', 'price', 'toilets', 'locality', 
                         'renovation', 'age', 'quality']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({
                'error': f'Missing required fields: {", ".join(missing_fields)}'
            }), 400

        # Map input data keys to training data column names
        mapped_data = {
            'Bedrooms': int(data['bedrooms']),
            'Sqft Area': float(data['sqft']),
            'Price per Sqft (INR)': float(data['price']),
            'Toilets': int(data['toilets']),
            'House Age (years)': int(data['age']),
            'Locality': data['locality'],  # Keep as string for the pipeline
            'Renovation Type': data['renovation'].lower(),  # Normalize to lowercase for the pipeline
            'Material Quality': data['quality'].lower(),
            'Energy Efficiency Rating': random.randint(1, 5)  # Add a random energy efficiency rating
        }

        # Convert the mapped data to a DataFrame
        input_df = pd.DataFrame([mapped_data])

        # Use the model's pipeline for prediction
        prediction = model.predict(input_df)
        print("Prediction:", prediction)

        return jsonify({'estimatedBudget': np.ceil(float(prediction[0]*0.5))})

    except Exception as e:
        print("Error:", e)
        return jsonify({
            'error': 'Internal server error',
            'details': str(e)
        }), 500

if __name__ == '__main__':
    
    # Try to load the model at startup
    try:
        model = load_model()
        print("Model loaded successfully!")
    except Exception as e:
        print(f"Warning: Could not load model at startup: {str(e)}")
        print("Server will run in test mode with dummy predictions")
    
    app.run(debug=True, port = 5003)

